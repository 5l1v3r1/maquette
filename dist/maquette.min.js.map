{"version":3,"sources":["maquette.js","../../../src/maquette.ts"],"names":["root","factory","define","amd","exports","nodeName","maquette","this","createDom","updateDom","NAMESPACE_SVG","emptyArray","extend","base","overrides","result","Object","keys","forEach","key","same","vnode1","vnode2","vnodeSelector","properties","bind","toTextVNode","data","undefined","children","text","toString","domNode","appendChildren","parentSelector","insertions","main","i","length","item","Array","isArray","hasOwnProperty","push","missingTransition","Error","DEFAULT_PROJECTION_OPTIONS","namespace","eventHandlerInterceptor","styleApplyer","styleName","value","style","transitions","enter","exit","applyDefaultProjectionOptions","projectionOptions","checkStyleValue","styleValue","setProperties","propNames","propCount","propName","propValue","className","classNames","classNameCount","j","classList","add","styleNames","styleCount","type","lastIndexOf","oldPropValue","evt","target","apply","setAttribute","updateProperties","previousProperties","propertiesUpdated","previousValue","on","previousOn","remove","newStyleValue","oldStyleValue","findIndexOfChild","sameAs","start","nodeAdded","vNode","enterAnimation","nodeToRemove","exitAnimation","pointerEvents","removeDomNode","parentNode","removeChild","checkDistinguishable","childNodes","indexToCheck","parentVNode","operation","childNode","node","updateChildren","vnode","oldChildren","newChildren","oldChildrenLength","newChildrenLength","oldIndex","newIndex","textUpdated","oldChild","newChild","findOldIndex","addChildren","initPropertiesAndChildren","textContent","afterCreate","insertBefore","c","found","document","createTextNode","appendChild","charAt","slice","id","createElementNS","createElement","previous","updated","newVNode","replaceChild","firstChild","afterUpdate","updateAnimation","createProjection","update","updatedVnode","h","selector","arguments","childIndex","argsLength","onlyChild","child","dom","create","append","beforeNode","merge","element","createCache","cachedInputs","cachedOutcome","invalidate","inputs","calculation","createMapping","getSourceKey","createResult","updateResult","results","map","newSources","newKeys","oldTargets","source","sourceKey","searchIndex","createProjector","projector","originalEventHandlerInterceptor","propertyName","eventHandler","scheduleRenderAndInvokeEventHandler","scheduleRender","scheduled","renderCompleted","stopped","projections","renderFunctions","doRender","requestAnimationFrame","stop","cancelAnimationFrame","resume","renderMaquetteFunction","replace"],"mappings":"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","file":"maquette.min.js","sourcesContent":["(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['exports'], factory);\n    } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {\n        // CommonJS\n        factory(exports);\n    } else {\n        // Browser globals\n        factory(root.maquette = {});\n    }\n}(this, function (exports) {\n    'use strict';\n    ;\n    ;\n    ;\n    var NAMESPACE_SVG = 'http://www.w3.org/2000/svg';\n    // Utilities\n    var emptyArray = [];\n    var extend = function (base, overrides) {\n        var result = {};\n        Object.keys(base).forEach(function (key) {\n            result[key] = base[key];\n        });\n        if (overrides) {\n            Object.keys(overrides).forEach(function (key) {\n                result[key] = overrides[key];\n            });\n        }\n        return result;\n    };\n    // Hyperscript helper functions\n    var same = function (vnode1, vnode2) {\n        if (vnode1.vnodeSelector !== vnode2.vnodeSelector) {\n            return false;\n        }\n        if (vnode1.properties && vnode2.properties) {\n            if (vnode1.properties.key !== vnode2.properties.key) {\n                return false;\n            }\n            return vnode1.properties.bind === vnode2.properties.bind;\n        }\n        return !vnode1.properties && !vnode2.properties;\n    };\n    var toTextVNode = function (data) {\n        return {\n            vnodeSelector: '',\n            properties: undefined,\n            children: undefined,\n            text: data.toString(),\n            domNode: null\n        };\n    };\n    var appendChildren = function (parentSelector, insertions, main) {\n        for (var i = 0; i < insertions.length; i++) {\n            var item = insertions[i];\n            if (Array.isArray(item)) {\n                appendChildren(parentSelector, item, main);\n            } else {\n                if (item !== null && item !== undefined) {\n                    if (!item.hasOwnProperty('vnodeSelector')) {\n                        item = toTextVNode(item);\n                    }\n                    main.push(item);\n                }\n            }\n        }\n    };\n    // Render helper functions\n    var missingTransition = function () {\n        throw new Error('Provide a transitions object to the projectionOptions to do animations');\n    };\n    var DEFAULT_PROJECTION_OPTIONS = {\n        namespace: undefined,\n        eventHandlerInterceptor: undefined,\n        styleApplyer: function (domNode, styleName, value) {\n            // Provides a hook to add vendor prefixes for browsers that still need it.\n            domNode.style[styleName] = value;\n        },\n        transitions: {\n            enter: missingTransition,\n            exit: missingTransition\n        }\n    };\n    var applyDefaultProjectionOptions = function (projectionOptions) {\n        return extend(DEFAULT_PROJECTION_OPTIONS, projectionOptions);\n    };\n    var checkStyleValue = function (styleValue) {\n        if (typeof styleValue !== 'string') {\n            throw new Error('Style values must be strings');\n        }\n    };\n    var setProperties = function (domNode, properties, projectionOptions) {\n        if (!properties) {\n            return;\n        }\n        var eventHandlerInterceptor = projectionOptions.eventHandlerInterceptor;\n        var propNames = Object.keys(properties);\n        var propCount = propNames.length;\n        for (var i = 0; i < propCount; i++) {\n            var propName = propNames[i];\n            /* tslint:disable:no-var-keyword: edge case */\n            var propValue = properties[propName];\n            /* tslint:enable:no-var-keyword */\n            if (propName === 'className') {\n                throw new Error('Property \"className\" is not supported, use \"class\".');\n            } else if (propName === 'class') {\n                if (domNode.className) {\n                    // May happen if classes is specified before class\n                    domNode.className += ' ' + propValue;\n                } else {\n                    domNode.className = propValue;\n                }\n            } else if (propName === 'classes') {\n                // object with string keys and boolean values\n                var classNames = Object.keys(propValue);\n                var classNameCount = classNames.length;\n                for (var j = 0; j < classNameCount; j++) {\n                    var className = classNames[j];\n                    if (propValue[className]) {\n                        domNode.classList.add(className);\n                    }\n                }\n            } else if (propName === 'styles') {\n                // object with string keys and string (!) values\n                var styleNames = Object.keys(propValue);\n                var styleCount = styleNames.length;\n                for (var j = 0; j < styleCount; j++) {\n                    var styleName = styleNames[j];\n                    var styleValue = propValue[styleName];\n                    if (styleValue) {\n                        checkStyleValue(styleValue);\n                        projectionOptions.styleApplyer(domNode, styleName, styleValue);\n                    }\n                }\n            } else if (propName === 'key') {\n                continue;\n            } else if (propValue === null || propValue === undefined) {\n                continue;\n            } else {\n                var type = typeof propValue;\n                if (type === 'function') {\n                    if (eventHandlerInterceptor && propName.lastIndexOf('on', 0) === 0) {\n                        propValue = eventHandlerInterceptor(propName, propValue, domNode, properties);\n                        // intercept eventhandlers\n                        if (propName === 'oninput') {\n                            (function () {\n                                // record the evt.target.value, because IE sometimes does a requestAnimationFrame between changing value and running oninput\n                                var oldPropValue = propValue;\n                                propValue = function (evt) {\n                                    evt.target['oninput-value'] = evt.target.value;\n                                    // may be HTMLTextAreaElement as well\n                                    oldPropValue.apply(this, [evt]);\n                                };\n                            }());\n                        }\n                        domNode[propName] = propValue;\n                    }\n                } else if (type === 'string' && propName !== 'value' && propName !== 'innerHTML') {\n                    domNode.setAttribute(propName, propValue);\n                } else {\n                    domNode[propName] = propValue;\n                }\n            }\n        }\n    };\n    var updateProperties = function (domNode, previousProperties, properties, projectionOptions) {\n        if (!properties) {\n            return;\n        }\n        var propertiesUpdated = false;\n        var propNames = Object.keys(properties);\n        var propCount = propNames.length;\n        for (var i = 0; i < propCount; i++) {\n            var propName = propNames[i];\n            // assuming that properties will be nullified instead of missing is by design\n            var propValue = properties[propName];\n            var previousValue = previousProperties[propName];\n            if (propName === 'class') {\n                if (previousValue !== propValue) {\n                    throw new Error('\"class\" property may not be updated. Use the \"classes\" property for conditional css classes.');\n                }\n            } else if (propName === 'classes') {\n                var classList = domNode.classList;\n                var classNames = Object.keys(propValue);\n                var classNameCount = classNames.length;\n                for (var j = 0; j < classNameCount; j++) {\n                    var className = classNames[j];\n                    var on = !!propValue[className];\n                    var previousOn = !!previousValue[className];\n                    if (on === previousOn) {\n                        continue;\n                    }\n                    propertiesUpdated = true;\n                    if (on) {\n                        classList.add(className);\n                    } else {\n                        classList.remove(className);\n                    }\n                }\n            } else if (propName === 'styles') {\n                var styleNames = Object.keys(propValue);\n                var styleCount = styleNames.length;\n                for (var j = 0; j < styleCount; j++) {\n                    var styleName = styleNames[j];\n                    var newStyleValue = propValue[styleName];\n                    var oldStyleValue = previousValue[styleName];\n                    if (newStyleValue === oldStyleValue) {\n                        continue;\n                    }\n                    propertiesUpdated = true;\n                    if (newStyleValue) {\n                        checkStyleValue(newStyleValue);\n                        projectionOptions.styleApplyer(domNode, styleName, newStyleValue);\n                    } else {\n                        projectionOptions.styleApplyer(domNode, styleName, '');\n                    }\n                }\n            } else {\n                if (!propValue && typeof previousValue === 'string') {\n                    propValue = '';\n                }\n                if (propName === 'value') {\n                    if (domNode[propName] !== propValue && domNode['oninput-value'] !== propValue) {\n                        domNode[propName] = propValue;\n                        // Reset the value, even if the virtual DOM did not change\n                        domNode['oninput-value'] = undefined;\n                    }\n                    // else do not update the domNode, otherwise the cursor position would be changed\n                    if (propValue !== previousValue) {\n                        propertiesUpdated = true;\n                    }\n                } else if (propValue !== previousValue) {\n                    var type = typeof propValue;\n                    if (type === 'function') {\n                        throw new Error('Functions may not be updated on subsequent renders (property: ' + propName + '). Hint: declare event handler functions outside the render() function.');\n                    }\n                    if (type === 'string' && propName !== 'innerHTML') {\n                        domNode.setAttribute(propName, propValue);\n                    } else {\n                        if (domNode[propName] !== propValue) {\n                            domNode[propName] = propValue;\n                        }\n                    }\n                    propertiesUpdated = true;\n                }\n            }\n        }\n        return propertiesUpdated;\n    };\n    var findIndexOfChild = function (children, sameAs, start) {\n        if (sameAs.vnodeSelector !== '') {\n            // Never scan for text-nodes\n            for (var i = start; i < children.length; i++) {\n                if (same(children[i], sameAs)) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    };\n    var nodeAdded = function (vNode, transitions) {\n        if (vNode.properties) {\n            var enterAnimation = vNode.properties.enterAnimation;\n            if (enterAnimation) {\n                if (typeof enterAnimation === 'function') {\n                    enterAnimation(vNode.domNode, vNode.properties);\n                } else {\n                    transitions.enter(vNode.domNode, vNode.properties, enterAnimation);\n                }\n            }\n        }\n    };\n    var nodeToRemove = function (vNode, transitions) {\n        var domNode = vNode.domNode;\n        if (vNode.properties) {\n            var exitAnimation = vNode.properties.exitAnimation;\n            if (exitAnimation) {\n                domNode.style.pointerEvents = 'none';\n                var removeDomNode = function () {\n                    if (domNode.parentNode) {\n                        domNode.parentNode.removeChild(domNode);\n                    }\n                };\n                if (typeof exitAnimation === 'function') {\n                    exitAnimation(domNode, removeDomNode, vNode.properties);\n                    return;\n                } else {\n                    transitions.exit(vNode.domNode, vNode.properties, exitAnimation, removeDomNode);\n                    return;\n                }\n            }\n        }\n        if (domNode.parentNode) {\n            domNode.parentNode.removeChild(domNode);\n        }\n    };\n    var checkDistinguishable = function (childNodes, indexToCheck, parentVNode, operation) {\n        var childNode = childNodes[indexToCheck];\n        if (childNode.vnodeSelector === '') {\n            return;    // Text nodes need not be distinguishable\n        }\n        var key = childNode.properties ? childNode.properties.key || childNode.properties.bind : undefined;\n        if (!key) {\n            for (var i = 0; i < childNodes.length; i++) {\n                if (i !== indexToCheck) {\n                    var node = childNodes[i];\n                    if (same(node, childNode)) {\n                        if (operation === 'added') {\n                            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' + 'added, but there is now more than one. You must add unique key properties to make them distinguishable.');\n                        } else {\n                            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' + 'removed, but there were more than one. You must add unique key properties to make them distinguishable.');\n                        }\n                    }\n                }\n            }\n        }\n    };\n    var createDom;\n    var updateDom;\n    var updateChildren = function (vnode, domNode, oldChildren, newChildren, projectionOptions) {\n        if (oldChildren === newChildren) {\n            return false;\n        }\n        oldChildren = oldChildren || emptyArray;\n        newChildren = newChildren || emptyArray;\n        var oldChildrenLength = oldChildren.length;\n        var newChildrenLength = newChildren.length;\n        var transitions = projectionOptions.transitions;\n        var oldIndex = 0;\n        var newIndex = 0;\n        var i;\n        var textUpdated = false;\n        while (newIndex < newChildrenLength) {\n            var oldChild = oldIndex < oldChildrenLength ? oldChildren[oldIndex] : undefined;\n            var newChild = newChildren[newIndex];\n            if (oldChild !== undefined && same(oldChild, newChild)) {\n                textUpdated = updateDom(oldChild, newChild, projectionOptions) || textUpdated;\n                oldIndex++;\n            } else {\n                var findOldIndex = findIndexOfChild(oldChildren, newChild, oldIndex + 1);\n                if (findOldIndex >= 0) {\n                    // Remove preceding missing children\n                    for (i = oldIndex; i < findOldIndex; i++) {\n                        nodeToRemove(oldChildren[i], transitions);\n                        checkDistinguishable(oldChildren, i, vnode, 'removed');\n                    }\n                    textUpdated = updateDom(oldChildren[findOldIndex], newChild, projectionOptions) || textUpdated;\n                    oldIndex = findOldIndex + 1;\n                } else {\n                    // New child\n                    createDom(newChild, domNode, oldIndex < oldChildrenLength ? oldChildren[oldIndex].domNode : undefined, projectionOptions);\n                    nodeAdded(newChild, transitions);\n                    checkDistinguishable(newChildren, newIndex, vnode, 'added');\n                }\n            }\n            newIndex++;\n        }\n        if (oldChildrenLength > oldIndex) {\n            // Remove child fragments\n            for (i = oldIndex; i < oldChildrenLength; i++) {\n                nodeToRemove(oldChildren[i], transitions);\n                checkDistinguishable(oldChildren, i, vnode, 'removed');\n            }\n        }\n        return textUpdated;\n    };\n    var addChildren = function (domNode, children, projectionOptions) {\n        if (!children) {\n            return;\n        }\n        for (var i = 0; i < children.length; i++) {\n            createDom(children[i], domNode, undefined, projectionOptions);\n        }\n    };\n    var initPropertiesAndChildren = function (domNode, vnode, projectionOptions) {\n        addChildren(domNode, vnode.children, projectionOptions);\n        // children before properties, needed for value property of <select>.\n        if (vnode.text) {\n            domNode.textContent = vnode.text;\n        }\n        setProperties(domNode, vnode.properties, projectionOptions);\n        if (vnode.properties && vnode.properties.afterCreate) {\n            vnode.properties.afterCreate(domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children);\n        }\n    };\n    createDom = function (vnode, parentNode, insertBefore, projectionOptions) {\n        var domNode, i, c, start = 0, type, found;\n        var vnodeSelector = vnode.vnodeSelector;\n        if (vnodeSelector === '') {\n            domNode = vnode.domNode = document.createTextNode(vnode.text);\n            if (insertBefore !== undefined) {\n                parentNode.insertBefore(domNode, insertBefore);\n            } else {\n                parentNode.appendChild(domNode);\n            }\n        } else {\n            for (i = 0; i <= vnodeSelector.length; ++i) {\n                c = vnodeSelector.charAt(i);\n                if (i === vnodeSelector.length || c === '.' || c === '#') {\n                    type = vnodeSelector.charAt(start - 1);\n                    found = vnodeSelector.slice(start, i);\n                    if (type === '.') {\n                        domNode.classList.add(found);\n                    } else if (type === '#') {\n                        domNode.id = found;\n                    } else {\n                        if (found === 'svg') {\n                            projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\n                        }\n                        if (projectionOptions.namespace !== undefined) {\n                            domNode = vnode.domNode = document.createElementNS(projectionOptions.namespace, found);\n                        } else {\n                            domNode = vnode.domNode = document.createElement(found);\n                        }\n                        if (insertBefore !== undefined) {\n                            parentNode.insertBefore(domNode, insertBefore);\n                        } else {\n                            parentNode.appendChild(domNode);\n                        }\n                    }\n                    start = i + 1;\n                }\n            }\n            initPropertiesAndChildren(domNode, vnode, projectionOptions);\n        }\n    };\n    updateDom = function (previous, vnode, projectionOptions) {\n        var domNode = previous.domNode;\n        var textUpdated = false;\n        if (previous === vnode) {\n            return textUpdated;    // By contract, VNode objects may not be modified after passing them to maquette\n        }\n        var updated = false;\n        if (vnode.vnodeSelector === '') {\n            if (vnode.text !== previous.text) {\n                var newVNode = document.createTextNode(vnode.text);\n                domNode.parentNode.replaceChild(newVNode, domNode);\n                vnode.domNode = newVNode;\n                textUpdated = true;\n                return textUpdated;\n            }\n        } else {\n            if (vnode.vnodeSelector.lastIndexOf('svg', 0) === 0) {\n                projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\n            }\n            if (previous.text !== vnode.text) {\n                updated = true;\n                if (vnode.text === undefined) {\n                    domNode.removeChild(domNode.firstChild);    // the only textnode presumably\n                } else {\n                    domNode.textContent = vnode.text;\n                }\n            }\n            updated = updateChildren(vnode, domNode, previous.children, vnode.children, projectionOptions) || updated;\n            updated = updateProperties(domNode, previous.properties, vnode.properties, projectionOptions) || updated;\n            if (vnode.properties && vnode.properties.afterUpdate) {\n                vnode.properties.afterUpdate(domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children);\n            }\n        }\n        if (updated && vnode.properties && vnode.properties.updateAnimation) {\n            vnode.properties.updateAnimation(domNode, vnode.properties, previous.properties);\n        }\n        vnode.domNode = previous.domNode;\n        return textUpdated;\n    };\n    var createProjection = function (vnode, projectionOptions) {\n        return {\n            update: function (updatedVnode) {\n                if (vnode.vnodeSelector !== updatedVnode.vnodeSelector) {\n                    throw new Error('The selector for the root VNode may not be changed. (consider using dom.merge and add one extra level to the virtual DOM)');\n                }\n                updateDom(vnode, updatedVnode, projectionOptions);\n                vnode = updatedVnode;\n            },\n            domNode: vnode.domNode\n        };\n    };\n    ;\n    // The other two parameters are not added here, because the Typescript compiler creates surrogate code for desctructuring 'children'.\n    exports.h = function (selector) {\n        var properties = arguments[1];\n        if (typeof selector !== 'string') {\n            throw new Error();\n        }\n        var childIndex = 1;\n        if (properties && !properties.hasOwnProperty('vnodeSelector') && !Array.isArray(properties) && typeof properties === 'object') {\n            childIndex = 2;\n        } else {\n            // Optional properties argument was omitted\n            properties = undefined;\n        }\n        var text = undefined;\n        var children = undefined;\n        var argsLength = arguments.length;\n        // Recognize a common special case where there is only a single text node\n        if (argsLength === childIndex + 1) {\n            var onlyChild = arguments[childIndex];\n            if (typeof onlyChild === 'string') {\n                text = onlyChild;\n            } else if (onlyChild !== undefined && onlyChild.length === 1 && typeof onlyChild[0] === 'string') {\n                text = onlyChild[0];\n            }\n        }\n        if (text === undefined) {\n            children = [];\n            for (; childIndex < arguments.length; childIndex++) {\n                var child = arguments[childIndex];\n                if (child === null || child === undefined) {\n                    continue;\n                } else if (Array.isArray(child)) {\n                    appendChildren(selector, child, children);\n                } else if (child.hasOwnProperty('vnodeSelector')) {\n                    children.push(child);\n                } else {\n                    children.push(toTextVNode(child));\n                }\n            }\n        }\n        return {\n            vnodeSelector: selector,\n            properties: properties,\n            children: children,\n            text: text,\n            domNode: null\n        };\n    };\n    /**\n * Contains simple low-level utility functions to manipulate the real DOM.\n */\n    exports.dom = {\n        /**\n     * Creates a real DOM tree from `vnode`. The [[Projection]] object returned will contain the resulting DOM Node in\n     * its [[Projection.domNode|domNode]] property.\n     * This is a low-level method. Users wil typically use a [[Projector]] instead.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\n     * objects may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the projection.\n     * @returns The [[Projection]] which also contains the DOM Node that was created.\n     */\n        create: function (vnode, projectionOptions) {\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n            createDom(vnode, document.createElement('div'), undefined, projectionOptions);\n            return createProjection(vnode, projectionOptions);\n        },\n        /**\n     * Appends a new childnode to the DOM which is generated from a [[VNode]].\n     * This is a low-level method. Users wil typically use a [[Projector]] instead.\n     * @param parentNode - The parent node for the new childNode.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\n     * objects may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the [[Projection]].\n     * @returns The [[Projection]] that was created.\n     */\n        append: function (parentNode, vnode, projectionOptions) {\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n            createDom(vnode, parentNode, undefined, projectionOptions);\n            return createProjection(vnode, projectionOptions);\n        },\n        /**\n     * Inserts a new DOM node which is generated from a [[VNode]].\n     * This is a low-level method. Users wil typically use a [[Projector]] instead.\n     * @param beforeNode - The node that the DOM Node is inserted before.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function.\n     * NOTE: [[VNode]] objects may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\n     * @returns The [[Projection]] that was created.\n     */\n        insertBefore: function (beforeNode, vnode, projectionOptions) {\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n            createDom(vnode, beforeNode.parentNode, beforeNode, projectionOptions);\n            return createProjection(vnode, projectionOptions);\n        },\n        /**\n     * Merges a new DOM node which is generated from a [[VNode]] with an existing DOM Node.\n     * This means that the virtual DOM and the real DOM will have one overlapping element.\n     * Therefore the selector for the root [[VNode]] will be ignored, but its properties and children will be applied to the Element provided.\n     * This is a low-level method. Users wil typically use a [[Projector]] instead.\n     * @param domNode - The existing element to adopt as the root of the new virtual DOM. Existing attributes and childnodes are preserved.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]] objects\n     * may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\n     * @returns The [[Projection]] that was created.\n     */\n        merge: function (element, vnode, projectionOptions) {\n            projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n            vnode.domNode = element;\n            initPropertiesAndChildren(element, vnode, projectionOptions);\n            return createProjection(vnode, projectionOptions);\n        }\n    };\n    /**\n * Creates a [[CalculationCache]] object, useful for caching [[VNode]] trees.\n * In practice, caching of [[VNode]] trees is not needed, because achieving 60 frames per second is almost never a problem.\n * For more information, see [[CalculationCache]].\n *\n * @param <Result> The type of the value that is cached.\n */\n    exports.createCache = function () {\n        var cachedInputs = undefined;\n        var cachedOutcome = undefined;\n        var result = {\n            invalidate: function () {\n                cachedOutcome = undefined;\n                cachedInputs = undefined;\n            },\n            result: function (inputs, calculation) {\n                if (cachedInputs) {\n                    for (var i = 0; i < inputs.length; i++) {\n                        if (cachedInputs[i] !== inputs[i]) {\n                            cachedOutcome = undefined;\n                        }\n                    }\n                }\n                if (!cachedOutcome) {\n                    cachedOutcome = calculation();\n                    cachedInputs = inputs;\n                }\n                return cachedOutcome;\n            }\n        };\n        return result;\n    };\n    /**\n * Creates a {@link Mapping} instance that keeps an array of result objects synchronized with an array of source objects.\n * See {@link http://maquettejs.org/docs/arrays.html|Working with arrays}.\n *\n * @param <Source>       The type of source items. A database-record for instance.\n * @param <Target>       The type of target items. A [[Component]] for instance.\n * @param getSourceKey   `function(source)` that must return a key to identify each source object. The result must either be a string or a number.\n * @param createResult   `function(source, index)` that must create a new result object from a given source. This function is identical\n *                       to the `callback` argument in `Array.map(callback)`.\n * @param updateResult   `function(source, target, index)` that updates a result to an updated source.\n */\n    exports.createMapping = function (getSourceKey, createResult, updateResult) {\n        var keys = [];\n        var results = [];\n        return {\n            results: results,\n            map: function (newSources) {\n                var newKeys = newSources.map(getSourceKey);\n                var oldTargets = results.slice();\n                var oldIndex = 0;\n                for (var i = 0; i < newSources.length; i++) {\n                    var source = newSources[i];\n                    var sourceKey = newKeys[i];\n                    if (sourceKey === keys[oldIndex]) {\n                        results[i] = oldTargets[oldIndex];\n                        updateResult(source, oldTargets[oldIndex], i);\n                        oldIndex++;\n                    } else {\n                        var found = false;\n                        for (var j = 1; j < keys.length; j++) {\n                            var searchIndex = (oldIndex + j) % keys.length;\n                            if (keys[searchIndex] === sourceKey) {\n                                results[i] = oldTargets[searchIndex];\n                                updateResult(newSources[i], oldTargets[searchIndex], i);\n                                oldIndex = searchIndex + 1;\n                                found = true;\n                                break;\n                            }\n                        }\n                        if (!found) {\n                            results[i] = createResult(source, i);\n                        }\n                    }\n                }\n                results.length = newSources.length;\n                keys = newKeys;\n            }\n        };\n    };\n    /**\n * Creates a [[Projector]] instance using the provided projectionOptions.\n *\n * For more information, see [[Projector]].\n *\n * @param projectionOptions   Options that influence how the DOM is rendered and updated.\n */\n    exports.createProjector = function (projectionOptions) {\n        var projector;\n        projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n        var originalEventHandlerInterceptor = projectionOptions.eventHandlerInterceptor;\n        projectionOptions.eventHandlerInterceptor = function (propertyName, eventHandler, domNode, properties) {\n            var scheduleRenderAndInvokeEventHandler = function () {\n                // intercept function calls (event handlers) to do a render afterwards.\n                projector.scheduleRender();\n                return eventHandler.apply(properties.bind || this, arguments);\n            };\n            if (originalEventHandlerInterceptor) {\n                return originalEventHandlerInterceptor(propertyName, scheduleRenderAndInvokeEventHandler, domNode, properties);\n            } else {\n                return scheduleRenderAndInvokeEventHandler;\n            }\n        };\n        var renderCompleted = true;\n        var scheduled;\n        var stopped = false;\n        var projections = [];\n        var renderFunctions = [];\n        // matches the projections array\n        var doRender = function () {\n            scheduled = undefined;\n            if (!renderCompleted) {\n                return;    // The last render threw an error, it should be logged in the browser console.\n            }\n            renderCompleted = false;\n            for (var i = 0; i < projections.length; i++) {\n                var updatedVnode = renderFunctions[i]();\n                projections[i].update(updatedVnode);\n            }\n            renderCompleted = true;\n        };\n        projector = {\n            scheduleRender: function () {\n                if (!scheduled && !stopped) {\n                    scheduled = requestAnimationFrame(doRender);\n                }\n            },\n            stop: function () {\n                if (scheduled) {\n                    cancelAnimationFrame(scheduled);\n                    scheduled = undefined;\n                }\n                stopped = true;\n            },\n            resume: function () {\n                stopped = false;\n                renderCompleted = true;\n                projector.scheduleRender();\n            },\n            append: function (parentNode, renderMaquetteFunction) {\n                projections.push(exports.dom.append(parentNode, renderMaquetteFunction(), projectionOptions));\n                renderFunctions.push(renderMaquetteFunction);\n            },\n            insertBefore: function (beforeNode, renderMaquetteFunction) {\n                projections.push(exports.dom.insertBefore(beforeNode, renderMaquetteFunction(), projectionOptions));\n                renderFunctions.push(renderMaquetteFunction);\n            },\n            merge: function (domNode, renderMaquetteFunction) {\n                projections.push(exports.dom.merge(domNode, renderMaquetteFunction(), projectionOptions));\n                renderFunctions.push(renderMaquetteFunction);\n            },\n            replace: function (domNode, renderMaquetteFunction) {\n                var vnode = renderMaquetteFunction();\n                createDom(vnode, domNode.parentNode, domNode, projectionOptions);\n                domNode.parentNode.removeChild(domNode);\n                projections.push(createProjection(vnode, projectionOptions));\n                renderFunctions.push(renderMaquetteFunction);\n            }\n        };\n        return projector;\n    };\n}));","// Comment that is displayed in the API documentation for the maquette module:\r\n/**\r\n * Welcome to the API documentation of the **maquette** library.\r\n *\r\n * [[http://maquettejs.org/|To the maquette homepage]]\r\n */\r\n\r\n/**\r\n * A virtual representation of a DOM Node. Maquette assumes that [[VNode]] objects are never modified externally.\r\n * Instances of [[VNode]] can be created using [[h]].\r\n */\r\nexport interface VNode {\r\n  /**\r\n   * The CSS selector containing tagname, css classnames and id. An empty string is used to denote a text node.\r\n   */\r\n  vnodeSelector: string;\r\n  /**\r\n   * Object containing attributes, properties, event handlers and more, see [[h]].\r\n   */\r\n  properties: VNodeProperties;\r\n  /**\r\n   * Array of [[VNode]]s to be used as children. This array is already flattened.\r\n   */\r\n  children: Array<VNode>;\r\n  /**\r\n   * Used in a special case when a [[VNode]] only has one childnode which is a textnode. Only used in combination with children === undefined.\r\n   */\r\n  text: string;\r\n  /**\r\n   * Used by maquette to store the domNode that was produced from this [[VNode]].\r\n   */\r\n  domNode: Node;\r\n}\r\n\r\n/**\r\n * A projector is used to create the real DOM from the the virtual DOM and to keep it up-to-date afterwards.\r\n *\r\n * You can call [[append]], [[merge]], [[insertBefore]] and [[replace]] to add the virtual DOM to the real DOM.\r\n * The `renderMaquetteFunction` callbacks will be called to create the real DOM immediately.\r\n * Afterwards, the `renderMaquetteFunction` callbacks will be called again to update the DOM on the next animation-frame after:\r\n *\r\n *  - The Projector's [[scheduleRender]] function  was called\r\n *  - An event handler (like `onclick`) on a rendered [[VNode]] was called.\r\n *\r\n * The projector stops when [[stop]] is called or when an error is thrown during rendering.\r\n * It is possible to use `window.onerror` to handle these errors.\r\n * Instances of [[Projector]] can be created using [[createProjector]].\r\n */\r\nexport interface Projector {\r\n  /**\r\n   * Appends a new childnode to the DOM using the result from the provided `renderMaquetteFunction`.\r\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\r\n   * @param parentNode - The parent node for the new childNode.\r\n   * @param renderMaquetteFunction - Function with zero arguments that returns a [[VNode]] tree.\r\n   */\r\n  append(parentNode: Element, renderMaquetteFunction: () => VNode): void;\r\n  /**\r\n   * Inserts a new DOM node using the result from the provided `renderMaquetteFunction`.\r\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\r\n   * @param beforeNode - The node that the DOM Node is inserted before.\r\n   * @param renderMaquetteFunction - Function with zero arguments that returns a [[VNode]] tree.\r\n   */\r\n  insertBefore(beforeNode: Element, renderMaquetteFunction: () => VNode): void;\r\n  /**\r\n   * Merges a new DOM node using the result from the provided `renderMaquetteFunction` with an existing DOM Node.\r\n   * This means that the virtual DOM and real DOM have one overlapping element.\r\n   * Therefore the selector for the root [[VNode]] will be ignored, but its properties and children will be applied to the Element provided\r\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\r\n   * @param domNode - The existing element to adopt as the root of the new virtual DOM. Existing attributes and childnodes are preserved.\r\n   * @param renderMaquetteFunction - Function with zero arguments that returns a [[VNode]] tree.\r\n   */\r\n  merge(domNode: Element, renderMaquetteFunction: () => VNode): void;\r\n  /**\r\n   * Replaces an existing DOM node with the result from the provided `renderMaquetteFunction`.\r\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\r\n   * @param domNode - The DOM node to replace.\r\n   * @param renderMaquetteFunction - Function with zero arguments that returns a [[VNode]] tree.\r\n   */\r\n  replace(domNode: Element, renderMaquetteFunction: () => VNode): void;\r\n  /**\r\n   * Resumes the projector. Use this method to resume rendering after [[stop]] was called or an error occurred during rendering.\r\n   */\r\n  resume(): void;\r\n  /**\r\n   * Instructs the projector to re-render to the DOM at the next animation-frame using the registered `renderMaquette` functions.\r\n   * This method is automatically called for you when event-handlers that are registered in the [[VNode]]s are invoked.\r\n   *\r\n   * You need to call this method when timeouts expire, when AJAX responses arrive or other asynchronous actions happen.\r\n   */\r\n  scheduleRender(): void;\r\n  /**\r\n   * Stops the projector. This means that the registered `renderMaquette` functions will not be called anymore.\r\n   *\r\n   * Note that calling [[stop]] is not mandatory. A projector is a passive object that will get garbage collected\r\n   * as usual if it is no longer in scope.\r\n   */\r\n  stop(): void;\r\n}\r\n\r\n/**\r\n * These functions are called when [[VNodeProperties.enterAnimation]] and [[VNodeProperties.exitAnimation]] are provided as strings.\r\n * See [[ProjectionOptions.transitions]].\r\n */\r\nexport interface TransitionStrategy {\r\n  /**\r\n   * Function that is called when a [[VNode]] with an `enterAnimation` string is added to an already existing parent [[VNode]].\r\n   *\r\n   * @param element         Element that was just added to the DOM.\r\n   * @param properties      The properties object that was supplied to the [[h]] method\r\n   * @param enterAnimation  The string that was passed to [[VNodeProperties.enterAnimation]].\r\n   */\r\n  enter(element: Element, properties: VNodeProperties, enterAnimation: string): void;\r\n  /**\r\n   * Function that is called when a [[VNode]] with an `exitAnimation` string is removed from a existing parent [[VNode]] that remains.\r\n   *\r\n   * @param element         Element that ought to be removed from to the DOM.\r\n   * @param properties      The properties object that was supplied to the [[h]] method that rendered this [[VNode]] the previous time.\r\n   * @param exitAnimation   The string that was passed to [[VNodeProperties.exitAnimation]].\r\n   * @param removeElement   Function that removes the element from the DOM.\r\n   *                        This argument is provided purely for convenience.\r\n   *                        You may use this function to remove the element when the animation is done.\r\n   */\r\n  exit(element: Element, properties: VNodeProperties, exitAnimation: string, removeElement: () => void): void;\r\n};\r\n\r\n/**\r\n * Options that influence how the DOM is rendered and updated.\r\n */\r\nexport interface ProjectionOptions {\r\n  /**\r\n   * A transition strategy to invoke when enterAnimation and exitAnimation properties are provided as strings.\r\n   * The module `cssTransitions` in the provided `css-transitions.js` file provides such a strategy.\r\n   * A transition strategy is not needed when enterAnimation and exitAnimation properties are provided as functions.\r\n   */\r\n  transitions?: TransitionStrategy;\r\n  /**\r\n   * Only for internal use. Used for rendering SVG Nodes.\r\n   */\r\n  namespace?: string;\r\n  /**\r\n   * May be used to intercept registration of event-handlers.\r\n   *\r\n   * Used by the [[Projector]] to wrap eventHandler-calls to call [[scheduleRender]] as well.\r\n   *\r\n   * @param propertyName             The name of the property to be assigned, for example onclick\r\n   * @param eventHandler             The function that was registered on the [[VNode]]\r\n   * @param domNode                  The real DOM element\r\n   * @param properties               The whole set of properties that was put on the VNode\r\n   * @returns                        The function that is to be placed on the DOM node as the event handler, instead of `eventHandler`.\r\n   */\r\n  eventHandlerInterceptor?: (propertyName: string, eventHandler: Function, domNode: Node, properties: VNodeProperties) => Function;\r\n  /**\r\n   * May be used to add vendor prefixes when applying inline styles when needed.\r\n   * This function is called when [[styles]] is used.\r\n   * This function should execute `domNode.style[styleName] = value` or do something smarter.\r\n   *\r\n   * @param domNode   The DOM Node that needs to receive the style\r\n   * @param styleName The name of the style that should be applied, for example `transform`.\r\n   * @param value     The value of this style, for example `rotate(45deg)`.\r\n   */\r\n  styleApplyer?(domNode: HTMLElement, styleName: string, value: string): void;\r\n};\r\n\r\n/**\r\n * Object containing attributes, properties, event handlers and more that can be put on DOM nodes.\r\n *\r\n * For your convenience, all common attributes, properties and event handlers are listed here and are\r\n * type-checked when using Typescript.\r\n */\r\nexport interface VNodeProperties {\r\n  /**\r\n   * The animation to perform when this node is added to an already existing parent.\r\n   * When this value is a string, you must pass a `projectionOptions.transitions` object when creating the\r\n   * projector using [[createProjector]].\r\n   * {@link http://maquettejs.org/docs/animations.html|More about animations}.\r\n   * @param element - Element that was just added to the DOM.\r\n   * @param properties - The properties object that was supplied to the [[h]] method\r\n   */\r\n  enterAnimation?: ((element: Element, properties?: VNodeProperties) => void) | string;\r\n  /**\r\n   * The animation to perform when this node is removed while its parent remains.\r\n   * When this value is a string, you must pass a `projectionOptions.transitions` object when creating the projector using [[createProjector]].\r\n   * {@link http://maquettejs.org/docs/animations.html|More about animations}.\r\n   * @param element - Element that ought to be removed from to the DOM.\r\n   * @param removeElement - Function that removes the element from the DOM.\r\n   * This argument is provided purely for convenience.\r\n   * You may use this function to remove the element when the animation is done.\r\n   * @param properties - The properties object that was supplied to the [[h]] method that rendered this [[VNode]] the previous time.\r\n   */\r\n  exitAnimation?: ((element: Element, removeElement: () => void, properties?: VNodeProperties) => void) | string;\r\n  /**\r\n   * The animation to perform when the properties of this node change.\r\n   * This also includes attributes, styles, css classes. This callback is also invoked when node contains only text and that text changes.\r\n   * {@link http://maquettejs.org/docs/animations.html|More about animations}.\r\n   * @param element - Element that was modified in the DOM.\r\n   * @param properties - The last properties object that was supplied to the [[h]] method\r\n   * @param previousProperties - The previous properties object that was supplied to the [[h]] method\r\n   */\r\n  updateAnimation?: (element: Element, properties?: VNodeProperties, previousProperties?: VNodeProperties) => void;\r\n  /**\r\n   * Callback that is executed after this node is added to the DOM. Childnodes and properties have\r\n   * already been applied.\r\n   * @param element - The element that was added to the DOM.\r\n   * @param projectionOptions - The projection options that were used see [[createProjector]].\r\n   * @param vnodeSelector - The selector passed to the [[h]] function.\r\n   * @param properties - The properties passed to the [[h]] function.\r\n   * @param children - The children that were created.\r\n   * @param properties - The last properties object that was supplied to the [[h]] method\r\n   * @param previousProperties - The previous properties object that was supplied to the [[h]] method\r\n   */\r\n  afterCreate?(element: Element, projectionOptions: ProjectionOptions, vnodeSelector: string, properties: VNodeProperties,\r\n    children: VNode[]): void;\r\n  /**\r\n   * Callback that is executed every time this node may have been updated. Childnodes and properties\r\n   * have already been updated.\r\n   * @param element - The element that may have been updated in the DOM.\r\n   * @param projectionOptions - The projection options that were used see [[createProjector]].\r\n   * @param vnodeSelector - The selector passed to the [[h]] function.\r\n   * @param properties - The properties passed to the [[h]] function.\r\n   * @param children - The children for this node.\r\n   */\r\n  afterUpdate?(element: Element, projectionOptions: ProjectionOptions, vnodeSelector: string, properties: VNodeProperties,\r\n    children: VNode[]): void;\r\n  /**\r\n   * When specified, the event handlers will be invoked with 'this' pointing to the value.\r\n   * This is useful when using the prototype/class based implementation of Components.\r\n   *\r\n   * When no [[key]] is present, this object is also used to uniquely identify a DOM node.\r\n   */\r\n  bind?: Object;\r\n  /**\r\n   * Used to uniquely identify a DOM node among siblings.\r\n   * A key is required when there are more children with the same selector and these children are added or removed dynamically.\r\n   * NOTE: this does not have to be a string or number, a [[Component]] Object for instance is also possible.\r\n   */\r\n  key?: Object;\r\n  /**\r\n   * An object literal like `{important:true}` which allows css classes, like `important` to be added and removed\r\n   * dynamically.\r\n   */\r\n  classes?: { [index: string]: boolean };\r\n  /**\r\n   * An object literal like `{height:'100px'}` which allows styles to be changed dynamically. All values must be strings.\r\n   */\r\n  styles?: { [index: string]: string };\r\n\r\n  // From Element\r\n  ontouchcancel?(ev?: TouchEvent): boolean | void;\r\n  ontouchend?(ev?: TouchEvent): boolean | void;\r\n  ontouchmove?(ev?: TouchEvent): boolean | void;\r\n  ontouchstart?(ev?: TouchEvent): boolean | void;\r\n  // From HTMLFormElement\r\n  action?: string;\r\n  encoding?: string;\r\n  enctype?: string;\r\n  method?: string;\r\n  name?: string;\r\n  target?: string;\r\n  // From HTMLElement\r\n  onblur?(ev?: FocusEvent): boolean | void;\r\n  onchange?(ev?: Event): boolean | void;\r\n  onclick?(ev?: MouseEvent): boolean | void;\r\n  ondblclick?(ev?: MouseEvent): boolean | void;\r\n  onfocus?(ev?: FocusEvent): boolean | void;\r\n  oninput?(ev?: Event): boolean | void;\r\n  onkeydown?(ev?: KeyboardEvent): boolean | void;\r\n  onkeypress?(ev?: KeyboardEvent): boolean | void;\r\n  onkeyup?(ev?: KeyboardEvent): boolean | void;\r\n  onload?(ev?: Event): boolean | void;\r\n  onmousedown?(ev?: MouseEvent): boolean | void;\r\n  onmouseenter?(ev?: MouseEvent): boolean | void;\r\n  onmouseleave?(ev?: MouseEvent): boolean | void;\r\n  onmousemove?(ev?: MouseEvent): boolean | void;\r\n  onmouseout?(ev?: MouseEvent): boolean | void;\r\n  onmouseover?(ev?: MouseEvent): boolean | void;\r\n  onmouseup?(ev?: MouseEvent): boolean | void;\r\n  onmousewheel?(ev?: MouseWheelEvent): boolean | void;\r\n  onscroll?(ev?: UIEvent): boolean | void;\r\n  onsubmit?(ev?: Event): boolean | void;\r\n  spellcheck?: boolean;\r\n  tabIndex?: number;\r\n  title?: string;\r\n  accessKey?: string;\r\n  id?: string;\r\n  // From HTMLInputElement\r\n  autocomplete?: string;\r\n  checked?: boolean;\r\n  placeholder?: string;\r\n  readOnly?: boolean;\r\n  src?: string;\r\n  value?: string;\r\n  // From HTMLImageElement\r\n  alt?: string;\r\n  srcset?: string;\r\n  /**\r\n   * Puts a non-interactive piece of html inside the DOM node.\r\n   *\r\n   * Note: if you use innerHTML, maquette cannot protect you from XSS vulnerabilities and you must make sure that the innerHTML value is safe.\r\n   */\r\n  innerHTML?: string;\r\n\r\n  /**\r\n   * Everything that is not explicitly listed (properties and attributes that are either uncommon or custom).\r\n   */\r\n  [index: string]: any;\r\n};\r\n\r\n/**\r\n * Represents a [[VNode]] tree that has been rendered to a real DOM tree.\r\n */\r\nexport interface Projection {\r\n  /**\r\n   * The DOM node that is used as the root of this [[Projection]].\r\n   */\r\n  domNode: Element;\r\n  /**\r\n   * Updates the real DOM to match the new virtual DOM tree.\r\n   * @param updatedVnode The updated virtual DOM tree. Note: The selector for the root of the [[VNode]] tree may not change.\r\n   */\r\n  update(updatedVnode: VNode): void;\r\n}\r\n\r\nconst NAMESPACE_SVG = 'http://www.w3.org/2000/svg';\r\n\r\n// Utilities\r\n\r\nlet emptyArray = <VNode[]>[];\r\n\r\nlet extend = <T>(base: T, overrides: any): T => {\r\n  let result = {} as any;\r\n  Object.keys(base).forEach(function(key) {\r\n    result[key] = (base as any)[key];\r\n  });\r\n  if (overrides) {\r\n    Object.keys(overrides).forEach((key) => {\r\n      result[key] = overrides[key];\r\n    });\r\n  }\r\n  return result;\r\n};\r\n\r\n// Hyperscript helper functions\r\n\r\nlet same = (vnode1: VNode, vnode2: VNode) => {\r\n  if (vnode1.vnodeSelector !== vnode2.vnodeSelector) {\r\n    return false;\r\n  }\r\n  if (vnode1.properties && vnode2.properties) {\r\n    if (vnode1.properties.key !== vnode2.properties.key) {\r\n      return false;\r\n    }\r\n    return vnode1.properties.bind === vnode2.properties.bind;\r\n  }\r\n  return !vnode1.properties && !vnode2.properties;\r\n};\r\n\r\nlet toTextVNode = (data: any): VNode => {\r\n  return {\r\n    vnodeSelector: '',\r\n    properties: undefined,\r\n    children: undefined,\r\n    text: data.toString(),\r\n    domNode: null\r\n  };\r\n};\r\n\r\nlet appendChildren = function(parentSelector: string, insertions: any[], main: VNode[]) {\r\n  for (let i = 0; i < insertions.length; i++) {\r\n    let item = insertions[i];\r\n    if (Array.isArray(item)) {\r\n      appendChildren(parentSelector, item, main);\r\n    } else {\r\n      if (item !== null && item !== undefined) {\r\n        if (!item.hasOwnProperty('vnodeSelector')) {\r\n          item = toTextVNode(item);\r\n        }\r\n        main.push(item);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Render helper functions\r\n\r\nlet missingTransition = function() {\r\n  throw new Error('Provide a transitions object to the projectionOptions to do animations');\r\n};\r\n\r\nconst DEFAULT_PROJECTION_OPTIONS: ProjectionOptions = {\r\n  namespace: undefined,\r\n  eventHandlerInterceptor: undefined,\r\n  styleApplyer: function(domNode: HTMLElement, styleName: string, value: string) {\r\n    // Provides a hook to add vendor prefixes for browsers that still need it.\r\n    (domNode.style as any)[styleName] = value;\r\n  },\r\n  transitions: {\r\n    enter: missingTransition,\r\n    exit: missingTransition\r\n  }\r\n};\r\n\r\nlet applyDefaultProjectionOptions = function(projectionOptions: ProjectionOptions) {\r\n  return extend(DEFAULT_PROJECTION_OPTIONS, projectionOptions);\r\n};\r\n\r\nlet checkStyleValue = (styleValue: Object) => {\r\n  if (typeof styleValue !== 'string') {\r\n    throw new Error('Style values must be strings');\r\n  }\r\n};\r\n\r\nlet setProperties = function(domNode: Node, properties: VNodeProperties, projectionOptions: ProjectionOptions) {\r\n  if (!properties) {\r\n    return;\r\n  }\r\n  let eventHandlerInterceptor = projectionOptions.eventHandlerInterceptor;\r\n  let propNames = Object.keys(properties);\r\n  let propCount = propNames.length;\r\n  for (let i = 0; i < propCount; i++) {\r\n    let propName = propNames[i];\r\n    /* tslint:disable:no-var-keyword: edge case */\r\n    var propValue = properties[propName];\r\n    /* tslint:enable:no-var-keyword */\r\n    if (propName === 'className') {\r\n      throw new Error('Property \"className\" is not supported, use \"class\".');\r\n    } else if (propName === 'class') {\r\n      if ((domNode as Element).className) {\r\n        // May happen if classes is specified before class\r\n        (domNode as Element).className += ' ' + propValue;\r\n      } else {\r\n        (domNode as Element).className = propValue;\r\n      }\r\n    } else if (propName === 'classes') {\r\n      // object with string keys and boolean values\r\n      let classNames = Object.keys(propValue);\r\n      let classNameCount = classNames.length;\r\n      for (let j = 0; j < classNameCount; j++) {\r\n        let className = classNames[j];\r\n        if (propValue[className]) {\r\n          (domNode as Element).classList.add(className);\r\n        }\r\n      }\r\n    } else if (propName === 'styles') {\r\n      // object with string keys and string (!) values\r\n      let styleNames = Object.keys(propValue);\r\n      let styleCount = styleNames.length;\r\n      for (let j = 0; j < styleCount; j++) {\r\n        let styleName = styleNames[j];\r\n        let styleValue = propValue[styleName];\r\n        if (styleValue) {\r\n          checkStyleValue(styleValue);\r\n          projectionOptions.styleApplyer(<HTMLElement>domNode, styleName, styleValue);\r\n        }\r\n      }\r\n    } else if (propName === 'key') {\r\n      continue;\r\n    } else if (propValue === null || propValue === undefined) {\r\n      continue;\r\n    } else {\r\n      let type = typeof propValue;\r\n      if (type === 'function') {\r\n        if (eventHandlerInterceptor && (propName.lastIndexOf('on', 0) === 0)) { // lastIndexOf(,0)===0 -> startsWith\r\n          propValue = eventHandlerInterceptor(propName, propValue, domNode, properties); // intercept eventhandlers\r\n          if (propName === 'oninput') {\r\n            (function() {\r\n              // record the evt.target.value, because IE sometimes does a requestAnimationFrame between changing value and running oninput\r\n              let oldPropValue = propValue;\r\n              propValue = function(evt: Event) {\r\n                (evt.target as any)['oninput-value'] = (evt.target as HTMLInputElement).value; // may be HTMLTextAreaElement as well\r\n                oldPropValue.apply(this, [evt]);\r\n              };\r\n            } ());\r\n          }\r\n          (domNode as any)[propName] = propValue;\r\n        }\r\n      } else if (type === 'string' && propName !== 'value' && propName !== 'innerHTML') {\r\n        (domNode as Element).setAttribute(propName, propValue);\r\n      } else {\r\n        (domNode as any)[propName] = propValue;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nlet updateProperties = function(domNode: Node, previousProperties: VNodeProperties, properties: VNodeProperties, projectionOptions: ProjectionOptions) {\r\n  if (!properties) {\r\n    return;\r\n  }\r\n  let propertiesUpdated = false;\r\n  let propNames = Object.keys(properties);\r\n  let propCount = propNames.length;\r\n  for (let i = 0; i < propCount; i++) {\r\n    let propName = propNames[i];\r\n    // assuming that properties will be nullified instead of missing is by design\r\n    let propValue = properties[propName];\r\n    let previousValue = previousProperties[propName];\r\n    if (propName === 'class') {\r\n      if (previousValue !== propValue) {\r\n        throw new Error('\"class\" property may not be updated. Use the \"classes\" property for conditional css classes.');\r\n      }\r\n    } else if (propName === 'classes') {\r\n      let classList = (domNode as Element).classList;\r\n      let classNames = Object.keys(propValue);\r\n      let classNameCount = classNames.length;\r\n      for (let j = 0; j < classNameCount; j++) {\r\n        let className = classNames[j];\r\n        let on = !!propValue[className];\r\n        let previousOn = !!previousValue[className];\r\n        if (on === previousOn) {\r\n          continue;\r\n        }\r\n        propertiesUpdated = true;\r\n        if (on) {\r\n          classList.add(className);\r\n        } else {\r\n          classList.remove(className);\r\n        }\r\n      }\r\n    } else if (propName === 'styles') {\r\n      let styleNames = Object.keys(propValue);\r\n      let styleCount = styleNames.length;\r\n      for (let j = 0; j < styleCount; j++) {\r\n        let styleName = styleNames[j];\r\n        let newStyleValue = propValue[styleName];\r\n        let oldStyleValue = previousValue[styleName];\r\n        if (newStyleValue === oldStyleValue) {\r\n          continue;\r\n        }\r\n        propertiesUpdated = true;\r\n        if (newStyleValue) {\r\n          checkStyleValue(newStyleValue);\r\n          projectionOptions.styleApplyer(domNode as HTMLElement, styleName, newStyleValue);\r\n        } else {\r\n          projectionOptions.styleApplyer(domNode as HTMLElement, styleName, '');\r\n        }\r\n      }\r\n    } else {\r\n      if (!propValue && typeof previousValue === 'string') {\r\n        propValue = '';\r\n      }\r\n      if (propName === 'value') { // value can be manipulated by the user directly and using event.preventDefault() is not an option\r\n        if ((domNode as any)[propName] !== propValue && (domNode as any)['oninput-value'] !== propValue) {\r\n          (domNode as any)[propName] = propValue; // Reset the value, even if the virtual DOM did not change\r\n          (domNode as any)['oninput-value'] = undefined;\r\n        } // else do not update the domNode, otherwise the cursor position would be changed\r\n        if (propValue !== previousValue) {\r\n          propertiesUpdated = true;\r\n        }\r\n      } else if (propValue !== previousValue) {\r\n        let type = typeof propValue;\r\n        if (type === 'function') {\r\n          throw new Error('Functions may not be updated on subsequent renders (property: ' + propName +\r\n            '). Hint: declare event handler functions outside the render() function.');\r\n        }\r\n        if (type === 'string' && propName !== 'innerHTML') {\r\n          (domNode as Element).setAttribute(propName, propValue);\r\n        } else {\r\n          if ((domNode as any)[propName] !== propValue) { // Comparison is here for side-effects in Edge with scrollLeft and scrollTop\r\n            (domNode as any)[propName] = propValue;\r\n          }\r\n        }\r\n        propertiesUpdated = true;\r\n      }\r\n    }\r\n  }\r\n  return propertiesUpdated;\r\n};\r\n\r\nlet findIndexOfChild = function(children: VNode[], sameAs: VNode, start: number) {\r\n  if (sameAs.vnodeSelector !== '') {\r\n    // Never scan for text-nodes\r\n    for (let i = start; i < children.length; i++) {\r\n      if (same(children[i], sameAs)) {\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n  return -1;\r\n};\r\n\r\nlet nodeAdded = function(vNode: VNode, transitions: TransitionStrategy) {\r\n  if (vNode.properties) {\r\n    let enterAnimation = vNode.properties.enterAnimation;\r\n    if (enterAnimation) {\r\n      if (typeof enterAnimation === 'function') {\r\n        enterAnimation(vNode.domNode as Element, vNode.properties);\r\n      } else {\r\n        transitions.enter(vNode.domNode as Element, vNode.properties, enterAnimation as string);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nlet nodeToRemove = function(vNode: VNode, transitions: TransitionStrategy) {\r\n  let domNode = vNode.domNode;\r\n  if (vNode.properties) {\r\n    let exitAnimation = vNode.properties.exitAnimation;\r\n    if (exitAnimation) {\r\n      (domNode as HTMLElement).style.pointerEvents = 'none';\r\n      let removeDomNode = function() {\r\n        if (domNode.parentNode) {\r\n          domNode.parentNode.removeChild(domNode);\r\n        }\r\n      };\r\n      if (typeof exitAnimation === 'function') {\r\n        exitAnimation(domNode as Element, removeDomNode, vNode.properties);\r\n        return;\r\n      } else {\r\n        transitions.exit(vNode.domNode as Element, vNode.properties, exitAnimation as string, removeDomNode);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  if (domNode.parentNode) {\r\n    domNode.parentNode.removeChild(domNode);\r\n  }\r\n};\r\n\r\nlet checkDistinguishable = function(childNodes: VNode[], indexToCheck: number, parentVNode: VNode, operation: string) {\r\n  let childNode = childNodes[indexToCheck];\r\n  if (childNode.vnodeSelector === '') {\r\n    return; // Text nodes need not be distinguishable\r\n  }\r\n  let key = childNode.properties ? (childNode.properties.key || childNode.properties.bind) : undefined;\r\n  if (!key) { // A key is just assumed to be unique\r\n    for (let i = 0; i < childNodes.length; i++) {\r\n      if (i !== indexToCheck) {\r\n        let node = childNodes[i];\r\n        if (same(node, childNode)) {\r\n          if (operation === 'added') {\r\n            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' +\r\n              'added, but there is now more than one. You must add unique key properties to make them distinguishable.');\r\n          } else {\r\n            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' +\r\n              'removed, but there were more than one. You must add unique key properties to make them distinguishable.');\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nlet createDom: (vnode: VNode, parentNode: Node, insertBefore: Node, projectionOptions: ProjectionOptions) => void;\r\nlet updateDom: (previous: VNode, vnode: VNode, projectionOptions: ProjectionOptions) => boolean;\r\n\r\nlet updateChildren = function(vnode: VNode, domNode: Node, oldChildren: VNode[], newChildren: VNode[], projectionOptions: ProjectionOptions) {\r\n  if (oldChildren === newChildren) {\r\n    return false;\r\n  }\r\n  oldChildren = oldChildren || emptyArray;\r\n  newChildren = newChildren || emptyArray;\r\n  let oldChildrenLength = oldChildren.length;\r\n  let newChildrenLength = newChildren.length;\r\n  let transitions = projectionOptions.transitions;\r\n\r\n  let oldIndex = 0;\r\n  let newIndex = 0;\r\n  let i: number;\r\n  let textUpdated = false;\r\n  while (newIndex < newChildrenLength) {\r\n    let oldChild = (oldIndex < oldChildrenLength) ? oldChildren[oldIndex] : undefined;\r\n    let newChild = newChildren[newIndex];\r\n    if (oldChild !== undefined && same(oldChild, newChild)) {\r\n      textUpdated = updateDom(oldChild, newChild, projectionOptions) || textUpdated;\r\n      oldIndex++;\r\n    } else {\r\n      let findOldIndex = findIndexOfChild(oldChildren, newChild, oldIndex + 1);\r\n      if (findOldIndex >= 0) {\r\n        // Remove preceding missing children\r\n        for (i = oldIndex; i < findOldIndex; i++) {\r\n          nodeToRemove(oldChildren[i], transitions);\r\n          checkDistinguishable(oldChildren, i, vnode, 'removed');\r\n        }\r\n        textUpdated = updateDom(oldChildren[findOldIndex], newChild, projectionOptions) || textUpdated;\r\n        oldIndex = findOldIndex + 1;\r\n      } else {\r\n        // New child\r\n        createDom(newChild, domNode, (oldIndex < oldChildrenLength) ? oldChildren[oldIndex].domNode : undefined, projectionOptions);\r\n        nodeAdded(newChild, transitions);\r\n        checkDistinguishable(newChildren, newIndex, vnode, 'added');\r\n      }\r\n    }\r\n    newIndex++;\r\n  }\r\n  if (oldChildrenLength > oldIndex) {\r\n    // Remove child fragments\r\n    for (i = oldIndex; i < oldChildrenLength; i++) {\r\n      nodeToRemove(oldChildren[i], transitions);\r\n      checkDistinguishable(oldChildren, i, vnode, 'removed');\r\n    }\r\n  }\r\n  return textUpdated;\r\n};\r\n\r\nlet addChildren = function(domNode: Node, children: VNode[], projectionOptions: ProjectionOptions) {\r\n  if (!children) {\r\n    return;\r\n  }\r\n  for (let i = 0; i < children.length; i++) {\r\n    createDom(children[i], domNode, undefined, projectionOptions);\r\n  }\r\n};\r\n\r\nlet initPropertiesAndChildren = function(domNode: Node, vnode: VNode, projectionOptions: ProjectionOptions) {\r\n  addChildren(domNode, vnode.children, projectionOptions); // children before properties, needed for value property of <select>.\r\n  if (vnode.text) {\r\n    domNode.textContent = vnode.text;\r\n  }\r\n  setProperties(domNode, vnode.properties, projectionOptions);\r\n  if (vnode.properties && vnode.properties.afterCreate) {\r\n    vnode.properties.afterCreate(domNode as Element, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children);\r\n  }\r\n};\r\n\r\ncreateDom = function(vnode, parentNode, insertBefore, projectionOptions) {\r\n  let domNode: Node, i: number, c: string, start = 0, type: string, found: string;\r\n  let vnodeSelector = vnode.vnodeSelector;\r\n  if (vnodeSelector === '') {\r\n    domNode = vnode.domNode = document.createTextNode(vnode.text);\r\n    if (insertBefore !== undefined) {\r\n      parentNode.insertBefore(domNode, insertBefore);\r\n    } else {\r\n      parentNode.appendChild(domNode);\r\n    }\r\n  } else {\r\n    for (i = 0; i <= vnodeSelector.length; ++i) {\r\n      c = vnodeSelector.charAt(i);\r\n      if (i === vnodeSelector.length || c === '.' || c === '#') {\r\n        type = vnodeSelector.charAt(start - 1);\r\n        found = vnodeSelector.slice(start, i);\r\n        if (type === '.') {\r\n          (domNode as HTMLElement).classList.add(found);\r\n        } else if (type === '#') {\r\n          (domNode as Element).id = found;\r\n        } else {\r\n          if (found === 'svg') {\r\n            projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\r\n          }\r\n          if (projectionOptions.namespace !== undefined) {\r\n            domNode = vnode.domNode = document.createElementNS(projectionOptions.namespace, found);\r\n          } else {\r\n            domNode = vnode.domNode = document.createElement(found);\r\n          }\r\n          if (insertBefore !== undefined) {\r\n            parentNode.insertBefore(domNode, insertBefore);\r\n          } else {\r\n            parentNode.appendChild(domNode);\r\n          }\r\n        }\r\n        start = i + 1;\r\n      }\r\n    }\r\n    initPropertiesAndChildren(domNode, vnode, projectionOptions);\r\n  }\r\n};\r\n\r\nupdateDom = function(previous, vnode, projectionOptions) {\r\n  let domNode = previous.domNode;\r\n  let textUpdated = false;\r\n  if (previous === vnode) {\r\n    return textUpdated; // By contract, VNode objects may not be modified after passing them to maquette\r\n  }\r\n  let updated = false;\r\n  if (vnode.vnodeSelector === '') {\r\n    if (vnode.text !== previous.text) {\r\n      let newVNode = document.createTextNode(vnode.text);\r\n      domNode.parentNode.replaceChild(newVNode, domNode);\r\n      vnode.domNode = newVNode;\r\n      textUpdated = true;\r\n      return textUpdated;\r\n    }\r\n  } else {\r\n    if (vnode.vnodeSelector.lastIndexOf('svg', 0) === 0) { // lastIndexOf(needle,0)===0 means StartsWith\r\n      projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\r\n    }\r\n    if (previous.text !== vnode.text) {\r\n      updated = true;\r\n      if (vnode.text === undefined) {\r\n        domNode.removeChild(domNode.firstChild); // the only textnode presumably\r\n      } else {\r\n        domNode.textContent = vnode.text;\r\n      }\r\n    }\r\n    updated = updateChildren(vnode, domNode, previous.children, vnode.children, projectionOptions) || updated;\r\n    updated = updateProperties(domNode, previous.properties, vnode.properties, projectionOptions) || updated;\r\n    if (vnode.properties && vnode.properties.afterUpdate) {\r\n      vnode.properties.afterUpdate(<Element>domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children);\r\n    }\r\n  }\r\n  if (updated && vnode.properties && vnode.properties.updateAnimation) {\r\n    vnode.properties.updateAnimation(<Element>domNode, vnode.properties, previous.properties);\r\n  }\r\n  vnode.domNode = previous.domNode;\r\n  return textUpdated;\r\n};\r\n\r\nlet createProjection = function(vnode: VNode, projectionOptions: ProjectionOptions): Projection {\r\n  return {\r\n    update: function(updatedVnode: VNode) {\r\n      if (vnode.vnodeSelector !== updatedVnode.vnodeSelector) {\r\n        throw new Error('The selector for the root VNode may not be changed. (consider using dom.merge and add one extra level to the virtual DOM)');\r\n      }\r\n      updateDom(vnode, updatedVnode, projectionOptions);\r\n      vnode = updatedVnode;\r\n    },\r\n    domNode: <Element>vnode.domNode\r\n  };\r\n};\r\n\r\n// The following line is not possible in Typescript, hence the workaround in the two lines below\r\n// export type VNodeChild = string|VNode|Array<VNodeChild>\r\n/**\r\n * Only needed for the defintion of [[VNodeChild]].\r\n */\r\nexport interface VNodeChildren extends Array<VNodeChild> { };\r\n/**\r\n * These are valid values for the children parameter of the [[h]] function.\r\n */\r\nexport type VNodeChild = string | VNode | VNodeChildren;\r\n\r\n/**\r\n * Contains all valid method signatures for the [[h]] function.\r\n */\r\nexport interface H {\r\n  /**\r\n   * @param selector    Contains the tagName, id and fixed css classnames in CSS selector format.\r\n   *                    It is formatted as follows: `tagname.cssclass1.cssclass2#id`.\r\n   * @param properties  An object literal containing properties that will be placed on the DOM node.\r\n   * @param children    Virtual DOM nodes and strings to add as child nodes.\r\n   *                    `children` may contain [[VNode]]s, `string`s, nested arrays, `null` and `undefined`.\r\n   *                    Nested arrays are flattened, `null` and `undefined` are removed.\r\n   *\r\n   * @returns           A VNode object, used to render a real DOM later.\r\n   */\r\n  (selector: string, properties?: VNodeProperties, ...children: VNodeChild[]): VNode;\r\n  (selector: string, ...children: VNodeChild[]): VNode;\r\n}\r\n\r\n/**\r\n * The `h` function is used to create a virtual DOM node.\r\n * This function is largely inspired by the mercuryjs and mithril frameworks.\r\n * The `h` stands for (virtual) hyperscript.\r\n *\r\n * All possible method signatures of this function can be found in the [[H]] 'interface'.\r\n *\r\n * NOTE: There are {@link http://maquettejs.org/docs/rules.html|three basic rules} you should be aware of when updating the virtual DOM.\r\n */\r\nexport let h: H;\r\n\r\n// The other two parameters are not added here, because the Typescript compiler creates surrogate code for desctructuring 'children'.\r\nh = function(selector: string): VNode {\r\n  let properties = arguments[1];\r\n  if (typeof selector !== 'string') {\r\n    throw new Error();\r\n  }\r\n  let childIndex = 1;\r\n  if (properties && !properties.hasOwnProperty('vnodeSelector') && !Array.isArray(properties) && typeof properties === 'object') {\r\n    childIndex = 2;\r\n  } else {\r\n    // Optional properties argument was omitted\r\n    properties = undefined;\r\n  }\r\n  let text = undefined as string;\r\n  let children = undefined as VNode[];\r\n  let argsLength = arguments.length;\r\n  // Recognize a common special case where there is only a single text node\r\n  if (argsLength === childIndex + 1) {\r\n    let onlyChild = arguments[childIndex];\r\n    if (typeof onlyChild === 'string') {\r\n      text = onlyChild;\r\n    } else if (onlyChild !== undefined && onlyChild.length === 1 && typeof onlyChild[0] === 'string') {\r\n      text = onlyChild[0];\r\n    }\r\n  }\r\n  if (text === undefined) {\r\n    children = [];\r\n    for (; childIndex < arguments.length; childIndex++) {\r\n      let child = arguments[childIndex];\r\n      if (child === null || child === undefined) {\r\n        continue;\r\n      } else if (Array.isArray(child)) {\r\n        appendChildren(selector, child, children);\r\n      } else if (child.hasOwnProperty('vnodeSelector')) {\r\n        children.push(child);\r\n      } else {\r\n        children.push(toTextVNode(child));\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    vnodeSelector: selector,\r\n    properties: properties,\r\n    children: children,\r\n    text: text,\r\n    domNode: null\r\n  };\r\n};\r\n\r\n/**\r\n * Contains simple low-level utility functions to manipulate the real DOM.\r\n */\r\nexport let dom = {\r\n\r\n  /**\r\n   * Creates a real DOM tree from `vnode`. The [[Projection]] object returned will contain the resulting DOM Node in\r\n   * its [[Projection.domNode|domNode]] property.\r\n   * This is a low-level method. Users wil typically use a [[Projector]] instead.\r\n   * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\r\n   * objects may only be rendered once.\r\n   * @param projectionOptions - Options to be used to create and update the projection.\r\n   * @returns The [[Projection]] which also contains the DOM Node that was created.\r\n   */\r\n  create: function(vnode: VNode, projectionOptions?: ProjectionOptions): Projection {\r\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n    createDom(vnode, document.createElement('div'), undefined, projectionOptions);\r\n    return createProjection(vnode, projectionOptions);\r\n  },\r\n\r\n  /**\r\n   * Appends a new childnode to the DOM which is generated from a [[VNode]].\r\n   * This is a low-level method. Users wil typically use a [[Projector]] instead.\r\n   * @param parentNode - The parent node for the new childNode.\r\n   * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\r\n   * objects may only be rendered once.\r\n   * @param projectionOptions - Options to be used to create and update the [[Projection]].\r\n   * @returns The [[Projection]] that was created.\r\n   */\r\n  append: function(parentNode: Element, vnode: VNode, projectionOptions?: ProjectionOptions): Projection {\r\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n    createDom(vnode, parentNode, undefined, projectionOptions);\r\n    return createProjection(vnode, projectionOptions);\r\n  },\r\n\r\n  /**\r\n   * Inserts a new DOM node which is generated from a [[VNode]].\r\n   * This is a low-level method. Users wil typically use a [[Projector]] instead.\r\n   * @param beforeNode - The node that the DOM Node is inserted before.\r\n   * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function.\r\n   * NOTE: [[VNode]] objects may only be rendered once.\r\n   * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\r\n   * @returns The [[Projection]] that was created.\r\n   */\r\n  insertBefore: function(beforeNode: Element, vnode: VNode, projectionOptions?: ProjectionOptions): Projection {\r\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n    createDom(vnode, beforeNode.parentNode, beforeNode, projectionOptions);\r\n    return createProjection(vnode, projectionOptions);\r\n  },\r\n\r\n  /**\r\n   * Merges a new DOM node which is generated from a [[VNode]] with an existing DOM Node.\r\n   * This means that the virtual DOM and the real DOM will have one overlapping element.\r\n   * Therefore the selector for the root [[VNode]] will be ignored, but its properties and children will be applied to the Element provided.\r\n   * This is a low-level method. Users wil typically use a [[Projector]] instead.\r\n   * @param domNode - The existing element to adopt as the root of the new virtual DOM. Existing attributes and childnodes are preserved.\r\n   * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]] objects\r\n   * may only be rendered once.\r\n   * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\r\n   * @returns The [[Projection]] that was created.\r\n   */\r\n  merge: function(element: Element, vnode: VNode, projectionOptions?: ProjectionOptions): Projection {\r\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n    vnode.domNode = element;\r\n    initPropertiesAndChildren(element, vnode, projectionOptions);\r\n    return createProjection(vnode, projectionOptions);\r\n  }\r\n\r\n};\r\n\r\n/**\r\n * A CalculationCache object remembers the previous outcome of a calculation along with the inputs.\r\n * On subsequent calls the previous outcome is returned if the inputs are identical.\r\n * This object can be used to bypass both rendering and diffing of a virtual DOM subtree.\r\n * Instances of CalculationCache can be created using [[createCache]].\r\n *\r\n * @param <Result> The type of the value that is cached.\r\n */\r\nexport interface CalculationCache<Result> {\r\n  /**\r\n   * Manually invalidates the cached outcome.\r\n   */\r\n  invalidate(): void;\r\n  /**\r\n   * If the inputs array matches the inputs array from the previous invocation, this method returns the result of the previous invocation.\r\n   * Otherwise, the calculation function is invoked and its result is cached and returned.\r\n   * Objects in the inputs array are compared using ===.\r\n   * @param inputs - Array of objects that are to be compared using === with the inputs from the previous invocation.\r\n   * These objects are assumed to be immutable primitive values.\r\n   * @param calculation - Function that takes zero arguments and returns an object (A [[VNode]] assumably) that can be cached.\r\n   */\r\n  result(inputs: Object[], calculation: () => Result): Result;\r\n}\r\n\r\n/**\r\n * Creates a [[CalculationCache]] object, useful for caching [[VNode]] trees.\r\n * In practice, caching of [[VNode]] trees is not needed, because achieving 60 frames per second is almost never a problem.\r\n * For more information, see [[CalculationCache]].\r\n *\r\n * @param <Result> The type of the value that is cached.\r\n */\r\nexport let createCache = <Result>(): CalculationCache<Result> => {\r\n  let cachedInputs = undefined as Object[];\r\n  let cachedOutcome = undefined as Result;\r\n  let result = {\r\n\r\n    invalidate: function() {\r\n      cachedOutcome = undefined;\r\n      cachedInputs = undefined;\r\n    },\r\n\r\n    result: function(inputs: Object[], calculation: () => Result) {\r\n      if (cachedInputs) {\r\n        for (let i = 0; i < inputs.length; i++) {\r\n          if (cachedInputs[i] !== inputs[i]) {\r\n            cachedOutcome = undefined;\r\n          }\r\n        }\r\n      }\r\n      if (!cachedOutcome) {\r\n        cachedOutcome = calculation();\r\n        cachedInputs = inputs;\r\n      }\r\n      return cachedOutcome;\r\n    }\r\n  };\r\n  return result;\r\n};\r\n\r\n/**\r\n * Keeps an array of result objects synchronized with an array of source objects.\r\n * See {@link http://maquettejs.org/docs/arrays.html|Working with arrays}.\r\n *\r\n * Mapping provides a [[map]] function that updates its [[results]].\r\n * The [[map]] function can be called multiple times and the results will get created, removed and updated accordingly.\r\n * A Mapping can be used to keep an array of components (objects with a `renderMaquette` method) synchronized with an array of data.\r\n * Instances of Mapping can be created using [[createMapping]].\r\n *\r\n * @param <Source>   The type of source elements. Usually the data type.\r\n * @param <Target>   The type of target elements. Usually the component type.\r\n */\r\nexport interface Mapping<Source, Target> {\r\n  /**\r\n   * The array of results. These results will be synchronized with the latest array of sources that were provided using [[map]].\r\n   */\r\n  results: Array<Target>;\r\n  /**\r\n   * Maps a new array of sources and updates [[results]].\r\n   *\r\n   * @param newSources   The new array of sources.\r\n   */\r\n  map(newSources: Array<Source>): void;\r\n}\r\n\r\n/**\r\n * Creates a {@link Mapping} instance that keeps an array of result objects synchronized with an array of source objects.\r\n * See {@link http://maquettejs.org/docs/arrays.html|Working with arrays}.\r\n *\r\n * @param <Source>       The type of source items. A database-record for instance.\r\n * @param <Target>       The type of target items. A [[Component]] for instance.\r\n * @param getSourceKey   `function(source)` that must return a key to identify each source object. The result must either be a string or a number.\r\n * @param createResult   `function(source, index)` that must create a new result object from a given source. This function is identical\r\n *                       to the `callback` argument in `Array.map(callback)`.\r\n * @param updateResult   `function(source, target, index)` that updates a result to an updated source.\r\n */\r\nexport let createMapping = <Source, Target>(\r\n  getSourceKey: (source: Source) => (string | number),\r\n  createResult: (source: Source, index: number) => Target,\r\n  updateResult: (source: Source, target: Target, index: number) => void): Mapping<Source, Target> => {\r\n  let keys = [] as Object[];\r\n  let results = [] as Target[];\r\n\r\n  return {\r\n    results: results,\r\n    map: function(newSources: Source[]) {\r\n      let newKeys = newSources.map(getSourceKey);\r\n      let oldTargets = results.slice();\r\n      let oldIndex = 0;\r\n      for (let i = 0; i < newSources.length; i++) {\r\n        let source = newSources[i];\r\n        let sourceKey = newKeys[i];\r\n        if (sourceKey === keys[oldIndex]) {\r\n          results[i] = oldTargets[oldIndex];\r\n          updateResult(source, oldTargets[oldIndex], i);\r\n          oldIndex++;\r\n        } else {\r\n          let found = false;\r\n          for (let j = 1; j < keys.length; j++) {\r\n            let searchIndex = (oldIndex + j) % keys.length;\r\n            if (keys[searchIndex] === sourceKey) {\r\n              results[i] = oldTargets[searchIndex];\r\n              updateResult(newSources[i], oldTargets[searchIndex], i);\r\n              oldIndex = searchIndex + 1;\r\n              found = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!found) {\r\n            results[i] = createResult(source, i);\r\n          }\r\n        }\r\n      }\r\n      results.length = newSources.length;\r\n      keys = newKeys;\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Creates a [[Projector]] instance using the provided projectionOptions.\r\n *\r\n * For more information, see [[Projector]].\r\n *\r\n * @param projectionOptions   Options that influence how the DOM is rendered and updated.\r\n */\r\nexport let createProjector = function(projectionOptions: ProjectionOptions): Projector {\r\n  let projector: Projector;\r\n  projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n  let originalEventHandlerInterceptor = projectionOptions.eventHandlerInterceptor;\r\n  projectionOptions.eventHandlerInterceptor = function(propertyName: string, eventHandler: Function, domNode: Node, properties: VNodeProperties) {\r\n    let scheduleRenderAndInvokeEventHandler = function() {\r\n      // intercept function calls (event handlers) to do a render afterwards.\r\n      projector.scheduleRender();\r\n      return eventHandler.apply(properties.bind || this, arguments);\r\n    };\r\n    if (originalEventHandlerInterceptor) {\r\n      return originalEventHandlerInterceptor(propertyName, scheduleRenderAndInvokeEventHandler, domNode, properties);\r\n    } else {\r\n      return scheduleRenderAndInvokeEventHandler;\r\n    }\r\n  };\r\n  let renderCompleted = true;\r\n  let scheduled: number;\r\n  let stopped = false;\r\n  let projections = [] as Projection[];\r\n  let renderFunctions = [] as (() => VNode)[]; // matches the projections array\r\n\r\n  let doRender = function() {\r\n    scheduled = undefined;\r\n    if (!renderCompleted) {\r\n      return; // The last render threw an error, it should be logged in the browser console.\r\n    }\r\n    renderCompleted = false;\r\n    for (let i = 0; i < projections.length; i++) {\r\n      let updatedVnode = renderFunctions[i]();\r\n      projections[i].update(updatedVnode);\r\n    }\r\n    renderCompleted = true;\r\n  };\r\n\r\n  projector = {\r\n    scheduleRender: function() {\r\n      if (!scheduled && !stopped) {\r\n        scheduled = requestAnimationFrame(doRender);\r\n      }\r\n    },\r\n    stop: function() {\r\n      if (scheduled) {\r\n        cancelAnimationFrame(scheduled);\r\n        scheduled = undefined;\r\n      }\r\n      stopped = true;\r\n    },\r\n\r\n    resume: function() {\r\n      stopped = false;\r\n      renderCompleted = true;\r\n      projector.scheduleRender();\r\n    },\r\n\r\n    append: function(parentNode, renderMaquetteFunction) {\r\n      projections.push(dom.append(parentNode, renderMaquetteFunction(), projectionOptions));\r\n      renderFunctions.push(renderMaquetteFunction);\r\n    },\r\n\r\n    insertBefore: function(beforeNode, renderMaquetteFunction) {\r\n      projections.push(dom.insertBefore(beforeNode, renderMaquetteFunction(), projectionOptions));\r\n      renderFunctions.push(renderMaquetteFunction);\r\n    },\r\n\r\n    merge: function(domNode, renderMaquetteFunction) {\r\n      projections.push(dom.merge(domNode, renderMaquetteFunction(), projectionOptions));\r\n      renderFunctions.push(renderMaquetteFunction);\r\n    },\r\n\r\n    replace: function(domNode, renderMaquetteFunction) {\r\n      let vnode = renderMaquetteFunction();\r\n      createDom(vnode, domNode.parentNode, domNode, projectionOptions);\r\n      domNode.parentNode.removeChild(domNode);\r\n      projections.push(createProjection(vnode, projectionOptions));\r\n      renderFunctions.push(renderMaquetteFunction);\r\n    }\r\n  };\r\n  return projector;\r\n};\r\n\r\n/**\r\n * A component is a pattern with which you can split up your web application into self-contained parts.\r\n *\r\n * A component may contain other components.\r\n * This can be achieved by calling the subcomponents `renderMaquette` functions during the [[renderMaquette]] function and by using the\r\n * resulting [[VNode]]s in the return value.\r\n *\r\n * This interface is not used anywhere in the maquette sourcecode, but this is a widely used pattern.\r\n */\r\nexport interface Component {\r\n  /**\r\n   * A function that returns the DOM representation of the component.\r\n   */\r\n  renderMaquette(): VNode;\r\n}\r\n"],"sourceRoot":"/source/"}