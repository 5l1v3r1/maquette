{"version":3,"sources":["/source/maquette.ts"],"names":["emptyArray","extend","base","overrides","result","Object","keys","forEach","key","toTextVNode","data","vnodeSelector","properties","undefined","children","text","toString","domNode","appendChildren","parentSelector","insertions","main","i","length","item","Array","isArray","hasOwnProperty","push","missingTransition","Error","defaultProjectionOptions","namespace","eventHandlerInterceptor","styleApplyer","styleName","value","style","transitions","enter","exit","applyDefaultProjectionOptions","projectionOptions","setProperties","propName","propValue","className","classList","add","styleValue","type","lastIndexOf","oldPropValue","evt","target","apply","setAttribute","updateProperties","previousProperties","propertiesUpdated","previousValue","on","previousOn","remove","newStyleValue","oldStyleValue","addChildren","createDom","same","vnode1","vnode2","findIndexOfChild","sameAs","start","nodeAdded","vNode","enterAnimation","nodeToRemove","exitAnimation","pointerEvents","removeDomNode","parentNode","removeChild","checkDistinguishable","childNodes","indexToCheck","parentVNode","operation","childNode","node","updateChildren","vnode","oldChildren","newChildren","oldChildrenLength","newChildrenLength","oldIndex","newIndex","textUpdated","oldChild","newChild","updateDom","findOldIndex","insertBefore","c","found","document","createTextNode","appendChild","charAt","slice","id","createElementNS","createElement","initPropertiesAndChildren","textContent","afterCreate","previous","updated","nodeValue","firstChild","afterUpdate","updateAnimation","createProjection","update","updatedVnode","exports","h","selector","arguments","childIndex","argsLength","onlyChild","child","dom","create","append","beforeNode","merge","element","options","createCache","cachedInputs","cachedOutcome","invalidate","inputs","calculation","createMapping","getSourceKey","createResult","updateResult","results","map","newSources","newKeys","oldTargets","source","sourceKey","j","searchIndex","createProjector","propertyName","functionPropertyArgument","projector","scheduleRender","renderCompleted","scheduled","stopped","projections","renderFunctions","doRender","requestAnimationFrame","stop","cancelAnimationFrame","resume","renderMaquetteFunction","replace"],"mappings":"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","file":"maquette.js","sourcesContent":["// Utilities\r\n\r\nlet emptyArray = [];\r\n\r\nlet extend = function (base, overrides) {\r\n  let result = {};\r\n  Object.keys(base).forEach(function (key) {\r\n    result[key] = base[key];\r\n  });\r\n  if(overrides) {\r\n    Object.keys(overrides).forEach(function (key) {\r\n      result[key] = overrides[key];\r\n    });\r\n  }\r\n  return result;\r\n};\r\n\r\n// Hyperscript helper functions\r\n\r\nlet toTextVNode = function (data) {\r\n  return {\r\n    vnodeSelector: \"\",\r\n    properties: undefined,\r\n    children: undefined,\r\n    text: (data === null || data === undefined) ? \"\" : data.toString(),\r\n    domNode: null\r\n  };\r\n};\r\n\r\nlet appendChildren = function (parentSelector, insertions, main) {\r\n  for(let i = 0; i < insertions.length; i++) {\r\n    let item = insertions[i];\r\n    if(Array.isArray(item)) {\r\n      appendChildren(parentSelector, item, main);\r\n    } else {\r\n      if(item !== null && item !== undefined) {\r\n        if(!item.hasOwnProperty(\"vnodeSelector\")) {\r\n          item = toTextVNode(item);\r\n        }\r\n        main.push(item);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Render helper functions\r\n\r\nlet missingTransition = function() {\r\n  throw new Error(\"Provide a transitions object to the projectionOptions to do animations\");\r\n};\r\n\r\nlet defaultProjectionOptions = {\r\n  namespace: undefined,\r\n  eventHandlerInterceptor: undefined,\r\n  styleApplyer: function(domNode, styleName, value) {\r\n    // Provides a hook to add vendor prefixes for browsers that still need it.\r\n    domNode.style[styleName] = value;\r\n  },\r\n  transitions: {\r\n    enter: missingTransition,\r\n    exit: missingTransition\r\n  }\r\n};\r\n\r\nlet applyDefaultProjectionOptions = function (projectionOptions) {\r\n  return extend(defaultProjectionOptions, projectionOptions);\r\n};\r\n\r\nlet setProperties = function (domNode, properties, projectionOptions) {\r\n  if(!properties) {\r\n    return;\r\n  }\r\n  let eventHandlerInterceptor = projectionOptions.eventHandlerInterceptor;\r\n  for(let propName in properties) {\r\n    var propValue = properties[propName];\r\n    if(propName === \"class\" || propName === \"className\" || propName === \"classList\") {\r\n      throw new Error(\"Property \" + propName + \" is not supported, use 'classes' instead.\");\r\n    } else if(propName === \"classes\") {\r\n      // object with string keys and boolean values\r\n      for(let className in propValue) {\r\n        if(propValue[className]) {\r\n          domNode.classList.add(className);\r\n        }\r\n      }\r\n    } else if(propName === \"styles\") {\r\n      // object with string keys and string (!) values\r\n      for(let styleName in propValue) {\r\n        let styleValue = propValue[styleName];\r\n        if(styleValue) {\r\n          if(typeof styleValue !== \"string\") {\r\n            throw new Error(\"Style values may only be strings\");\r\n          }\r\n          projectionOptions.styleApplyer(domNode, styleName, styleValue);\r\n        }\r\n      }\r\n    } else if(propName === \"key\") {\r\n      continue;\r\n    } else if(propValue === null || propValue === undefined) {\r\n      continue;\r\n    } else {\r\n      let type = typeof propValue;\r\n      if(type === \"function\") {\r\n        if(eventHandlerInterceptor && (propName.lastIndexOf(\"on\", 0) === 0)) { // lastIndexOf(,0)===0 -> startsWith\r\n          propValue = eventHandlerInterceptor(propName, propValue, domNode, properties); // intercept eventhandlers\r\n          if(propName === \"oninput\") {\r\n            (function () {\r\n              // record the evt.target.value, because IE sometimes does a requestAnimationFrame between changing value and running oninput\r\n              let oldPropValue = propValue;\r\n              propValue = function (evt) {\r\n                evt.target[\"oninput-value\"] = evt.target.value;\r\n                oldPropValue.apply(this, [evt]);\r\n              };\r\n            }());\r\n          }\r\n        }\r\n        domNode[propName] = propValue;\r\n      } else if(type === \"string\" && propName !== \"value\") {\r\n        domNode.setAttribute(propName, propValue);\r\n      } else {\r\n        domNode[propName] = propValue;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nlet updateProperties = function (domNode, previousProperties, properties, projectionOptions) {\r\n  if(!properties) {\r\n    return;\r\n  }\r\n  let propertiesUpdated = false;\r\n  for(let propName in properties) {\r\n    // assuming that properties will be nullified instead of missing is by design\r\n    let propValue = properties[propName];\r\n    let previousValue = previousProperties[propName];\r\n    if(propName === \"classes\") {\r\n      let classList = domNode.classList;\r\n      for(let className in propValue) {\r\n        let on = !!propValue[className];\r\n        let previousOn = !!previousValue[className];\r\n        if(on === previousOn) {\r\n          continue;\r\n        }\r\n        propertiesUpdated = true;\r\n        if(on) {\r\n          classList.add(className);\r\n        } else {\r\n          classList.remove(className);\r\n        }\r\n      }\r\n    } else if(propName === \"styles\") {\r\n      for(let styleName in propValue) {\r\n        let newStyleValue = propValue[styleName];\r\n        let oldStyleValue = previousValue[styleName];\r\n        if(newStyleValue === oldStyleValue) {\r\n          continue;\r\n        }\r\n        propertiesUpdated = true;\r\n        if(newStyleValue) {\r\n          if(typeof newStyleValue !== \"string\") {\r\n            throw new Error(\"Style values may only be strings\");\r\n          }\r\n          projectionOptions.styleApplyer(domNode, styleName, newStyleValue);\r\n        } else {\r\n          projectionOptions.styleApplyer(domNode, styleName, \"\");\r\n        }\r\n      }\r\n    } else {\r\n      if(!propValue && typeof previousValue === \"string\") {\r\n        propValue = \"\";\r\n      }\r\n      if(propName === \"value\") { // value can be manipulated by the user directly and using event.preventDefault() is not an option\r\n        if(domNode[propName] !== propValue && domNode[\"oninput-value\"] !== propValue) {\r\n          domNode[propName] = propValue; // Reset the value, even if the virtual DOM did not change\r\n          domNode[\"oninput-value\"] = undefined;\r\n        } // else do not update the domNode, otherwise the cursor position would be changed\r\n        if(propValue !== previousValue) {\r\n          propertiesUpdated = true;\r\n        }\r\n      } else if(propValue !== previousValue) {\r\n        let type = typeof propValue;\r\n        if(type === \"function\") {\r\n          throw new Error(\"Functions may not be updated on subsequent renders (property: \" + propName +\r\n            \"). Hint: declare event handler functions outside the render() function.\");\r\n        }\r\n        if(type === \"string\") {\r\n          domNode.setAttribute(propName, propValue);\r\n        } else {\r\n          if(domNode[propName] !== propValue) { // Comparison is here for side-effects in Edge with scrollLeft and scrollTop\r\n            domNode[propName] = propValue;\r\n          }\r\n        }\r\n        propertiesUpdated = true;\r\n      }\r\n    }\r\n  }\r\n  return propertiesUpdated;\r\n};\r\n\r\nlet addChildren = function (domNode, children, projectionOptions) {\r\n  if(!children) {\r\n    return;\r\n  }\r\n  for(let i = 0; i < children.length; i++) {\r\n    createDom(children[i], domNode, undefined, projectionOptions);\r\n  }\r\n};\r\n\r\nlet same = function (vnode1, vnode2) {\r\n  if(vnode1.vnodeSelector !== vnode2.vnodeSelector) {\r\n    return false;\r\n  }\r\n  if(vnode1.properties && vnode2.properties) {\r\n    return vnode1.properties.key === vnode2.properties.key;\r\n  }\r\n  return !vnode1.properties && !vnode2.properties;\r\n};\r\n\r\nlet findIndexOfChild = function (children, sameAs, start) {\r\n  if(sameAs.vnodeSelector !== \"\") {\r\n    // Never scan for text-nodes\r\n    for(let i = start; i < children.length; i++) {\r\n      if(same(children[i], sameAs)) {\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n  return -1;\r\n};\r\n\r\nlet nodeAdded = function (vNode, transitions) {\r\n  if(vNode.properties) {\r\n    let enterAnimation = vNode.properties.enterAnimation;\r\n    if(enterAnimation) {\r\n      if(typeof enterAnimation === \"function\") {\r\n        enterAnimation(vNode.domNode, vNode.properties);\r\n      } else {\r\n        transitions.enter(vNode.domNode, vNode.properties, enterAnimation);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nlet nodeToRemove = function (vNode, transitions) {\r\n  let domNode = vNode.domNode;\r\n  if(vNode.properties) {\r\n    let exitAnimation = vNode.properties.exitAnimation;\r\n    if(exitAnimation) {\r\n      domNode.style.pointerEvents = \"none\";\r\n      let removeDomNode = function () {\r\n        if(domNode.parentNode) {\r\n          domNode.parentNode.removeChild(domNode);\r\n        }\r\n      };\r\n      if(typeof exitAnimation === \"function\") {\r\n        exitAnimation(domNode, removeDomNode, vNode.properties);\r\n        return;\r\n      } else {\r\n        transitions.exit(vNode.domNode, vNode.properties, exitAnimation, removeDomNode);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  if(domNode.parentNode) {\r\n    domNode.parentNode.removeChild(domNode);\r\n  }\r\n};\r\n\r\nlet checkDistinguishable = function(childNodes, indexToCheck, parentVNode, operation) {\r\n  let childNode = childNodes[indexToCheck];\r\n  if (childNode.vnodeSelector === \"\") {\r\n    return; // Text nodes need not be distinguishable\r\n  }\r\n  let key = childNode.properties ? childNode.properties.key : undefined;\r\n  if (!key) { // A key is just assumed to be unique\r\n    for (let i = 0; i < childNodes.length; i++) {\r\n      if (i !== indexToCheck) {\r\n        let node = childNodes[i];\r\n        if (same(node, childNode)) {\r\n          if (operation === \"added\") {\r\n            throw new Error(parentVNode.vnodeSelector + \" had a \" + childNode.vnodeSelector + \" child \" +\r\n              \"added, but there is now more than one. You must add unique key properties to make them distinguishable.\");\r\n          } else {\r\n            throw new Error(parentVNode.vnodeSelector + \" had a \" + childNode.vnodeSelector + \" child \" +\r\n              \"removed, but there were more than one. You must add unique key properties to make them distinguishable.\");\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nlet updateChildren = function (vnode, domNode, oldChildren, newChildren, projectionOptions) {\r\n  if(oldChildren === newChildren) {\r\n    return false;\r\n  }\r\n  oldChildren = oldChildren || emptyArray;\r\n  newChildren = newChildren || emptyArray;\r\n  let oldChildrenLength = oldChildren.length;\r\n  let newChildrenLength = newChildren.length;\r\n  let transitions = projectionOptions.transitions;\r\n\r\n  let oldIndex = 0;\r\n  let newIndex = 0;\r\n  let i;\r\n  let textUpdated = false;\r\n  while(newIndex < newChildrenLength) {\r\n    let oldChild = (oldIndex < oldChildrenLength) ? oldChildren[oldIndex] : undefined;\r\n    let newChild = newChildren[newIndex];\r\n    if(oldChild !== undefined && same(oldChild, newChild)) {\r\n      textUpdated = updateDom(oldChild, newChild, projectionOptions) || textUpdated;\r\n      oldIndex++;\r\n    } else {\r\n      let findOldIndex = findIndexOfChild(oldChildren, newChild, oldIndex + 1);\r\n      if(findOldIndex >= 0) {\r\n        // Remove preceding missing children\r\n        for(i = oldIndex; i < findOldIndex; i++) {\r\n          nodeToRemove(oldChildren[i], transitions);\r\n          checkDistinguishable(oldChildren, i, vnode, \"removed\");\r\n        }\r\n        textUpdated = updateDom(oldChildren[findOldIndex], newChild, projectionOptions) || textUpdated;\r\n        oldIndex = findOldIndex + 1;\r\n      } else {\r\n        // New child\r\n        createDom(newChild, domNode, (oldIndex < oldChildrenLength) ? oldChildren[oldIndex].domNode : undefined, projectionOptions);\r\n        nodeAdded(newChild, transitions);\r\n        checkDistinguishable(newChildren, newIndex, vnode, \"added\");\r\n      }\r\n    }\r\n    newIndex++;\r\n  }\r\n  if(oldChildrenLength > oldIndex) {\r\n    // Remove child fragments\r\n    for(i = oldIndex; i < oldChildrenLength; i++) {\r\n      nodeToRemove(oldChildren[i], transitions);\r\n      checkDistinguishable(oldChildren, i, vnode, \"removed\");\r\n    }\r\n  }\r\n  return textUpdated;\r\n};\r\n\r\nvar createDom = function (vnode, parentNode, insertBefore, projectionOptions) {\r\n  let domNode, i, c, start = 0, type, found;\r\n  let vnodeSelector = vnode.vnodeSelector;\r\n  if(vnodeSelector === \"\") {\r\n    domNode = vnode.domNode = document.createTextNode(vnode.text);\r\n    if(insertBefore !== undefined) {\r\n      parentNode.insertBefore(domNode, insertBefore);\r\n    } else {\r\n      parentNode.appendChild(domNode);\r\n    }\r\n  } else {\r\n    for (i = 0; i <= vnodeSelector.length; ++i) {\r\n      c = vnodeSelector.charAt(i);\r\n      if (i === vnodeSelector.length || c === '.' || c === '#') {\r\n        type = vnodeSelector.charAt(start - 1);\r\n        found = vnodeSelector.slice(start, i);\r\n        if (type === \".\") {\r\n          domNode.classList.add(found);\r\n        } else if (type === \"#\") {\r\n          domNode.id = found;\r\n        } else {\r\n          if (found === \"svg\") {\r\n            projectionOptions = extend(projectionOptions, { namespace: \"http://www.w3.org/2000/svg\" });\r\n          }\r\n          if (projectionOptions.namespace !== undefined) {\r\n            domNode = vnode.domNode = document.createElementNS(projectionOptions.namespace, found);\r\n          } else {\r\n            domNode = vnode.domNode = document.createElement(found);\r\n          }\r\n          if (insertBefore !== undefined) {\r\n            parentNode.insertBefore(domNode, insertBefore);\r\n          } else {\r\n            parentNode.appendChild(domNode);\r\n          }\r\n        }\r\n        start = i + 1;\r\n      }\r\n    }\r\n    initPropertiesAndChildren(domNode, vnode, projectionOptions);\r\n  }\r\n};\r\n\r\nvar initPropertiesAndChildren = function (domNode, vnode, projectionOptions) {\r\n  addChildren(domNode, vnode.children, projectionOptions); // children before properties, needed for value property of <select>.\r\n  if(vnode.text) {\r\n    domNode.textContent = vnode.text;\r\n  }\r\n  setProperties(domNode, vnode.properties, projectionOptions);\r\n  if(vnode.properties && vnode.properties.afterCreate) {\r\n    vnode.properties.afterCreate(domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children);\r\n  }\r\n};\r\n\r\nvar updateDom = function (previous, vnode, projectionOptions) {\r\n  let domNode = previous.domNode;\r\n  if(!domNode) {\r\n    throw new Error(\"previous node was not rendered\");\r\n  }\r\n  let textUpdated = false;\r\n  if(previous === vnode) {\r\n    return textUpdated; // we assume that nothing has changed\r\n  }\r\n  let updated = false;\r\n  if(vnode.vnodeSelector === \"\") {\r\n    if(vnode.text !== previous.text) {\r\n      domNode.nodeValue = vnode.text;\r\n      textUpdated = true;\r\n    }\r\n  } else {\r\n    if(vnode.vnodeSelector.lastIndexOf(\"svg\", 0) === 0) { // lastIndexOf(needle,0)===0 means StartsWith\r\n      projectionOptions = extend(projectionOptions, { namespace: \"http://www.w3.org/2000/svg\" });\r\n    }\r\n    if(previous.text !== vnode.text) {\r\n      updated = true;\r\n      if(vnode.text === undefined) {\r\n        domNode.removeChild(domNode.firstChild); // the only textnode presumably\r\n      } else {\r\n        domNode.textContent = vnode.text;\r\n      }\r\n    }\r\n    updated = updateChildren(vnode, domNode, previous.children, vnode.children, projectionOptions) || updated;\r\n    updated = updateProperties(domNode, previous.properties, vnode.properties, projectionOptions) || updated;\r\n    if(vnode.properties && vnode.properties.afterUpdate) {\r\n      vnode.properties.afterUpdate(domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children);\r\n    }\r\n  }\r\n  if(updated && vnode.properties && vnode.properties.updateAnimation) {\r\n    vnode.properties.updateAnimation(domNode, vnode.properties, previous.properties);\r\n  }\r\n  vnode.domNode = previous.domNode;\r\n  return textUpdated;\r\n};\r\n\r\n/**\r\n * Represents a {@link VNode} tree that has been rendered to a real DOM tree.\r\n * @interface Projection\r\n */\r\nlet createProjection = function (vnode, projectionOptions) {\r\n  if(!vnode.vnodeSelector) {\r\n    throw new Error(\"Invalid vnode argument\");\r\n  }\r\n  return {\r\n    /**\r\n     * Updates the projection with the new virtual DOM tree.\r\n     * @param {VNode} updatedVnode - The updated virtual DOM tree. Note: The selector for the root of the tree must remain constant. \r\n     * @memberof Projection#\r\n     */\r\n    update: function (updatedVnode) {\r\n      if(vnode.vnodeSelector !== updatedVnode.vnodeSelector) {\r\n        throw new Error(\"The selector for the root VNode may not be changed. (consider using dom.merge and add one extra level to the virtual DOM)\");\r\n      }\r\n      updateDom(vnode, updatedVnode, projectionOptions);\r\n      vnode = updatedVnode;\r\n    },\r\n    /**\r\n     * The DOM node that is used as the root of this {@link Projection}.\r\n     * @type {Element}\r\n     * @memberof Projection#\r\n     */\r\n    domNode: vnode.domNode\r\n  };\r\n};\r\n\r\n// Declaration of interfaces and callbacks, before the @exports maquette\r\n\r\n/**\r\n * A virtual representation of a DOM Node. Maquette assumes that {@link VNode} objects are never modified externally.\r\n * Instances of {@link VNode} can be created using {@link module:maquette.h}.\r\n * @interface VNode\r\n */\r\n\r\n/**\r\n * A CalculationCache object remembers the previous outcome of a calculation along with the inputs. \r\n * On subsequent calls the previous outcome is returned if the inputs are identical. \r\n * This object can be used to bypass both rendering and diffing of a virtual DOM subtree.\r\n * Instances of {@link CalculationCache} can be created using {@link module:maquette.createCache}.\r\n * @interface CalculationCache\r\n */\r\n\r\n/**\r\n * Keeps an array of result objects synchronized with an array of source objects.\r\n * Mapping provides a {@link Mapping#map} function that updates the {@link Mapping#results}. \r\n * The {@link Mapping#map} function can be called multiple times and the results will get created, removed and updated accordingly.\r\n * A {@link Mapping} can be used to keep an array of components (objects with a `renderMaquette` method) synchronized with an array of data.\r\n * Instances of {@link Mapping} can be created using {@link module:maquette.createMapping}.\r\n * @interface Mapping\r\n */\r\n\r\n/**\r\n * Used to create and update the DOM.\r\n * Use {@link Projector#append}, {@link Projector#merge}, {@link Projector#insertBefore} and {@link Projector#replace} \r\n * to create the DOM.\r\n * The `renderMaquetteFunction` callbacks will be called immediately to create the DOM. Afterwards, these functions \r\n * will be called again to update the DOM on the next animation-frame after:\r\n * \r\n *  - The {@link Projector#scheduleRender} function  was called\r\n *  - An event handler (like `onclick`) on a rendered {@link VNode} was called.\r\n * \r\n * The projector stops when {@link Projector#stop} is called or when an error is thrown during rendering. \r\n * It is possible to use `window.onerror` to handle these errors.\r\n * Instances of {@link Projector} can be created using {@link module:maquette.createProjector}.\r\n * @interface Projector\r\n */\r\n\r\n/**\r\n * @callback enterAnimationCallback\r\n * @param {Element} element - Element that was just added to the DOM.\r\n * @param {Object} properties - The properties object that was supplied to the {@link module:maquette.h} method\r\n */\r\n\r\n/**\r\n * @callback exitAnimationCallback\r\n * @param {Element} element - Element that ought to be removed from to the DOM.\r\n * @param {function(Element)} removeElement - Function that removes the element from the DOM. \r\n * This argument is supplied purely for convenience. \r\n * You may use this function to remove the element when the animation is done.\r\n * @param {Object} properties - The properties object that was supplied to the {@link module:maquette.h} method that rendered this {@link VNode} the previous time.\r\n */\r\n\r\n/**\r\n * @callback updateAnimationCallback\r\n * @param {Element} element - Element that was modified in the DOM.\r\n * @param {Object} properties - The last properties object that was supplied to the {@link module:maquette.h} method\r\n * @param {Object} previousProperties - The previous properties object that was supplied to the {@link module:maquette.h} method\r\n */\r\n  \r\n/**\r\n * @callback afterCreateCallback\r\n * @param {Element} element - The element that was added to the DOM.\r\n * @param {Object} projectionOptions - The projection options that were used see {@link module:maquette.createProjector}.\r\n * @param {string} vnodeSelector - The selector passed to the {@link module:maquette.h} function.\r\n * @param {Object} properties - The properties passed to the {@link module:maquette.h} function.\r\n * @param {VNode[]} children - The children that were created.\r\n * @param {Object} properties - The last properties object that was supplied to the {@link module:maquette.h} method\r\n * @param {Object} previousProperties - The previous properties object that was supplied to the {@link module:maquette.h} method\r\n */\r\n\r\n/**\r\n * @callback afterUpdateCallback\r\n * @param {Element} element - The element that may have been updated in the DOM.\r\n * @param {Object} projectionOptions - The projection options that were used see {@link module:maquette.createProjector}.\r\n * @param {string} vnodeSelector - The selector passed to the {@link module:maquette.h} function.\r\n * @param {Object} properties - The properties passed to the {@link module:maquette.h} function.\r\n * @param {VNode[]} children - The children for this node.\r\n */\r\n  \r\n/**\r\n * Contains simple low-level utility functions to manipulate the real DOM. The singleton instance is available under {@link module:maquette.dom}.\r\n * @interface MaquetteDom\r\n */\r\n  \r\n/**\r\n * The `h` method is used to create a virtual DOM node. \r\n * This function is largely inspired by the mercuryjs and mithril frameworks.\r\n * The `h` stands for (virtual) hyperscript.\r\n * \r\n * @param {string} selector - Contains the tagName, id and fixed css classnames in CSS selector format. \r\n * It is formatted as follows: `tagname.cssclass1.cssclass2#id`. \r\n * @param {Object} [properties] - An object literal containing properties that will be placed on the DOM node.\r\n * @param {function} properties.<b>*</b> - Properties with functions values like `onclick:handleClick` are registered as event handlers\r\n * @param {String} properties.<b>*</b> - Properties with string values, like `href:\"/\"` are used as attributes\r\n * @param {object} properties.<b>*</b> - All non-string values are put on the DOM node as properties\r\n * @param {Object} properties.key - Used to uniquely identify a DOM node among siblings. \r\n * A key is required when there are more children with the same selector and these children are added or removed dynamically.\r\n * @param {Object} properties.classes - An object literal like `{important:true}` which allows css classes, like `important` to be added and removed dynamically.\r\n * @param {Object} properties.styles - An object literal like `{height:\"100px\"}` which allows styles to be changed dynamically. All values must be strings.\r\n * @param {(string|enterAnimationCallback)} properties.enterAnimation - The animation to perform when this node is added to an already existing parent. \r\n * {@link http://maquettejs.org/docs/animations.html|More about animations}.\r\n * When this value is a string, you must pass a `projectionOptions.transitions` object when creating the projector {@link module:maquette.createProjector}. \r\n * @param {(string|exitAnimationCallback)} properties.exitAnimation - The animation to perform when this node is removed while its parent remains.\r\n * When this value is a string, you must pass a `projectionOptions.transitions` object when creating the projector {@link module:maquette.createProjector}. \r\n * {@link http://maquettejs.org/docs/animations.html|More about animations}.\r\n * @param {updateAnimationCallback} properties.updateAnimation - The animation to perform when the properties of this node change. \r\n * This also includes attributes, styles, css classes. This callback is also invoked when node contains only text and that text changes.\r\n * {@link http://maquettejs.org/docs/animations.html|More about animations}.\r\n * @param {afterCreateCallback} properties.afterCreate - Callback that is executed after this node is added to the DOM. Childnodes and properties have already been applied.\r\n * @param {afterUpdateCallback} properties.afterUpdate - Callback that is executed every time this node may have been updated. Childnodes and properties have already been updated. \r\n * @param {Object[]} [children] - An array of virtual DOM nodes to add as child nodes. \r\n * This array may contain nested arrays, `null` or `undefined` values.\r\n * Nested arrays are flattened, `null` and `undefined` will be skipped.\r\n * \r\n * @returns {VNode} A VNode object, used to render a real DOM later. \r\n * NOTE: There are {@link http://maquettejs.org/docs/rules.html|three basic rules} you should be aware of when updating the virtual DOM.\r\n */\r\nexport let h = function (selector /*, ...propertiesAndChildren */) {\r\n  let properties = arguments[1];\r\n  if (typeof selector !== \"string\") {\r\n    throw new Error();\r\n  }\r\n  let childIndex = 1;\r\n  if (properties && !properties.hasOwnProperty(\"vnodeSelector\") && !Array.isArray(properties) && typeof properties === \"object\") {\r\n    childIndex = 2;\r\n  } else {\r\n    // Optional properties argument was omitted\r\n    properties = undefined;\r\n  }\r\n  let text = undefined;\r\n  let children = undefined;\r\n  let argsLength = arguments.length;\r\n  // Recognize a common special case where there is only a single text node\r\n  if(argsLength === childIndex + 1) {\r\n    let onlyChild = arguments[childIndex];\r\n    if (typeof onlyChild === \"string\") {\r\n      text = onlyChild;\r\n    } else if (onlyChild !== undefined && onlyChild.length === 1 && typeof onlyChild[0] === \"string\") {\r\n      text = onlyChild[0];\r\n    }\r\n  } \r\n  if (text === undefined) {\r\n    children = [];\r\n    for (;childIndex<arguments.length;childIndex++) {\r\n      let child = arguments[childIndex];\r\n      if(child === null || child === undefined) {\r\n        continue;\r\n      } else if(Array.isArray(child)) {\r\n        appendChildren(selector, child, children);\r\n      } else if(child.hasOwnProperty(\"vnodeSelector\")) {\r\n        children.push(child);\r\n      } else {\r\n        children.push(toTextVNode(child));\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    /** \r\n     * The CSS selector containing tagname, css classnames and id. An empty string is used to denote a text node. \r\n     * @memberof VNode# \r\n     */\r\n    vnodeSelector: selector,\r\n    /** \r\n     * Object containing attributes, properties, event handlers and more @see module:maquette.h \r\n     * @memberof VNode# \r\n     */\r\n    properties: properties,\r\n    /** \r\n     * Array of VNodes to be used as children. This array is already flattened. \r\n     * @memberof VNode# \r\n     */\r\n    children: children,\r\n    /**\r\n     * Used in a special case when a VNode only has one childnode which is a textnode. Only used in combination with children === undefined.\r\n     * @memberof VNode# \r\n     */\r\n    text: text,\r\n    /**\r\n     * Used by maquette to store the domNode that was produced from this {@link VNode}.\r\n     * @memberof VNode# \r\n     */\r\n    domNode: null\r\n  };\r\n};\r\n  \r\n/**\r\n * @type MaquetteDom\r\n */\r\nexport let dom = {\r\n  /**\r\n   * Creates a real DOM tree from a {@link VNode}. The {@link Projection} object returned will contain the resulting DOM Node under the {@link Projection#domNode} property. \r\n   * This is a low-level method. Users wil typically use a {@link Projector} instead. \r\n   * @memberof MaquetteDom#\r\n   * @param {VNode} vnode - The root of the virtual DOM tree that was created using the {@link module:maquette.h} function. NOTE: {@link VNode} objects may only be rendered once.\r\n   * @param {Object} projectionOptions - Options to be used to create and update the projection, see {@link module:maquette.createProjector}. \r\n   * @returns {Projection} The {@link Projection} which contains the DOM Node that was created.\r\n   */\r\n  create: function (vnode, projectionOptions) {\r\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n    createDom(vnode, document.createElement(\"div\"), undefined, projectionOptions);\r\n    return createProjection(vnode, projectionOptions);\r\n  },\r\n\r\n  /**\r\n   * Appends a new childnode to the DOM which is generated from a {@link VNode}. \r\n   * This is a low-level method. Users wil typically use a {@link Projector} instead. \r\n   * @memberof MaquetteDom#\r\n   * @param {Element} parentNode - The parent node for the new childNode.\r\n   * @param {VNode} vnode - The root of the virtual DOM tree that was created using the {@link module:maquette.h} function. NOTE: {@link VNode} objects may only be rendered once.\r\n   * @param {Object} projectionOptions - Options to be used to create and update the projection, see {@link module:maquette.createProjector}. \r\n   * @returns {Projection} The {@link Projection} that was created.\r\n   */\r\n  append: function (parentNode, vnode, projectionOptions) {\r\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n    createDom(vnode, parentNode, undefined, projectionOptions);\r\n    return createProjection(vnode, projectionOptions);\r\n  },\r\n  \r\n  /**\r\n   * Inserts a new DOM node which is generated from a {@link VNode}. \r\n   * This is a low-level method. Users wil typically use a {@link Projector} instead. \r\n   * @memberof MaquetteDom#\r\n   * @param {Element} beforeNode - The node that the DOM Node is inserted before.\r\n   * @param {VNode} vnode - The root of the virtual DOM tree that was created using the {@link module:maquette.h} function. NOTE: {@link VNode} objects may only be rendered once.\r\n   * @param {Object} projectionOptions - Options to be used to create and update the projection, see {@link module:maquette.createProjector}. \r\n   * @returns {Projection} The {@link Projection} that was created.\r\n   */\r\n  insertBefore: function(beforeNode, vnode, projectionOptions) {\r\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n    createDom(vnode, beforeNode.parentNode, beforeNode, projectionOptions);\r\n    return createProjection(vnode, projectionOptions);\r\n  },\r\n\r\n  /**\r\n   * Merges a new DOM node which is generated from a {@link VNode} with an existing DOM Node.\r\n   * This means that the virtual DOM and real DOM have one overlapping element. \r\n   * Therefore the selector for the root {@link VNode} will be ignored, but its properties and children will be applied to the Element provided \r\n   * This is a low-level method. Users wil typically use a {@link Projector} instead. \r\n   * @memberof MaquetteDom#\r\n   * @param {Element} domNode - The existing element to adopt as the root of the new virtual DOM. Existing attributes and childnodes are preserved.  \r\n   * @param {VNode} vnode - The root of the virtual DOM tree that was created using the {@link module:maquette.h} function. NOTE: {@link VNode} objects may only be rendered once.\r\n   * @param {Object} projectionOptions - Options to be used to create and update the projection, see {@link module:maquette.createProjector}. \r\n   * @returns {Projection} The {@link Projection} that was created.\r\n   */\r\n  merge: function (element, vnode, options) {\r\n    options = applyDefaultProjectionOptions(options);\r\n    vnode.domNode = element;\r\n    initPropertiesAndChildren(element, vnode, options);\r\n    return createProjection(vnode, options);\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a {@link CalculationCache} object, useful for caching {@link VNode} trees. \r\n * In practice, caching of {@link VNode} trees is not needed, because achieving 60 frames per second is almost never a problem.\r\n * @returns {CalculationCache}\r\n */\r\nexport let createCache = function () {\r\n  let cachedInputs = undefined;\r\n  let cachedOutcome = undefined;\r\n  let result = {\r\n    /**\r\n     * Manually invalidates the cached outcome.\r\n     * @memberof CalculationCache#\r\n     */\r\n    invalidate: function () {\r\n      cachedOutcome = undefined;\r\n      cachedInputs = undefined;\r\n    },\r\n    /**\r\n     * If the inputs array matches the inputs array from the previous invocation, this method returns the result of the previous invocation.\r\n     * Otherwise, the calculation function is invoked and its result is cached and returned. \r\n     * Objects in the inputs array are compared using ===.\r\n     * @param {Object[]} inputs - Array of objects that are to be compared using === with the inputs from the previous invocation. \r\n     * These objects are assumed to be immutable primitive values.\r\n     * @param {function} calculation - Function that takes zero arguments and returns an object (A {@link VNode} assumably) that can be cached.\r\n     * @memberof CalculationCache#\r\n     */\r\n    result: function (inputs, calculation) {\r\n      if(cachedInputs) {\r\n        for(let i = 0; i < inputs.length; i++) {\r\n          if(cachedInputs[i] !== inputs[i]) {\r\n            cachedOutcome = undefined;\r\n          }\r\n        }\r\n      }\r\n      if(!cachedOutcome) {\r\n        cachedOutcome = calculation();\r\n        cachedInputs = inputs;\r\n      }\r\n      return cachedOutcome;\r\n    }\r\n  };\r\n  return result;\r\n};\r\n  \r\n/**\r\n * Creates a {@link Mapping} instance that keeps an array of result objects synchronized with an array of source objects.\r\n * @param {function} getSourceKey - `function(source)` that must return a key to identify each source object. The result must eather be a string or a number.\r\n * @param {function} createResult - `function(source, index)` that must create a new result object from a given source. This function is identical argument of `Array.map`.\r\n * @param {function} updateResult - `function(source, target, index)` that updates a result to an updated source.\r\n * @returns {Mapping} \r\n */\r\nexport let createMapping = function(getSourceKey, createResult, updateResult /*, deleteTarget*/) {\r\n  let keys = [];\r\n  let results = [];\r\n  \r\n  return {\r\n    /**\r\n     * The array of results. These results will be synchronized with the latest array of sources that were provided using {@link Mapping#map}.\r\n     * @type {Object[]}\r\n     * @memberof Mapping#\r\n     */\r\n    results: results,\r\n    /**\r\n     * Maps a new array of sources and updates {@link Mapping#results}.\r\n     * @param {Object[]} newSources - The new array of sources.\r\n     * @memberof Mapping#\r\n     */\r\n    map: function(newSources) {\r\n      let newKeys = newSources.map(getSourceKey);\r\n      let oldTargets = results.slice();\r\n      let oldIndex = 0;\r\n      for (let i=0;i<newSources.length;i++) {\r\n        let source = newSources[i];\r\n        let sourceKey = newKeys[i];\r\n        if (sourceKey === keys[oldIndex]) {\r\n          results[i] = oldTargets[oldIndex];\r\n          updateResult(source, oldTargets[oldIndex], i);\r\n          oldIndex++;\r\n        } else {\r\n          let found = false;\r\n          for (let j = 1; j < keys.length; j++) {\r\n            let searchIndex = (oldIndex + j) % keys.length;\r\n            if (keys[searchIndex] === sourceKey) {\r\n              results[i] = oldTargets[searchIndex];\r\n              updateResult(newSources[i], oldTargets[searchIndex], i);\r\n              oldIndex = searchIndex + 1;\r\n              found = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!found) {\r\n            results[i] = createResult(source, i);\r\n          }\r\n        }\r\n      }\r\n      results.length = newSources.length;\r\n      keys = newKeys;\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Creates a {@link Projector} instance using the provided projectionOptions.\r\n * @param {Object} [projectionOptions] - Options that influence how the DOM is rendered and updated.\r\n * @param {Object} projectionOptions.transitions - A transition strategy to invoke when \r\n * enterAnimation and exitAnimation properties are provided as strings.\r\n * The module `cssTransitions` in the provided `css-transitions.js` file provides such a strategy. \r\n * A transition strategy is not needed when enterAnimation and exitAnimation properties are provided as functions.\r\n * @returns {Projector}\r\n */\r\nexport let createProjector = function (projectionOptions) {\r\n  projectionOptions = applyDefaultProjectionOptions(projectionOptions);\r\n  projectionOptions.eventHandlerInterceptor = function (propertyName, functionPropertyArgument) {\r\n    return function () {\r\n      // intercept function calls (event handlers) to do a render afterwards.\r\n      projector.scheduleRender();\r\n      return functionPropertyArgument.apply(this, arguments);\r\n    };\r\n  };\r\n  let renderCompleted = true;\r\n  let scheduled;\r\n  let stopped = false;\r\n  let projections = [];\r\n  let renderFunctions = []; // matches the projections array\r\n\r\n  let doRender = function () {\r\n    scheduled = undefined;\r\n    if (!renderCompleted) {\r\n      return; // The last render threw an error, it should be logged in the browser console. \r\n    }\r\n    renderCompleted = false;\r\n    for(let i = 0; i < projections.length; i++) {\r\n      let updatedVnode = renderFunctions[i]();\r\n      projections[i].update(updatedVnode);\r\n    }\r\n    renderCompleted = true;\r\n  };\r\n\r\n  var projector = {\r\n    /**\r\n     * Instructs the projector to re-render to the DOM at the next animation-frame using the registered `renderMaquette` functions.\r\n     * This method is automatically called for you when event-handlers that are registered in the {@link VNode}s are invoked.\r\n     * You need to call this method for instance when timeouts expire or AJAX responses arrive.\r\n     * @memberof Projector#\r\n     */\r\n    scheduleRender: function () {\r\n      if(!scheduled && !stopped) {\r\n        scheduled = requestAnimationFrame(doRender);\r\n      }\r\n    },\r\n    /**\r\n     * Stops the projector. This means that the registered `renderMaquette` functions will not be called anymore.\r\n     * Note that calling {@link Projector#stop} is not mandatory. A projector is a passive object that will get garbage collected as usual if it is no longer in scope.\r\n     * @memberof Projector#\r\n     */\r\n    stop: function () {\r\n      if(scheduled) {\r\n        cancelAnimationFrame(scheduled);\r\n        scheduled = undefined;\r\n      }\r\n      stopped = true;\r\n    },\r\n    \r\n    /**\r\n     * Resumes the projector. Use this method to resume rendering after stop was called or an error occurred during rendering.\r\n     * @memberof Projector#\r\n     */\r\n    resume: function() {\r\n      stopped = false;\r\n      renderCompleted = true;\r\n      projector.scheduleRender();\r\n    },\r\n    \r\n    /**\r\n     * Appends a new childnode to the DOM using the result from the provided `renderMaquetteFunction`.\r\n     * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\r\n     * @param {Element} parentNode - The parent node for the new childNode.\r\n     * @param {function} renderMaquetteFunction - Function with zero arguments that returns a {@link VNode} tree.\r\n     * @memberof Projector#\r\n     */\r\n    append: function (parentNode, renderMaquetteFunction) {\r\n      projections.push(dom.append(parentNode, renderMaquetteFunction(), projectionOptions));\r\n      renderFunctions.push(renderMaquetteFunction);\r\n    },\r\n    \r\n    /**\r\n     * Inserts a new DOM node using the result from the provided `renderMaquetteFunction`.\r\n     * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\r\n     * @param {Element} beforeNode - The node that the DOM Node is inserted before.\r\n     * @param {function} renderMaquetteFunction - Function with zero arguments that returns a {@link VNode} tree.\r\n     * @memberof Projector#\r\n     */\r\n    insertBefore: function (beforeNode, renderMaquetteFunction) {\r\n      projections.push(dom.insertBefore(beforeNode, renderMaquetteFunction(), projectionOptions));\r\n      renderFunctions.push(renderMaquetteFunction);\r\n    },\r\n    \r\n    /**\r\n     * Merges a new DOM node using the result from the provided `renderMaquetteFunction` with an existing DOM Node.\r\n     * This means that the virtual DOM and real DOM have one overlapping element. \r\n     * Therefore the selector for the root {@link VNode} will be ignored, but its properties and children will be applied to the Element provided\r\n     * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\r\n     * @param {Element} domNode - The existing element to adopt as the root of the new virtual DOM. Existing attributes and childnodes are preserved.  \r\n     * @param {function} renderMaquetteFunction - Function with zero arguments that returns a {@link VNode} tree.\r\n     * @memberof Projector#\r\n     */\r\n    merge: function (domNode, renderMaquetteFunction) {\r\n      projections.push(dom.merge(domNode, renderMaquetteFunction(), projectionOptions));\r\n      renderFunctions.push(renderMaquetteFunction);\r\n    },\r\n    \r\n    /**\r\n     * Replaces an existing DOM node with the result from the provided `renderMaquetteFunction`.\r\n     * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\r\n     * @param {Element} domNode - The DOM node to replace.\r\n     * @param {function} renderMaquetteFunction - Function with zero arguments that returns a {@link VNode} tree.\r\n     * @memberof Projector#\r\n     */\r\n    replace: function (domNode, renderMaquetteFunction) {\r\n      let vnode = renderMaquetteFunction();\r\n      createDom(vnode, domNode.parentNode, domNode, projectionOptions);\r\n      domNode.parentNode.removeChild(domNode);\r\n      projections.push(createProjection(vnode, projectionOptions));\r\n      renderFunctions.push(renderMaquetteFunction);\r\n    }\r\n  };\r\n  return projector;\r\n};\r\n"],"sourceRoot":"/source/"}