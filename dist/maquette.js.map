{"version":3,"sources":["/source/maquette.ts"],"names":["NAMESPACE_SVG","emptyArray","extend","base","overrides","result","Object","keys","forEach","key","toTextVNode","data","vnodeSelector","properties","undefined","children","text","toString","domNode","appendChildren","parentSelector","insertions","main","i","length","item","Array","isArray","hasOwnProperty","push","missingTransition","Error","defaultProjectionOptions","namespace","eventHandlerInterceptor","styleApplyer","styleName","value","style","transitions","enter","exit","applyDefaultProjectionOptions","projectionOptions","checkStyleValue","styleValue","setProperties","propNames","propCount","propName","propValue","classNames","classNameCount","j","className","classList","add","styleNames","styleCount","type","lastIndexOf","oldPropValue","evt","target","apply","setAttribute","updateProperties","previousProperties","propertiesUpdated","previousValue","on","previousOn","remove","newStyleValue","oldStyleValue","addChildren","createDom","same","vnode1","vnode2","findIndexOfChild","sameAs","start","nodeAdded","vNode","enterAnimation","nodeToRemove","exitAnimation","pointerEvents","removeDomNode","parentNode","removeChild","checkDistinguishable","childNodes","indexToCheck","parentVNode","operation","childNode","node","updateChildren","vnode","oldChildren","newChildren","oldChildrenLength","newChildrenLength","oldIndex","newIndex","textUpdated","oldChild","newChild","updateDom","findOldIndex","insertBefore","c","found","document","createTextNode","appendChild","charAt","slice","id","createElementNS","createElement","initPropertiesAndChildren","textContent","afterCreate","previous","updated","nodeValue","firstChild","afterUpdate","updateAnimation","createProjection","update","updatedVnode","exports","h","selector","arguments","childIndex","argsLength","onlyChild","child","dom","create","append","beforeNode","merge","element","options","createCache","cachedInputs","cachedOutcome","invalidate","inputs","calculation","createMapping","getSourceKey","createResult","updateResult","results","map","newSources","newKeys","oldTargets","source","sourceKey","searchIndex","createProjector","propertyName","functionPropertyArgument","projector","scheduleRender","renderCompleted","scheduled","stopped","projections","renderFunctions","doRender","requestAnimationFrame","stop","cancelAnimationFrame","resume","renderMaquetteFunction","replace"],"mappings":";;;;;;;;;;;;IAAA,IAAMA,aAAA,GAAgB,4BAAtB,C;IAIA;AAAA,QAAIC,UAAA,GAAa,EAAjB,C;IAEA,IAAIC,MAAA,GAAS,UAASC,IAAT,EAAeC,SAAf,EAAwB;AAAA,QACnC,IAAIC,MAAA,GAAS,EAAb,CADmC;AAAA,QAEnCC,MAAA,CAAOC,IAAP,CAAYJ,IAAZ,EAAkBK,OAAlB,CAA0B,UAASC,GAAT,EAAY;AAAA,YACpCJ,MAAA,CAAOI,GAAP,IAAcN,IAAA,CAAKM,GAAL,CAAd,CADoC;AAAA,SAAtC,EAFmC;AAAA,QAKnC,IAAIL,SAAJ,EAAe;AAAA,YACbE,MAAA,CAAOC,IAAP,CAAYH,SAAZ,EAAuBI,OAAvB,CAA+B,UAASC,GAAT,EAAY;AAAA,gBACzCJ,MAAA,CAAOI,GAAP,IAAcL,SAAA,CAAUK,GAAV,CAAd,CADyC;AAAA,aAA3C,EADa;AAAA,SALoB;AAAA,QAUnC,OAAOJ,MAAP,CAVmC;AAAA,KAArC,C;IAeA;AAAA,QAAIK,WAAA,GAAc,UAASC,IAAT,EAAa;AAAA,QAC7B,OAAO;AAAA,YACLC,aAAA,EAAe,EADV;AAAA,YAELC,UAAA,EAAYC,SAFP;AAAA,YAGLC,QAAA,EAAUD,SAHL;AAAA,YAILE,IAAA,EAAOL,IAAA,KAAS,IAAT,IAAiBA,IAAA,KAASG,SAA3B,GAAwC,EAAxC,GAA6CH,IAAA,CAAKM,QAAL,EAJ9C;AAAA,YAKLC,OAAA,EAAS,IALJ;AAAA,SAAP,CAD6B;AAAA,KAA/B,C;IAUA,IAAIC,cAAA,GAAiB,UAASC,cAAT,EAAyBC,UAAzB,EAAqCC,IAArC,EAAyC;AAAA,QAC5D,KAAK,IAAIC,CAAA,GAAI,CAAR,CAAL,CAAgBA,CAAA,GAAIF,UAAA,CAAWG,MAA/B,EAAuCD,CAAA,EAAvC,EAA4C;AAAA,YAC1C,IAAIE,IAAA,GAAOJ,UAAA,CAAWE,CAAX,CAAX,CAD0C;AAAA,YAE1C,IAAIG,KAAA,CAAMC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AAAA,gBACvBN,cAAA,CAAeC,cAAf,EAA+BK,IAA/B,EAAqCH,IAArC,EADuB;AAAA,aAAzB,MAEO;AAAA,gBACL,IAAIG,IAAA,KAAS,IAAT,IAAiBA,IAAA,KAASX,SAA9B,EAAyC;AAAA,oBACvC,IAAI,CAACW,IAAA,CAAKG,cAAL,CAAoB,eAApB,CAAL,EAA2C;AAAA,wBACzCH,IAAA,GAAOf,WAAA,CAAYe,IAAZ,CAAP,CADyC;AAAA,qBADJ;AAAA,oBAIvCH,IAAA,CAAKO,IAAL,CAAUJ,IAAV,EAJuC;AAAA,iBADpC;AAAA,aAJmC;AAAA,SADgB;AAAA,KAA9D,C;IAkBA;AAAA,QAAIK,iBAAA,GAAoB,YAAA;AAAA,QACtB,MAAM,IAAIC,KAAJ,CAAU,wEAAV,CAAN,CADsB;AAAA,KAAxB,C;IAIA,IAAIC,wBAAA,GAA2B;AAAA,QAC7BC,SAAA,EAAWnB,SADkB;AAAA,QAE7BoB,uBAAA,EAAyBpB,SAFI;AAAA,QAG7BqB,YAAA,EAAc,UAASjB,OAAT,EAAkBkB,SAAlB,EAA6BC,KAA7B,EAAkC;AAAA,YAE9C;AAAA,YAAAnB,OAAA,CAAQoB,KAAR,CAAcF,SAAd,IAA2BC,KAA3B,CAF8C;AAAA,SAHnB;AAAA,QAO7BE,WAAA,EAAa;AAAA,YACXC,KAAA,EAAOV,iBADI;AAAA,YAEXW,IAAA,EAAMX,iBAFK;AAAA,SAPgB;AAAA,KAA/B,C;IAaA,IAAIY,6BAAA,GAAgC,UAASC,iBAAT,EAA0B;AAAA,QAC5D,OAAOzC,MAAA,CAAO8B,wBAAP,EAAiCW,iBAAjC,CAAP,CAD4D;AAAA,KAA9D,C;IAIA,IAAIC,eAAA,GAAkB,UAASC,UAAT,EAA2B;AAAA,QAC/C,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAAA,YAClC,MAAM,IAAId,KAAJ,CAAU,8BAAV,CAAN,CADkC;AAAA,SADW;AAAA,KAAjD,C;IAKA,IAAIe,aAAA,GAAgB,UAAS5B,OAAT,EAAkBL,UAAlB,EAA8B8B,iBAA9B,EAA+C;AAAA,QACjE,IAAI,CAAC9B,UAAL,EAAiB;AAAA,YACf,OADe;AAAA,SADgD;AAAA,QAIjE,IAAIqB,uBAAA,GAA0BS,iBAAA,CAAkBT,uBAAhD,CAJiE;AAAA,QAKjE,IAAIa,SAAA,GAAYzC,MAAA,CAAOC,IAAP,CAAYM,UAAZ,CAAhB,CALiE;AAAA,QAMjE,IAAImC,SAAA,GAAYD,SAAA,CAAUvB,MAA1B,CANiE;AAAA,QAOjE,KAAK,IAAID,CAAA,GAAI,CAAR,CAAL,CAAgBA,CAAA,GAAIyB,SAApB,EAA+BzB,CAAA,EAA/B,EAAoC;AAAA,YAClC,IAAI0B,QAAA,GAAWF,SAAA,CAAUxB,CAAV,CAAf,CADkC;AAAA,YAElC,IAAI2B,SAAA,GAAYrC,UAAA,CAAWoC,QAAX,CAAhB,CAFkC;AAAA,YAGlC,IAAIA,QAAA,KAAa,OAAb,IAAwBA,QAAA,KAAa,WAArC,IAAoDA,QAAA,KAAa,WAArE,EAAkF;AAAA,gBAChF,MAAM,IAAIlB,KAAJ,CAAU,cAAckB,QAAd,GAAyB,iCAAnC,CAAN,CADgF;AAAA,aAAlF,MAEO,IAAIA,QAAA,KAAa,SAAjB,EAA4B;AAAA,gBAEjC;AAAA,oBAAIE,UAAA,GAAa7C,MAAA,CAAOC,IAAP,CAAY2C,SAAZ,CAAjB,CAFiC;AAAA,gBAGjC,IAAIE,cAAA,GAAiBD,UAAA,CAAW3B,MAAhC,CAHiC;AAAA,gBAIjC,KAAK,IAAI6B,CAAA,GAAI,CAAR,CAAL,CAAgBA,CAAA,GAAID,cAApB,EAAoCC,CAAA,EAApC,EAAyC;AAAA,oBACvC,IAAIC,SAAA,GAAYH,UAAA,CAAWE,CAAX,CAAhB,CADuC;AAAA,oBAEvC,IAAIH,SAAA,CAAUI,SAAV,CAAJ,EAA0B;AAAA,wBACxBpC,OAAA,CAAQqC,SAAR,CAAkBC,GAAlB,CAAsBF,SAAtB,EADwB;AAAA,qBAFa;AAAA,iBAJR;AAAA,aAA5B,MAUA,IAAIL,QAAA,KAAa,QAAjB,EAA2B;AAAA,gBAEhC;AAAA,oBAAIQ,UAAA,GAAanD,MAAA,CAAOC,IAAP,CAAY2C,SAAZ,CAAjB,CAFgC;AAAA,gBAGhC,IAAIQ,UAAA,GAAaD,UAAA,CAAWjC,MAA5B,CAHgC;AAAA,gBAIhC,KAAK,IAAI6B,CAAA,GAAI,CAAR,CAAL,CAAgBA,CAAA,GAAIK,UAApB,EAAgCL,CAAA,EAAhC,EAAqC;AAAA,oBACnC,IAAIjB,SAAA,GAAYqB,UAAA,CAAWJ,CAAX,CAAhB,CADmC;AAAA,oBAEnC,IAAIR,UAAA,GAAaK,SAAA,CAAUd,SAAV,CAAjB,CAFmC;AAAA,oBAGnC,IAAIS,UAAJ,EAAgB;AAAA,wBACdD,eAAA,CAAgBC,UAAhB,EADc;AAAA,wBAEdF,iBAAA,CAAkBR,YAAlB,CAA+BjB,OAA/B,EAAwCkB,SAAxC,EAAmDS,UAAnD,EAFc;AAAA,qBAHmB;AAAA,iBAJL;AAAA,aAA3B,MAYA,IAAII,QAAA,KAAa,KAAjB,EAAwB;AAAA,gBAC7B,SAD6B;AAAA,aAAxB,MAEA,IAAIC,SAAA,KAAc,IAAd,IAAsBA,SAAA,KAAcpC,SAAxC,EAAmD;AAAA,gBACxD,SADwD;AAAA,aAAnD,MAEA;AAAA,gBACL,IAAI6C,IAAA,GAAO,OAAOT,SAAlB,CADK;AAAA,gBAEL,IAAIS,IAAA,KAAS,UAAb,EAAyB;AAAA,oBACvB,IAAIzB,uBAAA,IAA4Be,QAAA,CAASW,WAAT,CAAqB,IAArB,EAA2B,CAA3B,MAAkC,CAAlE,EAAsE;AAAA,wBACpEV,SAAA,GAAYhB,uBAAA,CAAwBe,QAAxB,EAAkCC,SAAlC,EAA6ChC,OAA7C,EAAsDL,UAAtD,CAAZ,CADoE;AAAA,wBAEpE;AAAA,4BAAIoC,QAAA,KAAa,SAAjB,EAA4B;AAAA,4BAC1B,CAAC,YAAA;AAAA,gCAEC;AAAA,oCAAIY,YAAA,GAAeX,SAAnB,CAFD;AAAA,gCAGCA,SAAA,GAAY,UAASY,GAAT,EAAY;AAAA,oCACtBA,GAAA,CAAIC,MAAJ,CAAW,eAAX,IAA8BD,GAAA,CAAIC,MAAJ,CAAW1B,KAAzC,CADsB;AAAA,oCAEtBwB,YAAA,CAAaG,KAAb,CAAmB,IAAnB,EAAyB,CAACF,GAAD,CAAzB,EAFsB;AAAA,iCAAxB,CAHD;AAAA,6BAAA,EAAD,EAD0B;AAAA,yBAFwC;AAAA,qBAD/C;AAAA,oBAcvB5C,OAAA,CAAQ+B,QAAR,IAAoBC,SAApB,CAduB;AAAA,iBAAzB,MAeO,IAAIS,IAAA,KAAS,QAAT,IAAqBV,QAAA,KAAa,OAAtC,EAA+C;AAAA,oBACpD/B,OAAA,CAAQ+C,YAAR,CAAqBhB,QAArB,EAA+BC,SAA/B,EADoD;AAAA,iBAA/C,MAEA;AAAA,oBACLhC,OAAA,CAAQ+B,QAAR,IAAoBC,SAApB,CADK;AAAA,iBAnBF;AAAA,aA/B2B;AAAA,SAP6B;AAAA,KAAnE,C;IAgEA,IAAIgB,gBAAA,GAAmB,UAAShD,OAAT,EAAkBiD,kBAAlB,EAAsCtD,UAAtC,EAAkD8B,iBAAlD,EAAmE;AAAA,QACxF,IAAI,CAAC9B,UAAL,EAAiB;AAAA,YACf,OADe;AAAA,SADuE;AAAA,QAIxF,IAAIuD,iBAAA,GAAoB,KAAxB,CAJwF;AAAA,QAKxF,IAAIrB,SAAA,GAAYzC,MAAA,CAAOC,IAAP,CAAYM,UAAZ,CAAhB,CALwF;AAAA,QAMxF,IAAImC,SAAA,GAAYD,SAAA,CAAUvB,MAA1B,CANwF;AAAA,QAOxF,KAAK,IAAID,CAAA,GAAI,CAAR,CAAL,CAAgBA,CAAA,GAAIyB,SAApB,EAA+BzB,CAAA,EAA/B,EAAoC;AAAA,YAClC,IAAI0B,QAAA,GAAWF,SAAA,CAAUxB,CAAV,CAAf,CADkC;AAAA,YAGlC;AAAA,gBAAI2B,SAAA,GAAYrC,UAAA,CAAWoC,QAAX,CAAhB,CAHkC;AAAA,YAIlC,IAAIoB,aAAA,GAAgBF,kBAAA,CAAmBlB,QAAnB,CAApB,CAJkC;AAAA,YAKlC,IAAIA,QAAA,KAAa,SAAjB,EAA4B;AAAA,gBAC1B,IAAIM,SAAA,GAAYrC,OAAA,CAAQqC,SAAxB,CAD0B;AAAA,gBAE1B,IAAIJ,UAAA,GAAa7C,MAAA,CAAOC,IAAP,CAAY2C,SAAZ,CAAjB,CAF0B;AAAA,gBAG1B,IAAIE,cAAA,GAAiBD,UAAA,CAAW3B,MAAhC,CAH0B;AAAA,gBAI1B,KAAK,IAAI6B,CAAA,GAAI,CAAR,CAAL,CAAgBA,CAAA,GAAID,cAApB,EAAoCC,CAAA,EAApC,EAAyC;AAAA,oBACvC,IAAIC,SAAA,GAAYH,UAAA,CAAWE,CAAX,CAAhB,CADuC;AAAA,oBAEvC,IAAIiB,EAAA,GAAK,CAAC,CAACpB,SAAA,CAAUI,SAAV,CAAX,CAFuC;AAAA,oBAGvC,IAAIiB,UAAA,GAAa,CAAC,CAACF,aAAA,CAAcf,SAAd,CAAnB,CAHuC;AAAA,oBAIvC,IAAIgB,EAAA,KAAOC,UAAX,EAAuB;AAAA,wBACrB,SADqB;AAAA,qBAJgB;AAAA,oBAOvCH,iBAAA,GAAoB,IAApB,CAPuC;AAAA,oBAQvC,IAAIE,EAAJ,EAAQ;AAAA,wBACNf,SAAA,CAAUC,GAAV,CAAcF,SAAd,EADM;AAAA,qBAAR,MAEO;AAAA,wBACLC,SAAA,CAAUiB,MAAV,CAAiBlB,SAAjB,EADK;AAAA,qBAVgC;AAAA,iBAJf;AAAA,aAA5B,MAkBO,IAAIL,QAAA,KAAa,QAAjB,EAA2B;AAAA,gBAChC,IAAIQ,UAAA,GAAanD,MAAA,CAAOC,IAAP,CAAY2C,SAAZ,CAAjB,CADgC;AAAA,gBAEhC,IAAIQ,UAAA,GAAaD,UAAA,CAAWjC,MAA5B,CAFgC;AAAA,gBAGhC,KAAK,IAAI6B,CAAA,GAAI,CAAR,CAAL,CAAgBA,CAAA,GAAIK,UAApB,EAAgCL,CAAA,EAAhC,EAAqC;AAAA,oBACnC,IAAIjB,SAAA,GAAYqB,UAAA,CAAWJ,CAAX,CAAhB,CADmC;AAAA,oBAEnC,IAAIoB,aAAA,GAAgBvB,SAAA,CAAUd,SAAV,CAApB,CAFmC;AAAA,oBAGnC,IAAIsC,aAAA,GAAgBL,aAAA,CAAcjC,SAAd,CAApB,CAHmC;AAAA,oBAInC,IAAIqC,aAAA,KAAkBC,aAAtB,EAAqC;AAAA,wBACnC,SADmC;AAAA,qBAJF;AAAA,oBAOnCN,iBAAA,GAAoB,IAApB,CAPmC;AAAA,oBAQnC,IAAIK,aAAJ,EAAmB;AAAA,wBACjB7B,eAAA,CAAgB6B,aAAhB,EADiB;AAAA,wBAEjB9B,iBAAA,CAAkBR,YAAlB,CAA+BjB,OAA/B,EAAwCkB,SAAxC,EAAmDqC,aAAnD,EAFiB;AAAA,qBAAnB,MAGO;AAAA,wBACL9B,iBAAA,CAAkBR,YAAlB,CAA+BjB,OAA/B,EAAwCkB,SAAxC,EAAmD,EAAnD,EADK;AAAA,qBAX4B;AAAA,iBAHL;AAAA,aAA3B,MAkBA;AAAA,gBACL,IAAI,CAACc,SAAD,IAAc,OAAOmB,aAAP,KAAyB,QAA3C,EAAqD;AAAA,oBACnDnB,SAAA,GAAY,EAAZ,CADmD;AAAA,iBADhD;AAAA,gBAIL,IAAID,QAAA,KAAa,OAAjB,EAA0B;AAAA,oBACxB,IAAI/B,OAAA,CAAQ+B,QAAR,MAAsBC,SAAtB,IAAmChC,OAAA,CAAQ,eAAR,MAA6BgC,SAApE,EAA+E;AAAA,wBAC7EhC,OAAA,CAAQ+B,QAAR,IAAoBC,SAApB,CAD6E;AAAA,wBAE7E;AAAA,wBAAAhC,OAAA,CAAQ,eAAR,IAA2BJ,SAA3B,CAF6E;AAAA,qBADvD;AAAA,oBAKxB;AAAA,wBAAIoC,SAAA,KAAcmB,aAAlB,EAAiC;AAAA,wBAC/BD,iBAAA,GAAoB,IAApB,CAD+B;AAAA,qBALT;AAAA,iBAA1B,MAQO,IAAIlB,SAAA,KAAcmB,aAAlB,EAAiC;AAAA,oBACtC,IAAIV,IAAA,GAAO,OAAOT,SAAlB,CADsC;AAAA,oBAEtC,IAAIS,IAAA,KAAS,UAAb,EAAyB;AAAA,wBACvB,MAAM,IAAI5B,KAAJ,CAAU,mEAAmEkB,QAAnE,GACd,yEADI,CAAN,CADuB;AAAA,qBAFa;AAAA,oBAMtC,IAAIU,IAAA,KAAS,QAAb,EAAuB;AAAA,wBACrBzC,OAAA,CAAQ+C,YAAR,CAAqBhB,QAArB,EAA+BC,SAA/B,EADqB;AAAA,qBAAvB,MAEO;AAAA,wBACL,IAAIhC,OAAA,CAAQ+B,QAAR,MAAsBC,SAA1B,EAAqC;AAAA,4BACnChC,OAAA,CAAQ+B,QAAR,IAAoBC,SAApB,CADmC;AAAA,yBADhC;AAAA,qBAR+B;AAAA,oBAatCkB,iBAAA,GAAoB,IAApB,CAbsC;AAAA,iBAZnC;AAAA,aAzC2B;AAAA,SAPoD;AAAA,QA6ExF,OAAOA,iBAAP,CA7EwF;AAAA,KAA1F,C;IAgFA,IAAIO,WAAA,GAAc,UAASzD,OAAT,EAAkBH,QAAlB,EAA4B4B,iBAA5B,EAA6C;AAAA,QAC7D,IAAI,CAAC5B,QAAL,EAAe;AAAA,YACb,OADa;AAAA,SAD8C;AAAA,QAI7D,KAAK,IAAIQ,CAAA,GAAI,CAAR,CAAL,CAAgBA,CAAA,GAAIR,QAAA,CAASS,MAA7B,EAAqCD,CAAA,EAArC,EAA0C;AAAA,YACxCqD,SAAA,CAAU7D,QAAA,CAASQ,CAAT,CAAV,EAAuBL,OAAvB,EAAgCJ,SAAhC,EAA2C6B,iBAA3C,EADwC;AAAA,SAJmB;AAAA,KAA/D,C;IASA,IAAIkC,IAAA,GAAO,UAASC,MAAT,EAAiBC,MAAjB,EAAuB;AAAA,QAChC,IAAID,MAAA,CAAOlE,aAAP,KAAyBmE,MAAA,CAAOnE,aAApC,EAAmD;AAAA,YACjD,OAAO,KAAP,CADiD;AAAA,SADnB;AAAA,QAIhC,IAAIkE,MAAA,CAAOjE,UAAP,IAAqBkE,MAAA,CAAOlE,UAAhC,EAA4C;AAAA,YAC1C,OAAOiE,MAAA,CAAOjE,UAAP,CAAkBJ,GAAlB,KAA0BsE,MAAA,CAAOlE,UAAP,CAAkBJ,GAAnD,CAD0C;AAAA,SAJZ;AAAA,QAOhC,OAAO,CAACqE,MAAA,CAAOjE,UAAR,IAAsB,CAACkE,MAAA,CAAOlE,UAArC,CAPgC;AAAA,KAAlC,C;IAUA,IAAImE,gBAAA,GAAmB,UAASjE,QAAT,EAAmBkE,MAAnB,EAA2BC,KAA3B,EAAgC;AAAA,QACrD,IAAID,MAAA,CAAOrE,aAAP,KAAyB,EAA7B,EAAiC;AAAA,YAE/B;AAAA,iBAAK,IAAIW,CAAA,GAAI2D,KAAR,CAAL,CAAoB3D,CAAA,GAAIR,QAAA,CAASS,MAAjC,EAAyCD,CAAA,EAAzC,EAA8C;AAAA,gBAC5C,IAAIsD,IAAA,CAAK9D,QAAA,CAASQ,CAAT,CAAL,EAAkB0D,MAAlB,CAAJ,EAA+B;AAAA,oBAC7B,OAAO1D,CAAP,CAD6B;AAAA,iBADa;AAAA,aAFf;AAAA,SADoB;AAAA,QASrD,OAAO,CAAC,CAAR,CATqD;AAAA,KAAvD,C;IAYA,IAAI4D,SAAA,GAAY,UAASC,KAAT,EAAgB7C,WAAhB,EAA2B;AAAA,QACzC,IAAI6C,KAAA,CAAMvE,UAAV,EAAsB;AAAA,YACpB,IAAIwE,cAAA,GAAiBD,KAAA,CAAMvE,UAAN,CAAiBwE,cAAtC,CADoB;AAAA,YAEpB,IAAIA,cAAJ,EAAoB;AAAA,gBAClB,IAAI,OAAOA,cAAP,KAA0B,UAA9B,EAA0C;AAAA,oBACxCA,cAAA,CAAeD,KAAA,CAAMlE,OAArB,EAA8BkE,KAAA,CAAMvE,UAApC,EADwC;AAAA,iBAA1C,MAEO;AAAA,oBACL0B,WAAA,CAAYC,KAAZ,CAAkB4C,KAAA,CAAMlE,OAAxB,EAAiCkE,KAAA,CAAMvE,UAAvC,EAAmDwE,cAAnD,EADK;AAAA,iBAHW;AAAA,aAFA;AAAA,SADmB;AAAA,KAA3C,C;IAaA,IAAIC,YAAA,GAAe,UAASF,KAAT,EAAgB7C,WAAhB,EAA2B;AAAA,QAC5C,IAAIrB,OAAA,GAAUkE,KAAA,CAAMlE,OAApB,CAD4C;AAAA,QAE5C,IAAIkE,KAAA,CAAMvE,UAAV,EAAsB;AAAA,YACpB,IAAI0E,aAAA,GAAgBH,KAAA,CAAMvE,UAAN,CAAiB0E,aAArC,CADoB;AAAA,YAEpB,IAAIA,aAAJ,EAAmB;AAAA,gBACjBrE,OAAA,CAAQoB,KAAR,CAAckD,aAAd,GAA8B,MAA9B,CADiB;AAAA,gBAEjB,IAAIC,aAAA,GAAgB,YAAA;AAAA,oBAClB,IAAIvE,OAAA,CAAQwE,UAAZ,EAAwB;AAAA,wBACtBxE,OAAA,CAAQwE,UAAR,CAAmBC,WAAnB,CAA+BzE,OAA/B,EADsB;AAAA,qBADN;AAAA,iBAApB,CAFiB;AAAA,gBAOjB,IAAI,OAAOqE,aAAP,KAAyB,UAA7B,EAAyC;AAAA,oBACvCA,aAAA,CAAcrE,OAAd,EAAuBuE,aAAvB,EAAsCL,KAAA,CAAMvE,UAA5C,EADuC;AAAA,oBAEvC,OAFuC;AAAA,iBAAzC,MAGO;AAAA,oBACL0B,WAAA,CAAYE,IAAZ,CAAiB2C,KAAA,CAAMlE,OAAvB,EAAgCkE,KAAA,CAAMvE,UAAtC,EAAkD0E,aAAlD,EAAiEE,aAAjE,EADK;AAAA,oBAEL,OAFK;AAAA,iBAVU;AAAA,aAFC;AAAA,SAFsB;AAAA,QAoB5C,IAAIvE,OAAA,CAAQwE,UAAZ,EAAwB;AAAA,YACtBxE,OAAA,CAAQwE,UAAR,CAAmBC,WAAnB,CAA+BzE,OAA/B,EADsB;AAAA,SApBoB;AAAA,KAA9C,C;IAyBA,IAAI0E,oBAAA,GAAuB,UAASC,UAAT,EAAqBC,YAArB,EAAmCC,WAAnC,EAAgDC,SAAhD,EAAyD;AAAA,QAClF,IAAIC,SAAA,GAAYJ,UAAA,CAAWC,YAAX,CAAhB,CADkF;AAAA,QAElF,IAAIG,SAAA,CAAUrF,aAAV,KAA4B,EAAhC,EAAoC;AAAA,YAClC;AADkC,SAF8C;AAAA,QAKlF,IAAIH,GAAA,GAAMwF,SAAA,CAAUpF,UAAV,GAAuBoF,SAAA,CAAUpF,UAAV,CAAqBJ,GAA5C,GAAkDK,SAA5D,CALkF;AAAA,QAMlF,IAAI,CAACL,GAAL,EAAU;AAAA,YACR,KAAK,IAAIc,CAAA,GAAI,CAAR,CAAL,CAAgBA,CAAA,GAAIsE,UAAA,CAAWrE,MAA/B,EAAuCD,CAAA,EAAvC,EAA4C;AAAA,gBAC1C,IAAIA,CAAA,KAAMuE,YAAV,EAAwB;AAAA,oBACtB,IAAII,IAAA,GAAOL,UAAA,CAAWtE,CAAX,CAAX,CADsB;AAAA,oBAEtB,IAAIsD,IAAA,CAAKqB,IAAL,EAAWD,SAAX,CAAJ,EAA2B;AAAA,wBACzB,IAAID,SAAA,KAAc,OAAlB,EAA2B;AAAA,4BACzB,MAAM,IAAIjE,KAAJ,CAAUgE,WAAA,CAAYnF,aAAZ,GAA4B,SAA5B,GAAwCqF,SAAA,CAAUrF,aAAlD,GAAkE,SAAlE,GACd,yGADI,CAAN,CADyB;AAAA,yBAA3B,MAGO;AAAA,4BACL,MAAM,IAAImB,KAAJ,CAAUgE,WAAA,CAAYnF,aAAZ,GAA4B,SAA5B,GAAwCqF,SAAA,CAAUrF,aAAlD,GAAkE,SAAlE,GACd,yGADI,CAAN,CADK;AAAA,yBAJkB;AAAA,qBAFL;AAAA,iBADkB;AAAA,aADpC;AAAA,SANwE;AAAA,KAApF,C;IAwBA,IAAIuF,cAAA,GAAiB,UAASC,KAAT,EAAgBlF,OAAhB,EAAyBmF,WAAzB,EAAsCC,WAAtC,EAAmD3D,iBAAnD,EAAoE;AAAA,QACvF,IAAI0D,WAAA,KAAgBC,WAApB,EAAiC;AAAA,YAC/B,OAAO,KAAP,CAD+B;AAAA,SADsD;AAAA,QAIvFD,WAAA,GAAcA,WAAA,IAAepG,UAA7B,CAJuF;AAAA,QAKvFqG,WAAA,GAAcA,WAAA,IAAerG,UAA7B,CALuF;AAAA,QAMvF,IAAIsG,iBAAA,GAAoBF,WAAA,CAAY7E,MAApC,CANuF;AAAA,QAOvF,IAAIgF,iBAAA,GAAoBF,WAAA,CAAY9E,MAApC,CAPuF;AAAA,QAQvF,IAAIe,WAAA,GAAcI,iBAAA,CAAkBJ,WAApC,CARuF;AAAA,QAUvF,IAAIkE,QAAA,GAAW,CAAf,CAVuF;AAAA,QAWvF,IAAIC,QAAA,GAAW,CAAf,CAXuF;AAAA,QAYvF,IAAInF,CAAJ,CAZuF;AAAA,QAavF,IAAIoF,WAAA,GAAc,KAAlB,CAbuF;AAAA,QAcvF,OAAOD,QAAA,GAAWF,iBAAlB,EAAqC;AAAA,YACnC,IAAII,QAAA,GAAYH,QAAA,GAAWF,iBAAZ,GAAiCF,WAAA,CAAYI,QAAZ,CAAjC,GAAyD3F,SAAxE,CADmC;AAAA,YAEnC,IAAI+F,QAAA,GAAWP,WAAA,CAAYI,QAAZ,CAAf,CAFmC;AAAA,YAGnC,IAAIE,QAAA,KAAa9F,SAAb,IAA0B+D,IAAA,CAAK+B,QAAL,EAAeC,QAAf,CAA9B,EAAwD;AAAA,gBACtDF,WAAA,GAAcG,SAAA,CAAUF,QAAV,EAAoBC,QAApB,EAA8BlE,iBAA9B,KAAoDgE,WAAlE,CADsD;AAAA,gBAEtDF,QAAA,GAFsD;AAAA,aAAxD,MAGO;AAAA,gBACL,IAAIM,YAAA,GAAe/B,gBAAA,CAAiBqB,WAAjB,EAA8BQ,QAA9B,EAAwCJ,QAAA,GAAW,CAAnD,CAAnB,CADK;AAAA,gBAEL,IAAIM,YAAA,IAAgB,CAApB,EAAuB;AAAA,oBAErB;AAAA,yBAAKxF,CAAA,GAAIkF,QAAT,EAAmBlF,CAAA,GAAIwF,YAAvB,EAAqCxF,CAAA,EAArC,EAA0C;AAAA,wBACxC+D,YAAA,CAAae,WAAA,CAAY9E,CAAZ,CAAb,EAA6BgB,WAA7B,EADwC;AAAA,wBAExCqD,oBAAA,CAAqBS,WAArB,EAAkC9E,CAAlC,EAAqC6E,KAArC,EAA4C,SAA5C,EAFwC;AAAA,qBAFrB;AAAA,oBAMrBO,WAAA,GAAcG,SAAA,CAAUT,WAAA,CAAYU,YAAZ,CAAV,EAAqCF,QAArC,EAA+ClE,iBAA/C,KAAqEgE,WAAnF,CANqB;AAAA,oBAOrBF,QAAA,GAAWM,YAAA,GAAe,CAA1B,CAPqB;AAAA,iBAAvB,MAQO;AAAA,oBAEL;AAAA,oBAAAnC,SAAA,CAAUiC,QAAV,EAAoB3F,OAApB,EAA8BuF,QAAA,GAAWF,iBAAZ,GAAiCF,WAAA,CAAYI,QAAZ,EAAsBvF,OAAvD,GAAiEJ,SAA9F,EAAyG6B,iBAAzG,EAFK;AAAA,oBAGLwC,SAAA,CAAU0B,QAAV,EAAoBtE,WAApB,EAHK;AAAA,oBAILqD,oBAAA,CAAqBU,WAArB,EAAkCI,QAAlC,EAA4CN,KAA5C,EAAmD,OAAnD,EAJK;AAAA,iBAVF;AAAA,aAN4B;AAAA,YAuBnCM,QAAA,GAvBmC;AAAA,SAdkD;AAAA,QAuCvF,IAAIH,iBAAA,GAAoBE,QAAxB,EAAkC;AAAA,YAEhC;AAAA,iBAAKlF,CAAA,GAAIkF,QAAT,EAAmBlF,CAAA,GAAIgF,iBAAvB,EAA0ChF,CAAA,EAA1C,EAA+C;AAAA,gBAC7C+D,YAAA,CAAae,WAAA,CAAY9E,CAAZ,CAAb,EAA6BgB,WAA7B,EAD6C;AAAA,gBAE7CqD,oBAAA,CAAqBS,WAArB,EAAkC9E,CAAlC,EAAqC6E,KAArC,EAA4C,SAA5C,EAF6C;AAAA,aAFf;AAAA,SAvCqD;AAAA,QA8CvF,OAAOO,WAAP,CA9CuF;AAAA,KAAzF,C;IAiDA,IAAI/B,SAAA,GAAY,UAASwB,KAAT,EAAgBV,UAAhB,EAA4BsB,YAA5B,EAA0CrE,iBAA1C,EAA2D;AAAA,QACzE,IAAIzB,OAAJ,EAAaK,CAAb,EAAgB0F,CAAhB,EAAmB/B,KAAA,GAAQ,CAA3B,EAA8BvB,IAA9B,EAAoCuD,KAApC,CADyE;AAAA,QAEzE,IAAItG,aAAA,GAAgBwF,KAAA,CAAMxF,aAA1B,CAFyE;AAAA,QAGzE,IAAIA,aAAA,KAAkB,EAAtB,EAA0B;AAAA,YACxBM,OAAA,GAAUkF,KAAA,CAAMlF,OAAN,GAAgBiG,QAAA,CAASC,cAAT,CAAwBhB,KAAA,CAAMpF,IAA9B,CAA1B,CADwB;AAAA,YAExB,IAAIgG,YAAA,KAAiBlG,SAArB,EAAgC;AAAA,gBAC9B4E,UAAA,CAAWsB,YAAX,CAAwB9F,OAAxB,EAAiC8F,YAAjC,EAD8B;AAAA,aAAhC,MAEO;AAAA,gBACLtB,UAAA,CAAW2B,WAAX,CAAuBnG,OAAvB,EADK;AAAA,aAJiB;AAAA,SAA1B,MAOO;AAAA,YACL,KAAKK,CAAA,GAAI,CAAT,EAAYA,CAAA,IAAKX,aAAA,CAAcY,MAA/B,EAAuC,EAAED,CAAzC,EAA4C;AAAA,gBAC1C0F,CAAA,GAAIrG,aAAA,CAAc0G,MAAd,CAAqB/F,CAArB,CAAJ,CAD0C;AAAA,gBAE1C,IAAIA,CAAA,KAAMX,aAAA,CAAcY,MAApB,IAA8ByF,CAAA,KAAM,GAApC,IAA2CA,CAAA,KAAM,GAArD,EAA0D;AAAA,oBACxDtD,IAAA,GAAO/C,aAAA,CAAc0G,MAAd,CAAqBpC,KAAA,GAAQ,CAA7B,CAAP,CADwD;AAAA,oBAExDgC,KAAA,GAAQtG,aAAA,CAAc2G,KAAd,CAAoBrC,KAApB,EAA2B3D,CAA3B,CAAR,CAFwD;AAAA,oBAGxD,IAAIoC,IAAA,KAAS,GAAb,EAAkB;AAAA,wBAChBzC,OAAA,CAAQqC,SAAR,CAAkBC,GAAlB,CAAsB0D,KAAtB,EADgB;AAAA,qBAAlB,MAEO,IAAIvD,IAAA,KAAS,GAAb,EAAkB;AAAA,wBACvBzC,OAAA,CAAQsG,EAAR,GAAaN,KAAb,CADuB;AAAA,qBAAlB,MAEA;AAAA,wBACL,IAAIA,KAAA,KAAU,KAAd,EAAqB;AAAA,4BACnBvE,iBAAA,GAAoBzC,MAAA,CAAOyC,iBAAP,EAA0B,EAAEV,SAAA,EAAWjC,aAAb,EAA1B,CAApB,CADmB;AAAA,yBADhB;AAAA,wBAIL,IAAI2C,iBAAA,CAAkBV,SAAlB,KAAgCnB,SAApC,EAA+C;AAAA,4BAC7CI,OAAA,GAAUkF,KAAA,CAAMlF,OAAN,GAAgBiG,QAAA,CAASM,eAAT,CAAyB9E,iBAAA,CAAkBV,SAA3C,EAAsDiF,KAAtD,CAA1B,CAD6C;AAAA,yBAA/C,MAEO;AAAA,4BACLhG,OAAA,GAAUkF,KAAA,CAAMlF,OAAN,GAAgBiG,QAAA,CAASO,aAAT,CAAuBR,KAAvB,CAA1B,CADK;AAAA,yBANF;AAAA,wBASL,IAAIF,YAAA,KAAiBlG,SAArB,EAAgC;AAAA,4BAC9B4E,UAAA,CAAWsB,YAAX,CAAwB9F,OAAxB,EAAiC8F,YAAjC,EAD8B;AAAA,yBAAhC,MAEO;AAAA,4BACLtB,UAAA,CAAW2B,WAAX,CAAuBnG,OAAvB,EADK;AAAA,yBAXF;AAAA,qBAPiD;AAAA,oBAsBxDgE,KAAA,GAAQ3D,CAAA,GAAI,CAAZ,CAtBwD;AAAA,iBAFhB;AAAA,aADvC;AAAA,YA4BLoG,yBAAA,CAA0BzG,OAA1B,EAAmCkF,KAAnC,EAA0CzD,iBAA1C,EA5BK;AAAA,SAVkE;AAAA,KAA3E,C;IA0CA,IAAIgF,yBAAA,GAA4B,UAASzG,OAAT,EAAkBkF,KAAlB,EAAyBzD,iBAAzB,EAA0C;AAAA,QACxEgC,WAAA,CAAYzD,OAAZ,EAAqBkF,KAAA,CAAMrF,QAA3B,EAAqC4B,iBAArC,EADwE;AAAA,QAExE;AAAA,YAAIyD,KAAA,CAAMpF,IAAV,EAAgB;AAAA,YACdE,OAAA,CAAQ0G,WAAR,GAAsBxB,KAAA,CAAMpF,IAA5B,CADc;AAAA,SAFwD;AAAA,QAKxE8B,aAAA,CAAc5B,OAAd,EAAuBkF,KAAA,CAAMvF,UAA7B,EAAyC8B,iBAAzC,EALwE;AAAA,QAMxE,IAAIyD,KAAA,CAAMvF,UAAN,IAAoBuF,KAAA,CAAMvF,UAAN,CAAiBgH,WAAzC,EAAsD;AAAA,YACpDzB,KAAA,CAAMvF,UAAN,CAAiBgH,WAAjB,CAA6B3G,OAA7B,EAAsCyB,iBAAtC,EAAyDyD,KAAA,CAAMxF,aAA/D,EAA8EwF,KAAA,CAAMvF,UAApF,EAAgGuF,KAAA,CAAMrF,QAAtG,EADoD;AAAA,SANkB;AAAA,KAA1E,C;IAWA,IAAI+F,SAAA,GAAY,UAASgB,QAAT,EAAmB1B,KAAnB,EAA0BzD,iBAA1B,EAA2C;AAAA,QACzD,IAAIzB,OAAA,GAAU4G,QAAA,CAAS5G,OAAvB,CADyD;AAAA,QAEzD,IAAI,CAACA,OAAL,EAAc;AAAA,YACZ,MAAM,IAAIa,KAAJ,CAAU,gCAAV,CAAN,CADY;AAAA,SAF2C;AAAA,QAKzD,IAAI4E,WAAA,GAAc,KAAlB,CALyD;AAAA,QAMzD,IAAImB,QAAA,KAAa1B,KAAjB,EAAwB;AAAA,YACtB,OAAOO,WAAP;AADsB,SANiC;AAAA,QASzD,IAAIoB,OAAA,GAAU,KAAd,CATyD;AAAA,QAUzD,IAAI3B,KAAA,CAAMxF,aAAN,KAAwB,EAA5B,EAAgC;AAAA,YAC9B,IAAIwF,KAAA,CAAMpF,IAAN,KAAe8G,QAAA,CAAS9G,IAA5B,EAAkC;AAAA,gBAChCE,OAAA,CAAQ8G,SAAR,GAAoB5B,KAAA,CAAMpF,IAA1B,CADgC;AAAA,gBAEhC2F,WAAA,GAAc,IAAd,CAFgC;AAAA,aADJ;AAAA,SAAhC,MAKO;AAAA,YACL,IAAIP,KAAA,CAAMxF,aAAN,CAAoBgD,WAApB,CAAgC,KAAhC,EAAuC,CAAvC,MAA8C,CAAlD,EAAqD;AAAA,gBACnDjB,iBAAA,GAAoBzC,MAAA,CAAOyC,iBAAP,EAA0B,EAAEV,SAAA,EAAWjC,aAAb,EAA1B,CAApB,CADmD;AAAA,aADhD;AAAA,YAIL,IAAI8H,QAAA,CAAS9G,IAAT,KAAkBoF,KAAA,CAAMpF,IAA5B,EAAkC;AAAA,gBAChC+G,OAAA,GAAU,IAAV,CADgC;AAAA,gBAEhC,IAAI3B,KAAA,CAAMpF,IAAN,KAAeF,SAAnB,EAA8B;AAAA,oBAC5BI,OAAA,CAAQyE,WAAR,CAAoBzE,OAAA,CAAQ+G,UAA5B;AAD4B,iBAA9B,MAEO;AAAA,oBACL/G,OAAA,CAAQ0G,WAAR,GAAsBxB,KAAA,CAAMpF,IAA5B,CADK;AAAA,iBAJyB;AAAA,aAJ7B;AAAA,YAYL+G,OAAA,GAAU5B,cAAA,CAAeC,KAAf,EAAsBlF,OAAtB,EAA+B4G,QAAA,CAAS/G,QAAxC,EAAkDqF,KAAA,CAAMrF,QAAxD,EAAkE4B,iBAAlE,KAAwFoF,OAAlG,CAZK;AAAA,YAaLA,OAAA,GAAU7D,gBAAA,CAAiBhD,OAAjB,EAA0B4G,QAAA,CAASjH,UAAnC,EAA+CuF,KAAA,CAAMvF,UAArD,EAAiE8B,iBAAjE,KAAuFoF,OAAjG,CAbK;AAAA,YAcL,IAAI3B,KAAA,CAAMvF,UAAN,IAAoBuF,KAAA,CAAMvF,UAAN,CAAiBqH,WAAzC,EAAsD;AAAA,gBACpD9B,KAAA,CAAMvF,UAAN,CAAiBqH,WAAjB,CAA6BhH,OAA7B,EAAsCyB,iBAAtC,EAAyDyD,KAAA,CAAMxF,aAA/D,EAA8EwF,KAAA,CAAMvF,UAApF,EAAgGuF,KAAA,CAAMrF,QAAtG,EADoD;AAAA,aAdjD;AAAA,SAfkD;AAAA,QAiCzD,IAAIgH,OAAA,IAAW3B,KAAA,CAAMvF,UAAjB,IAA+BuF,KAAA,CAAMvF,UAAN,CAAiBsH,eAApD,EAAqE;AAAA,YACnE/B,KAAA,CAAMvF,UAAN,CAAiBsH,eAAjB,CAAiCjH,OAAjC,EAA0CkF,KAAA,CAAMvF,UAAhD,EAA4DiH,QAAA,CAASjH,UAArE,EADmE;AAAA,SAjCZ;AAAA,QAoCzDuF,KAAA,CAAMlF,OAAN,GAAgB4G,QAAA,CAAS5G,OAAzB,CApCyD;AAAA,QAqCzD,OAAOyF,WAAP,CArCyD;AAAA,KAA3D,C;IA4CA;AAAA;AAAA;AAAA;AAAA,QAAIyB,gBAAA,GAAmB,UAAShC,KAAT,EAAgBzD,iBAAhB,EAAiC;AAAA,QACtD,IAAI,CAACyD,KAAA,CAAMxF,aAAX,EAA0B;AAAA,YACxB,MAAM,IAAImB,KAAJ,CAAU,wBAAV,CAAN,CADwB;AAAA,SAD4B;AAAA,QAItD,OAAO;AAAA,YAML;AAAA;AAAA;AAAA;AAAA;AAAA,YAAAsG,MAAA,EAAQ,UAASC,YAAT,EAAqB;AAAA,gBAC3B,IAAIlC,KAAA,CAAMxF,aAAN,KAAwB0H,YAAA,CAAa1H,aAAzC,EAAwD;AAAA,oBACtD,MAAM,IAAImB,KAAJ,CAAU,2HAAV,CAAN,CADsD;AAAA,iBAD7B;AAAA,gBAI3B+E,SAAA,CAAUV,KAAV,EAAiBkC,YAAjB,EAA+B3F,iBAA/B,EAJ2B;AAAA,gBAK3ByD,KAAA,GAAQkC,YAAR,CAL2B;AAAA,aANxB;AAAA,YAkBL;AAAA;AAAA;AAAA;AAAA;AAAA,YAAApH,OAAA,EAASkF,KAAA,CAAMlF,OAlBV;AAAA,SAAP,CAJsD;AAAA,KAAxD,C;IAuqH,OAAA,CAAAC,CAAA,GAAI,UAASC,QAAT,EAAiD;AAAA,QAC9D,IAAI5H,UAAA,GAAa6H,SAAA,CAAU,CAAV,CAAjB,CAD8D;AAAA,QAE9D,IAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;AAAA,YAChC,MAAM,IAAI1G,KAAJ,EAAN,CADgC;AAAA,SAF4B;AAAA,QAK9D,IAAI4G,UAAA,GAAa,CAAjB,CAL8D;AAAA,QAM9D,IAAI9H,UAAA,IAAc,CAACA,UAAA,CAAWe,cAAX,CAA0B,eAA1B,CAAf,IAA6D,CAACF,KAAA,CAAMC,OAAN,CAAcd,UAAd,CAA9D,IAA2F,OAAOA,UAAP,KAAsB,QAArH,EAA+H;AAAA,YAC7H8H,UAAA,GAAa,CAAb,CAD6H;AAAA,SAA/H,MAEO;AAAA,YAEL;AAAA,YAAA9H,UAAA,GAAaC,SAAb,CAFK;AAAA,SARuD;AAAA,QAY9D,IAAIE,IAAA,GAAOF,SAAX,CAZ8D;AAAA,QAa9D,IAAIC,QAAA,GAAWD,SAAf,CAb8D;AAAA,QAc9D,IAAI8H,UAAA,GAAaF,SAAA,CAAUlH,MAA3B,CAd8D;AAAA,QAgB9D;AAAA,YAAIoH,UAAA,KAAeD,UAAA,GAAa,CAAhC,EAAmC;AAAA,YACjC,IAAIE,SAAA,GAAYH,SAAA,CAAUC,UAAV,CAAhB,CADiC;AAAA,YAEjC,IAAI,OAAOE,SAAP,KAAqB,QAAzB,EAAmC;AAAA,gBACjC7H,IAAA,GAAO6H,SAAP,CADiC;AAAA,aAAnC,MAEO,IAAIA,SAAA,KAAc/H,SAAd,IAA2B+H,SAAA,CAAUrH,MAAV,KAAqB,CAAhD,IAAqD,OAAOqH,SAAA,CAAU,CAAV,CAAP,KAAwB,QAAjF,EAA2F;AAAA,gBAChG7H,IAAA,GAAO6H,SAAA,CAAU,CAAV,CAAP,CADgG;AAAA,aAJjE;AAAA,SAhB2B;AAAA,QAwB9D,IAAI7H,IAAA,KAASF,SAAb,EAAwB;AAAA,YACtBC,QAAA,GAAW,EAAX,CADsB;AAAA,YAEtB,OAAO4H,UAAA,GAAaD,SAAA,CAAUlH,MAA9B,EAAsCmH,UAAA,EAAtC,EAAoD;AAAA,gBAClD,IAAIG,KAAA,GAAQJ,SAAA,CAAUC,UAAV,CAAZ,CADkD;AAAA,gBAElD,IAAIG,KAAA,KAAU,IAAV,IAAkBA,KAAA,KAAUhI,SAAhC,EAA2C;AAAA,oBACzC,SADyC;AAAA,iBAA3C,MAEO,IAAIY,KAAA,CAAMC,OAAN,CAAcmH,KAAd,CAAJ,EAA0B;AAAA,oBAC/B3H,cAAA,CAAesH,QAAf,EAAyBK,KAAzB,EAAgC/H,QAAhC,EAD+B;AAAA,iBAA1B,MAEA,IAAI+H,KAAA,CAAMlH,cAAN,CAAqB,eAArB,CAAJ,EAA2C;AAAA,oBAChDb,QAAA,CAASc,IAAT,CAAciH,KAAd,EADgD;AAAA,iBAA3C,MAEA;AAAA,oBACL/H,QAAA,CAASc,IAAT,CAAcnB,WAAA,CAAYoI,KAAZ,CAAd,EADK;AAAA,iBAR2C;AAAA,aAF9B;AAAA,SAxBsC;AAAA,QAuC9D,OAAO;AAAA,YAKL;AAAA;AAAA;AAAA;AAAA,YAAAlI,aAAA,EAAe6H,QALV;AAAA,YAUL;AAAA;AAAA;AAAA;AAAA,YAAA5H,UAAA,EAAYA,UAVP;AAAA,YAeL;AAAA;AAAA;AAAA;AAAA,YAAAE,QAAA,EAAUA,QAfL;AAAA,YAoBL;AAAA;AAAA;AAAA;AAAA,YAAAC,IAAA,EAAMA,IApBD;AAAA,YAyBL;AAAA;AAAA;AAAA;AAAA,YAAAE,OAAA,EAAS,IAzBJ;AAAA,SAAP,CAvC8D;AAAA,KAArD,C;IAuEA;AAAA;AAAA;AAAA,IAAAqH,OAAA,CAAAQ,GAAA,GAAM;AAAA,QAWf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAAC,MAAA,EAAQ,UAAS5C,KAAT,EAAgBzD,iBAAhB,EAAiC;AAAA,YACvCA,iBAAA,GAAoBD,6BAAA,CAA8BC,iBAA9B,CAApB,CADuC;AAAA,YAEvCiC,SAAA,CAAUwB,KAAV,EAAiBe,QAAA,CAASO,aAAT,CAAuB,KAAvB,CAAjB,EAAgD5G,SAAhD,EAA2D6B,iBAA3D,EAFuC;AAAA,YAGvC,OAAOyF,gBAAA,CAAiBhC,KAAjB,EAAwBzD,iBAAxB,CAAP,CAHuC;AAAA,SAX1B;AAAA,QA2Bf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAAsG,MAAA,EAAQ,UAASvD,UAAT,EAAqBU,KAArB,EAA4BzD,iBAA5B,EAA6C;AAAA,YACnDA,iBAAA,GAAoBD,6BAAA,CAA8BC,iBAA9B,CAApB,CADmD;AAAA,YAEnDiC,SAAA,CAAUwB,KAAV,EAAiBV,UAAjB,EAA6B5E,SAA7B,EAAwC6B,iBAAxC,EAFmD;AAAA,YAGnD,OAAOyF,gBAAA,CAAiBhC,KAAjB,EAAwBzD,iBAAxB,CAAP,CAHmD;AAAA,SA3BtC;AAAA,QA2Cf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAAqE,YAAA,EAAc,UAASkC,UAAT,EAAqB9C,KAArB,EAA4BzD,iBAA5B,EAA6C;AAAA,YACzDA,iBAAA,GAAoBD,6BAAA,CAA8BC,iBAA9B,CAApB,CADyD;AAAA,YAEzDiC,SAAA,CAAUwB,KAAV,EAAiB8C,UAAA,CAAWxD,UAA5B,EAAwCwD,UAAxC,EAAoDvG,iBAApD,EAFyD;AAAA,YAGzD,OAAOyF,gBAAA,CAAiBhC,KAAjB,EAAwBzD,iBAAxB,CAAP,CAHyD;AAAA,SA3C5C;AAAA,QA6Df;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAAwG,KAAA,EAAO,UAASC,OAAT,EAAkBhD,KAAlB,EAAyBiD,OAAzB,EAAgC;AAAA,YACrCA,OAAA,GAAU3G,6BAAA,CAA8B2G,OAA9B,CAAV,CADqC;AAAA,YAErCjD,KAAA,CAAMlF,OAAN,GAAgBkI,OAAhB,CAFqC;AAAA,YAGrCzB,yBAAA,CAA0ByB,OAA1B,EAAmChD,KAAnC,EAA0CiD,OAA1C,EAHqC;AAAA,YAIrC,OAAOjB,gBAAA,CAAiBhC,KAAjB,EAAwBiD,OAAxB,CAAP,CAJqC;AAAA,SA7DxB;AAAA,KAAN,C;IA0EA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAd,OAAA,CAAAe,WAAA,GAAc,YAAA;AAAA,QACvB,IAAIC,YAAA,GAAezI,SAAnB,CADuB;AAAA,QAEvB,IAAI0I,aAAA,GAAgB1I,SAApB,CAFuB;AAAA,QAGvB,IAAIT,MAAA,GAAS;AAAA,YAKX;AAAA;AAAA;AAAA;AAAA,YAAAoJ,UAAA,EAAY,YAAA;AAAA,gBACVD,aAAA,GAAgB1I,SAAhB,CADU;AAAA,gBAEVyI,YAAA,GAAezI,SAAf,CAFU;AAAA,aALD;AAAA,YAkBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAAT,MAAA,EAAQ,UAASqJ,MAAT,EAAiBC,WAAjB,EAA4B;AAAA,gBAClC,IAAIJ,YAAJ,EAAkB;AAAA,oBAChB,KAAK,IAAIhI,CAAA,GAAI,CAAR,CAAL,CAAgBA,CAAA,GAAImI,MAAA,CAAOlI,MAA3B,EAAmCD,CAAA,EAAnC,EAAwC;AAAA,wBACtC,IAAIgI,YAAA,CAAahI,CAAb,MAAoBmI,MAAA,CAAOnI,CAAP,CAAxB,EAAmC;AAAA,4BACjCiI,aAAA,GAAgB1I,SAAhB,CADiC;AAAA,yBADG;AAAA,qBADxB;AAAA,iBADgB;AAAA,gBAQlC,IAAI,CAAC0I,aAAL,EAAoB;AAAA,oBAClBA,aAAA,GAAgBG,WAAA,EAAhB,CADkB;AAAA,oBAElBJ,YAAA,GAAeG,MAAf,CAFkB;AAAA,iBARc;AAAA,gBAYlC,OAAOF,aAAP,CAZkC;AAAA,aAlBzB;AAAA,SAAb,CAHuB;AAAA,QAoCvB,OAAOnJ,MAAP,CApCuB;AAAA,KAAd,C;IA+CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAkI,OAAA,CAAAqB,aAAA,GAAgB,UAASC,YAAT,EAAuBC,YAAvB,EAAqCC,YAArC,EAAoE;AAAA,QAC7F,IAAIxJ,IAAA,GAAO,EAAX,CAD6F;AAAA,QAE7F,IAAIyJ,OAAA,GAAU,EAAd,CAF6F;AAAA,QAI7F,OAAO;AAAA,YAML;AAAA;AAAA;AAAA;AAAA;AAAA,YAAAA,OAAA,EAASA,OANJ;AAAA,YAYL;AAAA;AAAA;AAAA;AAAA;AAAA,YAAAC,GAAA,EAAK,UAASC,UAAT,EAAmB;AAAA,gBACtB,IAAIC,OAAA,GAAUD,UAAA,CAAWD,GAAX,CAAeJ,YAAf,CAAd,CADsB;AAAA,gBAEtB,IAAIO,UAAA,GAAaJ,OAAA,CAAQzC,KAAR,EAAjB,CAFsB;AAAA,gBAGtB,IAAId,QAAA,GAAW,CAAf,CAHsB;AAAA,gBAItB,KAAK,IAAIlF,CAAA,GAAI,CAAR,CAAL,CAAgBA,CAAA,GAAI2I,UAAA,CAAW1I,MAA/B,EAAuCD,CAAA,EAAvC,EAA4C;AAAA,oBAC1C,IAAI8I,MAAA,GAASH,UAAA,CAAW3I,CAAX,CAAb,CAD0C;AAAA,oBAE1C,IAAI+I,SAAA,GAAYH,OAAA,CAAQ5I,CAAR,CAAhB,CAF0C;AAAA,oBAG1C,IAAI+I,SAAA,KAAc/J,IAAA,CAAKkG,QAAL,CAAlB,EAAkC;AAAA,wBAChCuD,OAAA,CAAQzI,CAAR,IAAa6I,UAAA,CAAW3D,QAAX,CAAb,CADgC;AAAA,wBAEhCsD,YAAA,CAAaM,MAAb,EAAqBD,UAAA,CAAW3D,QAAX,CAArB,EAA2ClF,CAA3C,EAFgC;AAAA,wBAGhCkF,QAAA,GAHgC;AAAA,qBAAlC,MAIO;AAAA,wBACL,IAAIS,KAAA,GAAQ,KAAZ,CADK;AAAA,wBAEL,KAAK,IAAI7D,CAAA,GAAI,CAAR,CAAL,CAAgBA,CAAA,GAAI9C,IAAA,CAAKiB,MAAzB,EAAiC6B,CAAA,EAAjC,EAAsC;AAAA,4BACpC,IAAIkH,WAAA,GAAe,CAAA9D,QAAA,GAAWpD,CAAX,CAAD,GAAiB9C,IAAA,CAAKiB,MAAxC,CADoC;AAAA,4BAEpC,IAAIjB,IAAA,CAAKgK,WAAL,MAAsBD,SAA1B,EAAqC;AAAA,gCACnCN,OAAA,CAAQzI,CAAR,IAAa6I,UAAA,CAAWG,WAAX,CAAb,CADmC;AAAA,gCAEnCR,YAAA,CAAaG,UAAA,CAAW3I,CAAX,CAAb,EAA4B6I,UAAA,CAAWG,WAAX,CAA5B,EAAqDhJ,CAArD,EAFmC;AAAA,gCAGnCkF,QAAA,GAAW8D,WAAA,GAAc,CAAzB,CAHmC;AAAA,gCAInCrD,KAAA,GAAQ,IAAR,CAJmC;AAAA,gCAKnC,MALmC;AAAA,6BAFD;AAAA,yBAFjC;AAAA,wBAYL,IAAI,CAACA,KAAL,EAAY;AAAA,4BACV8C,OAAA,CAAQzI,CAAR,IAAauI,YAAA,CAAaO,MAAb,EAAqB9I,CAArB,CAAb,CADU;AAAA,yBAZP;AAAA,qBAPmC;AAAA,iBAJtB;AAAA,gBA4BtByI,OAAA,CAAQxI,MAAR,GAAiB0I,UAAA,CAAW1I,MAA5B,CA5BsB;AAAA,gBA6BtBjB,IAAA,GAAO4J,OAAP,CA7BsB;AAAA,aAZnB;AAAA,SAAP,CAJ6F;AAAA,KAApF,C;IA2DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA5B,OAAA,CAAAiC,eAAA,GAAkB,UAAS7H,iBAAT,EAA0B;AAAA,QACrDA,iBAAA,GAAoBD,6BAAA,CAA8BC,iBAA9B,CAApB,CADqD;AAAA,QAErDA,iBAAA,CAAkBT,uBAAlB,GAA4C,UAASuI,YAAT,EAAuBC,wBAAvB,EAA+C;AAAA,YACzF,OAAO,YAAA;AAAA,gBAEL;AAAA,gBAAAC,SAAA,CAAUC,cAAV,GAFK;AAAA,gBAGL,OAAOF,wBAAA,CAAyB1G,KAAzB,CAA+B,IAA/B,EAAqC0E,SAArC,CAAP,CAHK;AAAA,aAAP,CADyF;AAAA,SAA3F,CAFqD;AAAA,QASrD,IAAImC,eAAA,GAAkB,IAAtB,CATqD;AAAA,QAUrD,IAAIC,SAAJ,CAVqD;AAAA,QAWrD,IAAIC,OAAA,GAAU,KAAd,CAXqD;AAAA,QAYrD,IAAIC,WAAA,GAAc,EAAlB,CAZqD;AAAA,QAarD,IAAIC,eAAA,GAAkB,EAAtB,CAbqD;AAAA,QAerD;AAAA,YAAIC,QAAA,GAAW,YAAA;AAAA,YACbJ,SAAA,GAAYhK,SAAZ,CADa;AAAA,YAEb,IAAI,CAAC+J,eAAL,EAAsB;AAAA,gBACpB;AADoB,aAFT;AAAA,YAKbA,eAAA,GAAkB,KAAlB,CALa;AAAA,YAMb,KAAK,IAAItJ,CAAA,GAAI,CAAR,CAAL,CAAgBA,CAAA,GAAIyJ,WAAA,CAAYxJ,MAAhC,EAAwCD,CAAA,EAAxC,EAA6C;AAAA,gBAC3C,IAAI+G,YAAA,GAAe2C,eAAA,CAAgB1J,CAAhB,GAAnB,CAD2C;AAAA,gBAE3CyJ,WAAA,CAAYzJ,CAAZ,EAAe8G,MAAf,CAAsBC,YAAtB,EAF2C;AAAA,aANhC;AAAA,YAUbuC,eAAA,GAAkB,IAAlB,CAVa;AAAA,SAAf,CAfqD;AAAA,QA4BrD,IAAIF,SAAA,GAAY;AAAA,YAOd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAAC,cAAA,EAAgB,YAAA;AAAA,gBACd,IAAI,CAACE,SAAD,IAAc,CAACC,OAAnB,EAA4B;AAAA,oBAC1BD,SAAA,GAAYK,qBAAA,CAAsBD,QAAtB,CAAZ,CAD0B;AAAA,iBADd;AAAA,aAPF;AAAA,YAkBd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAAE,IAAA,EAAM,YAAA;AAAA,gBACJ,IAAIN,SAAJ,EAAe;AAAA,oBACbO,oBAAA,CAAqBP,SAArB,EADa;AAAA,oBAEbA,SAAA,GAAYhK,SAAZ,CAFa;AAAA,iBADX;AAAA,gBAKJiK,OAAA,GAAU,IAAV,CALI;AAAA,aAlBQ;AAAA,YA8Bd;AAAA;AAAA;AAAA;AAAA,YAAAO,MAAA,EAAQ,YAAA;AAAA,gBACNP,OAAA,GAAU,KAAV,CADM;AAAA,gBAENF,eAAA,GAAkB,IAAlB,CAFM;AAAA,gBAGNF,SAAA,CAAUC,cAAV,GAHM;AAAA,aA9BM;AAAA,YA2Cd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAA3B,MAAA,EAAQ,UAASvD,UAAT,EAAqB6F,sBAArB,EAA2C;AAAA,gBACjDP,WAAA,CAAYnJ,IAAZ,CAAiB0G,OAAA,CAAAQ,GAAA,CAAIE,MAAJ,CAAWvD,UAAX,EAAuB6F,sBAAA,EAAvB,EAAiD5I,iBAAjD,CAAjB,EADiD;AAAA,gBAEjDsI,eAAA,CAAgBpJ,IAAhB,CAAqB0J,sBAArB,EAFiD;AAAA,aA3CrC;AAAA,YAuDd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAAvE,YAAA,EAAc,UAASkC,UAAT,EAAqBqC,sBAArB,EAA2C;AAAA,gBACvDP,WAAA,CAAYnJ,IAAZ,CAAiB0G,OAAA,CAAAQ,GAAA,CAAI/B,YAAJ,CAAiBkC,UAAjB,EAA6BqC,sBAAA,EAA7B,EAAuD5I,iBAAvD,CAAjB,EADuD;AAAA,gBAEvDsI,eAAA,CAAgBpJ,IAAhB,CAAqB0J,sBAArB,EAFuD;AAAA,aAvD3C;AAAA,YAqEd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAApC,KAAA,EAAO,UAASjI,OAAT,EAAkBqK,sBAAlB,EAAwC;AAAA,gBAC7CP,WAAA,CAAYnJ,IAAZ,CAAiB0G,OAAA,CAAAQ,GAAA,CAAII,KAAJ,CAAUjI,OAAV,EAAmBqK,sBAAA,EAAnB,EAA6C5I,iBAA7C,CAAjB,EAD6C;AAAA,gBAE7CsI,eAAA,CAAgBpJ,IAAhB,CAAqB0J,sBAArB,EAF6C;AAAA,aArEjC;AAAA,YAiFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAAC,OAAA,EAAS,UAAStK,OAAT,EAAkBqK,sBAAlB,EAAwC;AAAA,gBAC/C,IAAInF,KAAA,GAAQmF,sBAAA,EAAZ,CAD+C;AAAA,gBAE/C3G,SAAA,CAAUwB,KAAV,EAAiBlF,OAAA,CAAQwE,UAAzB,EAAqCxE,OAArC,EAA8CyB,iBAA9C,EAF+C;AAAA,gBAG/CzB,OAAA,CAAQwE,UAAR,CAAmBC,WAAnB,CAA+BzE,OAA/B,EAH+C;AAAA,gBAI/C8J,WAAA,CAAYnJ,IAAZ,CAAiBuG,gBAAA,CAAiBhC,KAAjB,EAAwBzD,iBAAxB,CAAjB,EAJ+C;AAAA,gBAK/CsI,eAAA,CAAgBpJ,IAAhB,CAAqB0J,sBAArB,EAL+C;AAAA,aAjFnC;AAAA,SAAhB,CA5BqD;AAAA,QAqHrD,OAAOZ,SAAP,CArHqD;AAAA,KAA5C,C","file":"maquette.js","sourcesContent":["const NAMESPACE_SVG = 'http://www.w3.org/2000/svg';\n\n// Utilities\n\nlet emptyArray = [];\n\nlet extend = function(base, overrides) {\n  let result = {};\n  Object.keys(base).forEach(function(key) {\n    result[key] = base[key];\n  });\n  if (overrides) {\n    Object.keys(overrides).forEach(function(key) {\n      result[key] = overrides[key];\n    });\n  }\n  return result;\n};\n\n// Hyperscript helper functions\n\nlet toTextVNode = function(data) {\n  return {\n    vnodeSelector: '',\n    properties: undefined,\n    children: undefined,\n    text: (data === null || data === undefined) ? '' : data.toString(),\n    domNode: null\n  };\n};\n\nlet appendChildren = function(parentSelector, insertions, main) {\n  for (let i = 0; i < insertions.length; i++) {\n    let item = insertions[i];\n    if (Array.isArray(item)) {\n      appendChildren(parentSelector, item, main);\n    } else {\n      if (item !== null && item !== undefined) {\n        if (!item.hasOwnProperty('vnodeSelector')) {\n          item = toTextVNode(item);\n        }\n        main.push(item);\n      }\n    }\n  }\n};\n\n// Render helper functions\n\nlet missingTransition = function() {\n  throw new Error('Provide a transitions object to the projectionOptions to do animations');\n};\n\nlet defaultProjectionOptions = {\n  namespace: undefined,\n  eventHandlerInterceptor: undefined,\n  styleApplyer: function(domNode, styleName, value) {\n    // Provides a hook to add vendor prefixes for browsers that still need it.\n    domNode.style[styleName] = value;\n  },\n  transitions: {\n    enter: missingTransition,\n    exit: missingTransition\n  }\n};\n\nlet applyDefaultProjectionOptions = function(projectionOptions) {\n  return extend(defaultProjectionOptions, projectionOptions);\n};\n\nlet checkStyleValue = function(styleValue: Object) {\n  if (typeof styleValue !== 'string') {\n    throw new Error('Style values must be strings');\n  }\n}\nlet setProperties = function(domNode, properties, projectionOptions) {\n  if (!properties) {\n    return;\n  }\n  let eventHandlerInterceptor = projectionOptions.eventHandlerInterceptor;\n  let propNames = Object.keys(properties);\n  let propCount = propNames.length;\n  for (let i = 0; i < propCount; i++) {\n    let propName = propNames[i];\n    var propValue = properties[propName];\n    if (propName === 'class' || propName === 'className' || propName === 'classList') {\n      throw new Error('Property ' + propName + ' is not supported, use classes.');\n    } else if (propName === 'classes') {\n      // object with string keys and boolean values\n      let classNames = Object.keys(propValue);\n      let classNameCount = classNames.length;\n      for (let j = 0; j < classNameCount; j++) {\n        let className = classNames[j];\n        if (propValue[className]) {\n          domNode.classList.add(className);\n        }\n      }\n    } else if (propName === 'styles') {\n      // object with string keys and string (!) values\n      let styleNames = Object.keys(propValue);\n      let styleCount = styleNames.length;\n      for (let j = 0; j < styleCount; j++) {\n        let styleName = styleNames[j];\n        let styleValue = propValue[styleName];\n        if (styleValue) {\n          checkStyleValue(styleValue);\n          projectionOptions.styleApplyer(domNode, styleName, styleValue);\n        }\n      }\n    } else if (propName === 'key') {\n      continue;\n    } else if (propValue === null || propValue === undefined) {\n      continue;\n    } else {\n      let type = typeof propValue;\n      if (type === 'function') {\n        if (eventHandlerInterceptor && (propName.lastIndexOf('on', 0) === 0)) { // lastIndexOf(,0)===0 -> startsWith\n          propValue = eventHandlerInterceptor(propName, propValue, domNode, properties); // intercept eventhandlers\n          if (propName === 'oninput') {\n            (function() {\n              // record the evt.target.value, because IE sometimes does a requestAnimationFrame between changing value and running oninput\n              let oldPropValue = propValue;\n              propValue = function(evt) {\n                evt.target['oninput-value'] = evt.target.value;\n                oldPropValue.apply(this, [evt]);\n              };\n            } ());\n          }\n        }\n        domNode[propName] = propValue;\n      } else if (type === 'string' && propName !== 'value') {\n        domNode.setAttribute(propName, propValue);\n      } else {\n        domNode[propName] = propValue;\n      }\n    }\n  }\n};\n\nlet updateProperties = function(domNode, previousProperties, properties, projectionOptions) {\n  if (!properties) {\n    return;\n  }\n  let propertiesUpdated = false;\n  let propNames = Object.keys(properties);\n  let propCount = propNames.length;\n  for (let i = 0; i < propCount; i++) {\n    let propName = propNames[i];\n    // assuming that properties will be nullified instead of missing is by design\n    let propValue = properties[propName];\n    let previousValue = previousProperties[propName];\n    if (propName === 'classes') {\n      let classList = domNode.classList;\n      let classNames = Object.keys(propValue);\n      let classNameCount = classNames.length;\n      for (let j = 0; j < classNameCount; j++) {\n        let className = classNames[j];\n        let on = !!propValue[className];\n        let previousOn = !!previousValue[className];\n        if (on === previousOn) {\n          continue;\n        }\n        propertiesUpdated = true;\n        if (on) {\n          classList.add(className);\n        } else {\n          classList.remove(className);\n        }\n      }\n    } else if (propName === 'styles') {\n      let styleNames = Object.keys(propValue);\n      let styleCount = styleNames.length;\n      for (let j = 0; j < styleCount; j++) {\n        let styleName = styleNames[j];\n        let newStyleValue = propValue[styleName];\n        let oldStyleValue = previousValue[styleName];\n        if (newStyleValue === oldStyleValue) {\n          continue;\n        }\n        propertiesUpdated = true;\n        if (newStyleValue) {\n          checkStyleValue(newStyleValue);\n          projectionOptions.styleApplyer(domNode, styleName, newStyleValue);\n        } else {\n          projectionOptions.styleApplyer(domNode, styleName, '');\n        }\n      }\n    } else {\n      if (!propValue && typeof previousValue === 'string') {\n        propValue = '';\n      }\n      if (propName === 'value') { // value can be manipulated by the user directly and using event.preventDefault() is not an option\n        if (domNode[propName] !== propValue && domNode['oninput-value'] !== propValue) {\n          domNode[propName] = propValue; // Reset the value, even if the virtual DOM did not change\n          domNode['oninput-value'] = undefined;\n        } // else do not update the domNode, otherwise the cursor position would be changed\n        if (propValue !== previousValue) {\n          propertiesUpdated = true;\n        }\n      } else if (propValue !== previousValue) {\n        let type = typeof propValue;\n        if (type === 'function') {\n          throw new Error('Functions may not be updated on subsequent renders (property: ' + propName +\n            '). Hint: declare event handler functions outside the render() function.');\n        }\n        if (type === 'string') {\n          domNode.setAttribute(propName, propValue);\n        } else {\n          if (domNode[propName] !== propValue) { // Comparison is here for side-effects in Edge with scrollLeft and scrollTop\n            domNode[propName] = propValue;\n          }\n        }\n        propertiesUpdated = true;\n      }\n    }\n  }\n  return propertiesUpdated;\n};\n\nlet addChildren = function(domNode, children, projectionOptions) {\n  if (!children) {\n    return;\n  }\n  for (let i = 0; i < children.length; i++) {\n    createDom(children[i], domNode, undefined, projectionOptions);\n  }\n};\n\nlet same = function(vnode1, vnode2) {\n  if (vnode1.vnodeSelector !== vnode2.vnodeSelector) {\n    return false;\n  }\n  if (vnode1.properties && vnode2.properties) {\n    return vnode1.properties.key === vnode2.properties.key;\n  }\n  return !vnode1.properties && !vnode2.properties;\n};\n\nlet findIndexOfChild = function(children, sameAs, start) {\n  if (sameAs.vnodeSelector !== '') {\n    // Never scan for text-nodes\n    for (let i = start; i < children.length; i++) {\n      if (same(children[i], sameAs)) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\nlet nodeAdded = function(vNode, transitions) {\n  if (vNode.properties) {\n    let enterAnimation = vNode.properties.enterAnimation;\n    if (enterAnimation) {\n      if (typeof enterAnimation === 'function') {\n        enterAnimation(vNode.domNode, vNode.properties);\n      } else {\n        transitions.enter(vNode.domNode, vNode.properties, enterAnimation);\n      }\n    }\n  }\n};\n\nlet nodeToRemove = function(vNode, transitions) {\n  let domNode = vNode.domNode;\n  if (vNode.properties) {\n    let exitAnimation = vNode.properties.exitAnimation;\n    if (exitAnimation) {\n      domNode.style.pointerEvents = 'none';\n      let removeDomNode = function() {\n        if (domNode.parentNode) {\n          domNode.parentNode.removeChild(domNode);\n        }\n      };\n      if (typeof exitAnimation === 'function') {\n        exitAnimation(domNode, removeDomNode, vNode.properties);\n        return;\n      } else {\n        transitions.exit(vNode.domNode, vNode.properties, exitAnimation, removeDomNode);\n        return;\n      }\n    }\n  }\n  if (domNode.parentNode) {\n    domNode.parentNode.removeChild(domNode);\n  }\n};\n\nlet checkDistinguishable = function(childNodes, indexToCheck, parentVNode, operation) {\n  let childNode = childNodes[indexToCheck];\n  if (childNode.vnodeSelector === '') {\n    return; // Text nodes need not be distinguishable\n  }\n  let key = childNode.properties ? childNode.properties.key : undefined;\n  if (!key) { // A key is just assumed to be unique\n    for (let i = 0; i < childNodes.length; i++) {\n      if (i !== indexToCheck) {\n        let node = childNodes[i];\n        if (same(node, childNode)) {\n          if (operation === 'added') {\n            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' +\n              'added, but there is now more than one. You must add unique key properties to make them distinguishable.');\n          } else {\n            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' +\n              'removed, but there were more than one. You must add unique key properties to make them distinguishable.');\n          }\n        }\n      }\n    }\n  }\n};\n\nlet updateChildren = function(vnode, domNode, oldChildren, newChildren, projectionOptions) {\n  if (oldChildren === newChildren) {\n    return false;\n  }\n  oldChildren = oldChildren || emptyArray;\n  newChildren = newChildren || emptyArray;\n  let oldChildrenLength = oldChildren.length;\n  let newChildrenLength = newChildren.length;\n  let transitions = projectionOptions.transitions;\n\n  let oldIndex = 0;\n  let newIndex = 0;\n  let i;\n  let textUpdated = false;\n  while (newIndex < newChildrenLength) {\n    let oldChild = (oldIndex < oldChildrenLength) ? oldChildren[oldIndex] : undefined;\n    let newChild = newChildren[newIndex];\n    if (oldChild !== undefined && same(oldChild, newChild)) {\n      textUpdated = updateDom(oldChild, newChild, projectionOptions) || textUpdated;\n      oldIndex++;\n    } else {\n      let findOldIndex = findIndexOfChild(oldChildren, newChild, oldIndex + 1);\n      if (findOldIndex >= 0) {\n        // Remove preceding missing children\n        for (i = oldIndex; i < findOldIndex; i++) {\n          nodeToRemove(oldChildren[i], transitions);\n          checkDistinguishable(oldChildren, i, vnode, 'removed');\n        }\n        textUpdated = updateDom(oldChildren[findOldIndex], newChild, projectionOptions) || textUpdated;\n        oldIndex = findOldIndex + 1;\n      } else {\n        // New child\n        createDom(newChild, domNode, (oldIndex < oldChildrenLength) ? oldChildren[oldIndex].domNode : undefined, projectionOptions);\n        nodeAdded(newChild, transitions);\n        checkDistinguishable(newChildren, newIndex, vnode, 'added');\n      }\n    }\n    newIndex++;\n  }\n  if (oldChildrenLength > oldIndex) {\n    // Remove child fragments\n    for (i = oldIndex; i < oldChildrenLength; i++) {\n      nodeToRemove(oldChildren[i], transitions);\n      checkDistinguishable(oldChildren, i, vnode, 'removed');\n    }\n  }\n  return textUpdated;\n};\n\nvar createDom = function(vnode, parentNode, insertBefore, projectionOptions) {\n  let domNode, i, c, start = 0, type, found;\n  let vnodeSelector = vnode.vnodeSelector;\n  if (vnodeSelector === '') {\n    domNode = vnode.domNode = document.createTextNode(vnode.text);\n    if (insertBefore !== undefined) {\n      parentNode.insertBefore(domNode, insertBefore);\n    } else {\n      parentNode.appendChild(domNode);\n    }\n  } else {\n    for (i = 0; i <= vnodeSelector.length; ++i) {\n      c = vnodeSelector.charAt(i);\n      if (i === vnodeSelector.length || c === '.' || c === '#') {\n        type = vnodeSelector.charAt(start - 1);\n        found = vnodeSelector.slice(start, i);\n        if (type === '.') {\n          domNode.classList.add(found);\n        } else if (type === '#') {\n          domNode.id = found;\n        } else {\n          if (found === 'svg') {\n            projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\n          }\n          if (projectionOptions.namespace !== undefined) {\n            domNode = vnode.domNode = document.createElementNS(projectionOptions.namespace, found);\n          } else {\n            domNode = vnode.domNode = document.createElement(found);\n          }\n          if (insertBefore !== undefined) {\n            parentNode.insertBefore(domNode, insertBefore);\n          } else {\n            parentNode.appendChild(domNode);\n          }\n        }\n        start = i + 1;\n      }\n    }\n    initPropertiesAndChildren(domNode, vnode, projectionOptions);\n  }\n};\n\nvar initPropertiesAndChildren = function(domNode, vnode, projectionOptions) {\n  addChildren(domNode, vnode.children, projectionOptions); // children before properties, needed for value property of <select>.\n  if (vnode.text) {\n    domNode.textContent = vnode.text;\n  }\n  setProperties(domNode, vnode.properties, projectionOptions);\n  if (vnode.properties && vnode.properties.afterCreate) {\n    vnode.properties.afterCreate(domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children);\n  }\n};\n\nvar updateDom = function(previous, vnode, projectionOptions) {\n  let domNode = previous.domNode;\n  if (!domNode) {\n    throw new Error('previous node was not rendered');\n  }\n  let textUpdated = false;\n  if (previous === vnode) {\n    return textUpdated; // we assume that nothing has changed\n  }\n  let updated = false;\n  if (vnode.vnodeSelector === '') {\n    if (vnode.text !== previous.text) {\n      domNode.nodeValue = vnode.text;\n      textUpdated = true;\n    }\n  } else {\n    if (vnode.vnodeSelector.lastIndexOf('svg', 0) === 0) { // lastIndexOf(needle,0)===0 means StartsWith\n      projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\n    }\n    if (previous.text !== vnode.text) {\n      updated = true;\n      if (vnode.text === undefined) {\n        domNode.removeChild(domNode.firstChild); // the only textnode presumably\n      } else {\n        domNode.textContent = vnode.text;\n      }\n    }\n    updated = updateChildren(vnode, domNode, previous.children, vnode.children, projectionOptions) || updated;\n    updated = updateProperties(domNode, previous.properties, vnode.properties, projectionOptions) || updated;\n    if (vnode.properties && vnode.properties.afterUpdate) {\n      vnode.properties.afterUpdate(domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children);\n    }\n  }\n  if (updated && vnode.properties && vnode.properties.updateAnimation) {\n    vnode.properties.updateAnimation(domNode, vnode.properties, previous.properties);\n  }\n  vnode.domNode = previous.domNode;\n  return textUpdated;\n};\n\n/**\n * Represents a {@link VNode} tree that has been rendered to a real DOM tree.\n * @interface Projection\n */\nlet createProjection = function(vnode, projectionOptions) {\n  if (!vnode.vnodeSelector) {\n    throw new Error('Invalid vnode argument');\n  }\n  return {\n    /**\n     * Updates the projection with the new virtual DOM tree.\n     * @param {VNode} updatedVnode - The updated virtual DOM tree. Note: The selector for the root of the tree must remain constant.\n     * @memberof Projection#\n     */\n    update: function(updatedVnode) {\n      if (vnode.vnodeSelector !== updatedVnode.vnodeSelector) {\n        throw new Error('The selector for the root VNode may not be changed. (consider using dom.merge and add one extra level to the virtual DOM)');\n      }\n      updateDom(vnode, updatedVnode, projectionOptions);\n      vnode = updatedVnode;\n    },\n    /**\n     * The DOM node that is used as the root of this {@link Projection}.\n     * @type {Element}\n     * @memberof Projection#\n     */\n    domNode: vnode.domNode\n  };\n};\n\n// Declaration of interfaces and callbacks, before the @exports maquette\n\n/**\n * A virtual representation of a DOM Node. Maquette assumes that {@link VNode} objects are never modified externally.\n * Instances of {@link VNode} can be created using {@link module:maquette.h}.\n * @interface VNode\n */\n\n/**\n * A CalculationCache object remembers the previous outcome of a calculation along with the inputs.\n * On subsequent calls the previous outcome is returned if the inputs are identical.\n * This object can be used to bypass both rendering and diffing of a virtual DOM subtree.\n * Instances of {@link CalculationCache} can be created using {@link module:maquette.createCache}.\n * @interface CalculationCache\n */\n\n/**\n * Keeps an array of result objects synchronized with an array of source objects.\n * Mapping provides a {@link Mapping#map} function that updates the {@link Mapping#results}.\n * The {@link Mapping#map} function can be called multiple times and the results will get created, removed and updated accordingly.\n * A {@link Mapping} can be used to keep an array of components (objects with a `renderMaquette` method) synchronized with an array of data.\n * Instances of {@link Mapping} can be created using {@link module:maquette.createMapping}.\n * @interface Mapping\n */\n\n/**\n * Used to create and update the DOM.\n * Use {@link Projector#append}, {@link Projector#merge}, {@link Projector#insertBefore} and {@link Projector#replace}\n * to create the DOM.\n * The `renderMaquetteFunction` callbacks will be called immediately to create the DOM. Afterwards, these functions\n * will be called again to update the DOM on the next animation-frame after:\n *\n *  - The {@link Projector#scheduleRender} function  was called\n *  - An event handler (like `onclick`) on a rendered {@link VNode} was called.\n *\n * The projector stops when {@link Projector#stop} is called or when an error is thrown during rendering.\n * It is possible to use `window.onerror` to handle these errors.\n * Instances of {@link Projector} can be created using {@link module:maquette.createProjector}.\n * @interface Projector\n */\n\n/**\n * @callback enterAnimationCallback\n * @param {Element} element - Element that was just added to the DOM.\n * @param {Object} properties - The properties object that was supplied to the {@link module:maquette.h} method\n */\n\n/**\n * @callback exitAnimationCallback\n * @param {Element} element - Element that ought to be removed from to the DOM.\n * @param {function(Element)} removeElement - Function that removes the element from the DOM.\n * This argument is supplied purely for convenience.\n * You may use this function to remove the element when the animation is done.\n * @param {Object} properties - The properties object that was supplied to the {@link module:maquette.h} method that rendered this {@link VNode}\n * the previous time.\n */\n\n/**\n * @callback updateAnimationCallback\n * @param {Element} element - Element that was modified in the DOM.\n * @param {Object} properties - The last properties object that was supplied to the {@link module:maquette.h} method\n * @param {Object} previousProperties - The previous properties object that was supplied to the {@link module:maquette.h} method\n */\n\n/**\n * @callback afterCreateCallback\n * @param {Element} element - The element that was added to the DOM.\n * @param {Object} projectionOptions - The projection options that were used see {@link module:maquette.createProjector}.\n * @param {string} vnodeSelector - The selector passed to the {@link module:maquette.h} function.\n * @param {Object} properties - The properties passed to the {@link module:maquette.h} function.\n * @param {VNode[]} children - The children that were created.\n * @param {Object} properties - The last properties object that was supplied to the {@link module:maquette.h} method\n * @param {Object} previousProperties - The previous properties object that was supplied to the {@link module:maquette.h} method\n */\n\n/**\n * @callback afterUpdateCallback\n * @param {Element} element - The element that may have been updated in the DOM.\n * @param {Object} projectionOptions - The projection options that were used see {@link module:maquette.createProjector}.\n * @param {string} vnodeSelector - The selector passed to the {@link module:maquette.h} function.\n * @param {Object} properties - The properties passed to the {@link module:maquette.h} function.\n * @param {VNode[]} children - The children for this node.\n */\n\n/**\n * Contains simple low-level utility functions to manipulate the real DOM. The singleton instance is available under {@link module:maquette.dom}.\n * @interface MaquetteDom\n */\n\n/**\n * The `h` method is used to create a virtual DOM node.\n * This function is largely inspired by the mercuryjs and mithril frameworks.\n * The `h` stands for (virtual) hyperscript.\n *\n * @param {string} selector - Contains the tagName, id and fixed css classnames in CSS selector format.\n * It is formatted as follows: `tagname.cssclass1.cssclass2#id`.\n * @param {Object} [properties] - An object literal containing properties that will be placed on the DOM node.\n * @param {function} properties.<b>*</b> - Properties with functions values like `onclick:handleClick` are registered as event handlers\n * @param {String} properties.<b>*</b> - Properties with string values, like `href:'/'` are used as attributes\n * @param {object} properties.<b>*</b> - All non-string values are put on the DOM node as properties\n * @param {Object} properties.key - Used to uniquely identify a DOM node among siblings.\n * A key is required when there are more children with the same selector and these children are added or removed dynamically.\n * @param {Object} properties.classes - An object literal like `{important:true}` which allows css classes, like `important` to be added and removed\n * dynamically.\n * @param {Object} properties.styles - An object literal like `{height:'100px'}` which allows styles to be changed dynamically. All values must be strings.\n * @param {(string|enterAnimationCallback)} properties.enterAnimation - The animation to perform when this node is added to an already existing parent.\n * {@link http://maquettejs.org/docs/animations.html|More about animations}.\n * When this value is a string, you must pass a `projectionOptions.transitions` object when creating the projector {@link module:maquette.createProjector}.\n * @param {(string|exitAnimationCallback)} properties.exitAnimation - The animation to perform when this node is removed while its parent remains.\n * When this value is a string, you must pass a `projectionOptions.transitions` object when creating the projector {@link module:maquette.createProjector}.\n * {@link http://maquettejs.org/docs/animations.html|More about animations}.\n * @param {updateAnimationCallback} properties.updateAnimation - The animation to perform when the properties of this node change.\n * This also includes attributes, styles, css classes. This callback is also invoked when node contains only text and that text changes.\n * {@link http://maquettejs.org/docs/animations.html|More about animations}.\n * @param {afterCreateCallback} properties.afterCreate - Callback that is executed after this node is added to the DOM. Childnodes and properties have\n * already been applied.\n * @param {afterUpdateCallback} properties.afterUpdate - Callback that is executed every time this node may have been updated. Childnodes and properties\n * have already been updated.\n * @param {Object[]} [children] - An array of virtual DOM nodes to add as child nodes.\n * This array may contain nested arrays, `null` or `undefined` values.\n * Nested arrays are flattened, `null` and `undefined` will be skipped.\n *\n * @returns {VNode} A VNode object, used to render a real DOM later.\n * NOTE: There are {@link http://maquettejs.org/docs/rules.html|three basic rules} you should be aware of when updating the virtual DOM.\n */\nexport let h = function(selector /*, ...propertiesAndChildren */) {\n  let properties = arguments[1];\n  if (typeof selector !== 'string') {\n    throw new Error();\n  }\n  let childIndex = 1;\n  if (properties && !properties.hasOwnProperty('vnodeSelector') && !Array.isArray(properties) && typeof properties === 'object') {\n    childIndex = 2;\n  } else {\n    // Optional properties argument was omitted\n    properties = undefined;\n  }\n  let text = undefined;\n  let children = undefined;\n  let argsLength = arguments.length;\n  // Recognize a common special case where there is only a single text node\n  if (argsLength === childIndex + 1) {\n    let onlyChild = arguments[childIndex];\n    if (typeof onlyChild === 'string') {\n      text = onlyChild;\n    } else if (onlyChild !== undefined && onlyChild.length === 1 && typeof onlyChild[0] === 'string') {\n      text = onlyChild[0];\n    }\n  }\n  if (text === undefined) {\n    children = [];\n    for (; childIndex < arguments.length; childIndex++) {\n      let child = arguments[childIndex];\n      if (child === null || child === undefined) {\n        continue;\n      } else if (Array.isArray(child)) {\n        appendChildren(selector, child, children);\n      } else if (child.hasOwnProperty('vnodeSelector')) {\n        children.push(child);\n      } else {\n        children.push(toTextVNode(child));\n      }\n    }\n  }\n  return {\n    /**\n     * The CSS selector containing tagname, css classnames and id. An empty string is used to denote a text node.\n     * @memberof VNode#\n     */\n    vnodeSelector: selector,\n    /**\n     * Object containing attributes, properties, event handlers and more @see module:maquette.h\n     * @memberof VNode#\n     */\n    properties: properties,\n    /**\n     * Array of VNodes to be used as children. This array is already flattened.\n     * @memberof VNode#\n     */\n    children: children,\n    /**\n     * Used in a special case when a VNode only has one childnode which is a textnode. Only used in combination with children === undefined.\n     * @memberof VNode#\n     */\n    text: text,\n    /**\n     * Used by maquette to store the domNode that was produced from this {@link VNode}.\n     * @memberof VNode#\n     */\n    domNode: null\n  };\n};\n\n/**\n * @type MaquetteDom\n */\nexport let dom = {\n  /**\n   * Creates a real DOM tree from a {@link VNode}. The {@link Projection} object returned will contain the resulting DOM Node under\n   * the {@link Projection#domNode} property.\n   * This is a low-level method. Users wil typically use a {@link Projector} instead.\n   * @memberof MaquetteDom#\n   * @param {VNode} vnode - The root of the virtual DOM tree that was created using the {@link module:maquette.h} function. NOTE: {@link VNode}\n   * objects may only be rendered once.\n   * @param {Object} projectionOptions - Options to be used to create and update the projection, see {@link module:maquette.createProjector}.\n   * @returns {Projection} The {@link Projection} which contains the DOM Node that was created.\n   */\n  create: function(vnode, projectionOptions) {\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n    createDom(vnode, document.createElement('div'), undefined, projectionOptions);\n    return createProjection(vnode, projectionOptions);\n  },\n\n  /**\n   * Appends a new childnode to the DOM which is generated from a {@link VNode}.\n   * This is a low-level method. Users wil typically use a {@link Projector} instead.\n   * @memberof MaquetteDom#\n   * @param {Element} parentNode - The parent node for the new childNode.\n   * @param {VNode} vnode - The root of the virtual DOM tree that was created using the {@link module:maquette.h} function. NOTE: {@link VNode}\n   * objects may only be rendered once.\n   * @param {Object} projectionOptions - Options to be used to create and update the projection, see {@link module:maquette.createProjector}.\n   * @returns {Projection} The {@link Projection} that was created.\n   */\n  append: function(parentNode, vnode, projectionOptions) {\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n    createDom(vnode, parentNode, undefined, projectionOptions);\n    return createProjection(vnode, projectionOptions);\n  },\n\n  /**\n   * Inserts a new DOM node which is generated from a {@link VNode}.\n   * This is a low-level method. Users wil typically use a {@link Projector} instead.\n   * @memberof MaquetteDom#\n   * @param {Element} beforeNode - The node that the DOM Node is inserted before.\n   * @param {VNode} vnode - The root of the virtual DOM tree that was created using the {@link module:maquette.h} function.\n   * NOTE: {@link VNode} objects may only be rendered once.\n   * @param {Object} projectionOptions - Options to be used to create and update the projection, see {@link module:maquette.createProjector}.\n   * @returns {Projection} The {@link Projection} that was created.\n   */\n  insertBefore: function(beforeNode, vnode, projectionOptions) {\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n    createDom(vnode, beforeNode.parentNode, beforeNode, projectionOptions);\n    return createProjection(vnode, projectionOptions);\n  },\n\n  /**\n   * Merges a new DOM node which is generated from a {@link VNode} with an existing DOM Node.\n   * This means that the virtual DOM and real DOM have one overlapping element.\n   * Therefore the selector for the root {@link VNode} will be ignored, but its properties and children will be applied to the Element provided\n   * This is a low-level method. Users wil typically use a {@link Projector} instead.\n   * @memberof MaquetteDom#\n   * @param {Element} domNode - The existing element to adopt as the root of the new virtual DOM. Existing attributes and childnodes are preserved.\n   * @param {VNode} vnode - The root of the virtual DOM tree that was created using the {@link module:maquette.h} function. NOTE: {@link VNode} objects\n   * may only be rendered once.\n   * @param {Object} projectionOptions - Options to be used to create and update the projection, see {@link module:maquette.createProjector}.\n   * @returns {Projection} The {@link Projection} that was created.\n   */\n  merge: function(element, vnode, options) {\n    options = applyDefaultProjectionOptions(options);\n    vnode.domNode = element;\n    initPropertiesAndChildren(element, vnode, options);\n    return createProjection(vnode, options);\n  }\n};\n\n/**\n * Creates a {@link CalculationCache} object, useful for caching {@link VNode} trees.\n * In practice, caching of {@link VNode} trees is not needed, because achieving 60 frames per second is almost never a problem.\n * @returns {CalculationCache}\n */\nexport let createCache = function() {\n  let cachedInputs = undefined;\n  let cachedOutcome = undefined;\n  let result = {\n    /**\n     * Manually invalidates the cached outcome.\n     * @memberof CalculationCache#\n     */\n    invalidate: function() {\n      cachedOutcome = undefined;\n      cachedInputs = undefined;\n    },\n    /**\n     * If the inputs array matches the inputs array from the previous invocation, this method returns the result of the previous invocation.\n     * Otherwise, the calculation function is invoked and its result is cached and returned.\n     * Objects in the inputs array are compared using ===.\n     * @param {Object[]} inputs - Array of objects that are to be compared using === with the inputs from the previous invocation.\n     * These objects are assumed to be immutable primitive values.\n     * @param {function} calculation - Function that takes zero arguments and returns an object (A {@link VNode} assumably) that can be cached.\n     * @memberof CalculationCache#\n     */\n    result: function(inputs, calculation) {\n      if (cachedInputs) {\n        for (let i = 0; i < inputs.length; i++) {\n          if (cachedInputs[i] !== inputs[i]) {\n            cachedOutcome = undefined;\n          }\n        }\n      }\n      if (!cachedOutcome) {\n        cachedOutcome = calculation();\n        cachedInputs = inputs;\n      }\n      return cachedOutcome;\n    }\n  };\n  return result;\n};\n\n/**\n * Creates a {@link Mapping} instance that keeps an array of result objects synchronized with an array of source objects.\n * @param {function} getSourceKey - `function(source)` that must return a key to identify each source object. The result must eather be a string or a number.\n * @param {function} createResult - `function(source, index)` that must create a new result object from a given source. This function is identical\n * argument of `Array.map`.\n * @param {function} updateResult - `function(source, target, index)` that updates a result to an updated source.\n * @returns {Mapping}\n */\nexport let createMapping = function(getSourceKey, createResult, updateResult /*, deleteTarget*/) {\n  let keys = [];\n  let results = [];\n\n  return {\n    /**\n     * The array of results. These results will be synchronized with the latest array of sources that were provided using {@link Mapping#map}.\n     * @type {Object[]}\n     * @memberof Mapping#\n     */\n    results: results,\n    /**\n     * Maps a new array of sources and updates {@link Mapping#results}.\n     * @param {Object[]} newSources - The new array of sources.\n     * @memberof Mapping#\n     */\n    map: function(newSources) {\n      let newKeys = newSources.map(getSourceKey);\n      let oldTargets = results.slice();\n      let oldIndex = 0;\n      for (let i = 0; i < newSources.length; i++) {\n        let source = newSources[i];\n        let sourceKey = newKeys[i];\n        if (sourceKey === keys[oldIndex]) {\n          results[i] = oldTargets[oldIndex];\n          updateResult(source, oldTargets[oldIndex], i);\n          oldIndex++;\n        } else {\n          let found = false;\n          for (let j = 1; j < keys.length; j++) {\n            let searchIndex = (oldIndex + j) % keys.length;\n            if (keys[searchIndex] === sourceKey) {\n              results[i] = oldTargets[searchIndex];\n              updateResult(newSources[i], oldTargets[searchIndex], i);\n              oldIndex = searchIndex + 1;\n              found = true;\n              break;\n            }\n          }\n          if (!found) {\n            results[i] = createResult(source, i);\n          }\n        }\n      }\n      results.length = newSources.length;\n      keys = newKeys;\n    }\n  };\n};\n\n/**\n * Creates a {@link Projector} instance using the provided projectionOptions.\n * @param {Object} [projectionOptions] - Options that influence how the DOM is rendered and updated.\n * @param {Object} projectionOptions.transitions - A transition strategy to invoke when\n * enterAnimation and exitAnimation properties are provided as strings.\n * The module `cssTransitions` in the provided `css-transitions.js` file provides such a strategy.\n * A transition strategy is not needed when enterAnimation and exitAnimation properties are provided as functions.\n * @returns {Projector}\n */\nexport let createProjector = function(projectionOptions) {\n  projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n  projectionOptions.eventHandlerInterceptor = function(propertyName, functionPropertyArgument) {\n    return function() {\n      // intercept function calls (event handlers) to do a render afterwards.\n      projector.scheduleRender();\n      return functionPropertyArgument.apply(this, arguments);\n    };\n  };\n  let renderCompleted = true;\n  let scheduled;\n  let stopped = false;\n  let projections = [];\n  let renderFunctions = []; // matches the projections array\n\n  let doRender = function() {\n    scheduled = undefined;\n    if (!renderCompleted) {\n      return; // The last render threw an error, it should be logged in the browser console.\n    }\n    renderCompleted = false;\n    for (let i = 0; i < projections.length; i++) {\n      let updatedVnode = renderFunctions[i]();\n      projections[i].update(updatedVnode);\n    }\n    renderCompleted = true;\n  };\n\n  var projector = {\n    /**\n     * Instructs the projector to re-render to the DOM at the next animation-frame using the registered `renderMaquette` functions.\n     * This method is automatically called for you when event-handlers that are registered in the {@link VNode}s are invoked.\n     * You need to call this method for instance when timeouts expire or AJAX responses arrive.\n     * @memberof Projector#\n     */\n    scheduleRender: function() {\n      if (!scheduled && !stopped) {\n        scheduled = requestAnimationFrame(doRender);\n      }\n    },\n    /**\n     * Stops the projector. This means that the registered `renderMaquette` functions will not be called anymore.\n     * Note that calling {@link Projector#stop} is not mandatory. A projector is a passive object that will get garbage collected as usual\n     * if it is no longer in scope.\n     * @memberof Projector#\n     */\n    stop: function() {\n      if (scheduled) {\n        cancelAnimationFrame(scheduled);\n        scheduled = undefined;\n      }\n      stopped = true;\n    },\n\n    /**\n     * Resumes the projector. Use this method to resume rendering after stop was called or an error occurred during rendering.\n     * @memberof Projector#\n     */\n    resume: function() {\n      stopped = false;\n      renderCompleted = true;\n      projector.scheduleRender();\n    },\n\n    /**\n     * Appends a new childnode to the DOM using the result from the provided `renderMaquetteFunction`.\n     * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\n     * @param {Element} parentNode - The parent node for the new childNode.\n     * @param {function} renderMaquetteFunction - Function with zero arguments that returns a {@link VNode} tree.\n     * @memberof Projector#\n     */\n    append: function(parentNode, renderMaquetteFunction) {\n      projections.push(dom.append(parentNode, renderMaquetteFunction(), projectionOptions));\n      renderFunctions.push(renderMaquetteFunction);\n    },\n\n    /**\n     * Inserts a new DOM node using the result from the provided `renderMaquetteFunction`.\n     * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\n     * @param {Element} beforeNode - The node that the DOM Node is inserted before.\n     * @param {function} renderMaquetteFunction - Function with zero arguments that returns a {@link VNode} tree.\n     * @memberof Projector#\n     */\n    insertBefore: function(beforeNode, renderMaquetteFunction) {\n      projections.push(dom.insertBefore(beforeNode, renderMaquetteFunction(), projectionOptions));\n      renderFunctions.push(renderMaquetteFunction);\n    },\n\n    /**\n     * Merges a new DOM node using the result from the provided `renderMaquetteFunction` with an existing DOM Node.\n     * This means that the virtual DOM and real DOM have one overlapping element.\n     * Therefore the selector for the root {@link VNode} will be ignored, but its properties and children will be applied to the Element provided\n     * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\n     * @param {Element} domNode - The existing element to adopt as the root of the new virtual DOM. Existing attributes and childnodes are preserved.\n     * @param {function} renderMaquetteFunction - Function with zero arguments that returns a {@link VNode} tree.\n     * @memberof Projector#\n     */\n    merge: function(domNode, renderMaquetteFunction) {\n      projections.push(dom.merge(domNode, renderMaquetteFunction(), projectionOptions));\n      renderFunctions.push(renderMaquetteFunction);\n    },\n\n    /**\n     * Replaces an existing DOM node with the result from the provided `renderMaquetteFunction`.\n     * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\n     * @param {Element} domNode - The DOM node to replace.\n     * @param {function} renderMaquetteFunction - Function with zero arguments that returns a {@link VNode} tree.\n     * @memberof Projector#\n     */\n    replace: function(domNode, renderMaquetteFunction) {\n      let vnode = renderMaquetteFunction();\n      createDom(vnode, domNode.parentNode, domNode, projectionOptions);\n      domNode.parentNode.removeChild(domNode);\n      projections.push(createProjection(vnode, projectionOptions));\n      renderFunctions.push(renderMaquetteFunction);\n    }\n  };\n  return projector;\n};\n"],"sourceRoot":"/source/"}