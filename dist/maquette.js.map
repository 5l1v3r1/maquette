{"version":3,"sources":["maquette.js","../../../src/maquette.ts"],"names":["NAMESPACE_W3","NAMESPACE_SVG","NAMESPACE_XLINK","emptyArray","extend","base","overrides","result","Object","keys","forEach","key","same","vnode1","vnode2","vnodeSelector","properties","bind","toTextVNode","data","undefined","children","text","toString","domNode","appendChildren","parentSelector","insertions","main","i","length","item","Array","isArray","hasOwnProperty","push","missingTransition","Error","DEFAULT_PROJECTION_OPTIONS","namespace","eventHandlerInterceptor","styleApplyer","styleName","value","style","transitions","enter","exit","applyDefaultProjectionOptions","projectorOptions","checkStyleValue","styleValue","setProperties","projectionOptions","propNames","propCount","propName","propValue","className","classNames","classNameCount","j","classList","add","styleNames","styleCount","type","lastIndexOf","oldPropValue","evt","target","apply","setAttributeNS","setAttribute","updateProperties","previousProperties","propertiesUpdated","previousValue","on","previousOn","remove","newStyleValue","oldStyleValue","findIndexOfChild","sameAs","start","nodeAdded","vNode","enterAnimation","nodeToRemove","exitAnimation","pointerEvents","removeDomNode","parentNode","removeChild","checkDistinguishable","childNodes","indexToCheck","parentVNode","operation","childNode","node","createDom","updateDom","updateChildren","vnode","oldChildren","newChildren","oldChildrenLength","newChildrenLength","oldIndex","newIndex","textUpdated","oldChild","newChild","findOldIndex","addChildren","initPropertiesAndChildren","textContent","afterCreate","insertBefore","c","found","document","createTextNode","appendChild","charAt","slice","id","createElementNS","createElement","previous","updated","newVNode","replaceChild","firstChild","afterUpdate","updateAnimation","createProjection","update","updatedVnode","exports","h","selector","arguments","childIndex","argsLength","onlyChild","child","dom","create","append","beforeNode","merge","element","createCache","cachedInputs","cachedOutcome","invalidate","inputs","calculation","createMapping","getSourceKey","createResult","updateResult","results","map","newSources","newKeys","oldTargets","source","sourceKey","searchIndex","createProjector","projector","propertyName","eventHandler","scheduleRender","renderCompleted","scheduled","stopped","projections","renderFunctions","doRender","requestAnimationFrame","stop","cancelAnimationFrame","resume","renderMaquetteFunction","replace"],"mappings":"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","file":"maquette.js","sourcesContent":["// Comment that is displayed in the API documentation for the maquette module:\n/**\n * Welcome to the API documentation of the **maquette** library.\n *\n * [[http://maquettejs.org/|To the maquette homepage]]\n */\n\"use strict\";\n;\n;\n;\n;\nvar NAMESPACE_W3 = 'http://www.w3.org/';\nvar NAMESPACE_SVG = NAMESPACE_W3 + '2000/svg';\nvar NAMESPACE_XLINK = NAMESPACE_W3 + '1999/xlink';\n// Utilities\nvar emptyArray = [];\nvar extend = function (base, overrides) {\n    var result = {};\n    Object.keys(base).forEach(function (key) {\n        result[key] = base[key];\n    });\n    if (overrides) {\n        Object.keys(overrides).forEach(function (key) {\n            result[key] = overrides[key];\n        });\n    }\n    return result;\n};\n// Hyperscript helper functions\nvar same = function (vnode1, vnode2) {\n    if (vnode1.vnodeSelector !== vnode2.vnodeSelector) {\n        return false;\n    }\n    if (vnode1.properties && vnode2.properties) {\n        if (vnode1.properties.key !== vnode2.properties.key) {\n            return false;\n        }\n        return vnode1.properties.bind === vnode2.properties.bind;\n    }\n    return !vnode1.properties && !vnode2.properties;\n};\nvar toTextVNode = function (data) {\n    return {\n        vnodeSelector: '',\n        properties: undefined,\n        children: undefined,\n        text: data.toString(),\n        domNode: null\n    };\n};\nvar appendChildren = function (parentSelector, insertions, main) {\n    for (var i = 0; i < insertions.length; i++) {\n        var item = insertions[i];\n        if (Array.isArray(item)) {\n            appendChildren(parentSelector, item, main);\n        }\n        else {\n            if (item !== null && item !== undefined) {\n                if (!item.hasOwnProperty('vnodeSelector')) {\n                    item = toTextVNode(item);\n                }\n                main.push(item);\n            }\n        }\n    }\n};\n// Render helper functions\nvar missingTransition = function () {\n    throw new Error('Provide a transitions object to the projectionOptions to do animations');\n};\nvar DEFAULT_PROJECTION_OPTIONS = {\n    namespace: undefined,\n    eventHandlerInterceptor: undefined,\n    styleApplyer: function (domNode, styleName, value) {\n        // Provides a hook to add vendor prefixes for browsers that still need it.\n        domNode.style[styleName] = value;\n    },\n    transitions: {\n        enter: missingTransition,\n        exit: missingTransition\n    }\n};\nvar applyDefaultProjectionOptions = function (projectorOptions) {\n    return extend(DEFAULT_PROJECTION_OPTIONS, projectorOptions);\n};\nvar checkStyleValue = function (styleValue) {\n    if (typeof styleValue !== 'string') {\n        throw new Error('Style values must be strings');\n    }\n};\nvar setProperties = function (domNode, properties, projectionOptions) {\n    if (!properties) {\n        return;\n    }\n    var eventHandlerInterceptor = projectionOptions.eventHandlerInterceptor;\n    var propNames = Object.keys(properties);\n    var propCount = propNames.length;\n    for (var i = 0; i < propCount; i++) {\n        var propName = propNames[i];\n        /* tslint:disable:no-var-keyword: edge case */\n        var propValue = properties[propName];\n        /* tslint:enable:no-var-keyword */\n        if (propName === 'className') {\n            throw new Error('Property \"className\" is not supported, use \"class\".');\n        }\n        else if (propName === 'class') {\n            if (domNode.className) {\n                // May happen if classes is specified before class\n                domNode.className += ' ' + propValue;\n            }\n            else {\n                domNode.className = propValue;\n            }\n        }\n        else if (propName === 'classes') {\n            // object with string keys and boolean values\n            var classNames = Object.keys(propValue);\n            var classNameCount = classNames.length;\n            for (var j = 0; j < classNameCount; j++) {\n                var className = classNames[j];\n                if (propValue[className]) {\n                    domNode.classList.add(className);\n                }\n            }\n        }\n        else if (propName === 'styles') {\n            // object with string keys and string (!) values\n            var styleNames = Object.keys(propValue);\n            var styleCount = styleNames.length;\n            for (var j = 0; j < styleCount; j++) {\n                var styleName = styleNames[j];\n                var styleValue = propValue[styleName];\n                if (styleValue) {\n                    checkStyleValue(styleValue);\n                    projectionOptions.styleApplyer(domNode, styleName, styleValue);\n                }\n            }\n        }\n        else if (propName === 'key') {\n            continue;\n        }\n        else if (propValue === null || propValue === undefined) {\n            continue;\n        }\n        else {\n            var type = typeof propValue;\n            if (type === 'function') {\n                if (eventHandlerInterceptor && (propName.lastIndexOf('on', 0) === 0)) {\n                    propValue = eventHandlerInterceptor(propName, propValue, domNode, properties); // intercept eventhandlers\n                    if (propName === 'oninput') {\n                        (function () {\n                            // record the evt.target.value, because IE sometimes does a requestAnimationFrame between changing value and running oninput\n                            var oldPropValue = propValue;\n                            propValue = function (evt) {\n                                evt.target['oninput-value'] = evt.target.value; // may be HTMLTextAreaElement as well\n                                oldPropValue.apply(this, [evt]);\n                            };\n                        }());\n                    }\n                    domNode[propName] = propValue;\n                }\n            }\n            else if (type === 'string' && propName !== 'value' && propName !== 'innerHTML') {\n                if (projectionOptions.namespace === NAMESPACE_SVG && propName === 'href') {\n                    domNode.setAttributeNS(NAMESPACE_XLINK, propName, propValue);\n                }\n                else {\n                    domNode.setAttribute(propName, propValue);\n                }\n            }\n            else {\n                domNode[propName] = propValue;\n            }\n        }\n    }\n};\nvar updateProperties = function (domNode, previousProperties, properties, projectionOptions) {\n    if (!properties) {\n        return;\n    }\n    var propertiesUpdated = false;\n    var propNames = Object.keys(properties);\n    var propCount = propNames.length;\n    for (var i = 0; i < propCount; i++) {\n        var propName = propNames[i];\n        // assuming that properties will be nullified instead of missing is by design\n        var propValue = properties[propName];\n        var previousValue = previousProperties[propName];\n        if (propName === 'class') {\n            if (previousValue !== propValue) {\n                throw new Error('\"class\" property may not be updated. Use the \"classes\" property for conditional css classes.');\n            }\n        }\n        else if (propName === 'classes') {\n            var classList = domNode.classList;\n            var classNames = Object.keys(propValue);\n            var classNameCount = classNames.length;\n            for (var j = 0; j < classNameCount; j++) {\n                var className = classNames[j];\n                var on = !!propValue[className];\n                var previousOn = !!previousValue[className];\n                if (on === previousOn) {\n                    continue;\n                }\n                propertiesUpdated = true;\n                if (on) {\n                    classList.add(className);\n                }\n                else {\n                    classList.remove(className);\n                }\n            }\n        }\n        else if (propName === 'styles') {\n            var styleNames = Object.keys(propValue);\n            var styleCount = styleNames.length;\n            for (var j = 0; j < styleCount; j++) {\n                var styleName = styleNames[j];\n                var newStyleValue = propValue[styleName];\n                var oldStyleValue = previousValue[styleName];\n                if (newStyleValue === oldStyleValue) {\n                    continue;\n                }\n                propertiesUpdated = true;\n                if (newStyleValue) {\n                    checkStyleValue(newStyleValue);\n                    projectionOptions.styleApplyer(domNode, styleName, newStyleValue);\n                }\n                else {\n                    projectionOptions.styleApplyer(domNode, styleName, '');\n                }\n            }\n        }\n        else {\n            if (!propValue && typeof previousValue === 'string') {\n                propValue = '';\n            }\n            if (propName === 'value') {\n                if (domNode[propName] !== propValue && domNode['oninput-value'] !== propValue) {\n                    domNode[propName] = propValue; // Reset the value, even if the virtual DOM did not change\n                    domNode['oninput-value'] = undefined;\n                } // else do not update the domNode, otherwise the cursor position would be changed\n                if (propValue !== previousValue) {\n                    propertiesUpdated = true;\n                }\n            }\n            else if (propValue !== previousValue) {\n                var type = typeof propValue;\n                if (type === 'function') {\n                    throw new Error('Functions may not be updated on subsequent renders (property: ' + propName +\n                        '). Hint: declare event handler functions outside the render() function.');\n                }\n                if (type === 'string' && propName !== 'innerHTML') {\n                    if (projectionOptions.namespace === NAMESPACE_SVG && propName === 'href') {\n                        domNode.setAttributeNS(NAMESPACE_XLINK, propName, propValue);\n                    }\n                    else {\n                        domNode.setAttribute(propName, propValue);\n                    }\n                }\n                else {\n                    if (domNode[propName] !== propValue) {\n                        domNode[propName] = propValue;\n                    }\n                }\n                propertiesUpdated = true;\n            }\n        }\n    }\n    return propertiesUpdated;\n};\nvar findIndexOfChild = function (children, sameAs, start) {\n    if (sameAs.vnodeSelector !== '') {\n        // Never scan for text-nodes\n        for (var i = start; i < children.length; i++) {\n            if (same(children[i], sameAs)) {\n                return i;\n            }\n        }\n    }\n    return -1;\n};\nvar nodeAdded = function (vNode, transitions) {\n    if (vNode.properties) {\n        var enterAnimation = vNode.properties.enterAnimation;\n        if (enterAnimation) {\n            if (typeof enterAnimation === 'function') {\n                enterAnimation(vNode.domNode, vNode.properties);\n            }\n            else {\n                transitions.enter(vNode.domNode, vNode.properties, enterAnimation);\n            }\n        }\n    }\n};\nvar nodeToRemove = function (vNode, transitions) {\n    var domNode = vNode.domNode;\n    if (vNode.properties) {\n        var exitAnimation = vNode.properties.exitAnimation;\n        if (exitAnimation) {\n            domNode.style.pointerEvents = 'none';\n            var removeDomNode = function () {\n                if (domNode.parentNode) {\n                    domNode.parentNode.removeChild(domNode);\n                }\n            };\n            if (typeof exitAnimation === 'function') {\n                exitAnimation(domNode, removeDomNode, vNode.properties);\n                return;\n            }\n            else {\n                transitions.exit(vNode.domNode, vNode.properties, exitAnimation, removeDomNode);\n                return;\n            }\n        }\n    }\n    if (domNode.parentNode) {\n        domNode.parentNode.removeChild(domNode);\n    }\n};\nvar checkDistinguishable = function (childNodes, indexToCheck, parentVNode, operation) {\n    var childNode = childNodes[indexToCheck];\n    if (childNode.vnodeSelector === '') {\n        return; // Text nodes need not be distinguishable\n    }\n    var properties = childNode.properties;\n    var key = properties ? (properties.key === undefined ? properties.bind : properties.key) : undefined;\n    if (!key) {\n        for (var i = 0; i < childNodes.length; i++) {\n            if (i !== indexToCheck) {\n                var node = childNodes[i];\n                if (same(node, childNode)) {\n                    if (operation === 'added') {\n                        throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' +\n                            'added, but there is now more than one. You must add unique key properties to make them distinguishable.');\n                    }\n                    else {\n                        throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' +\n                            'removed, but there were more than one. You must add unique key properties to make them distinguishable.');\n                    }\n                }\n            }\n        }\n    }\n};\nvar createDom;\nvar updateDom;\nvar updateChildren = function (vnode, domNode, oldChildren, newChildren, projectionOptions) {\n    if (oldChildren === newChildren) {\n        return false;\n    }\n    oldChildren = oldChildren || emptyArray;\n    newChildren = newChildren || emptyArray;\n    var oldChildrenLength = oldChildren.length;\n    var newChildrenLength = newChildren.length;\n    var transitions = projectionOptions.transitions;\n    var oldIndex = 0;\n    var newIndex = 0;\n    var i;\n    var textUpdated = false;\n    while (newIndex < newChildrenLength) {\n        var oldChild = (oldIndex < oldChildrenLength) ? oldChildren[oldIndex] : undefined;\n        var newChild = newChildren[newIndex];\n        if (oldChild !== undefined && same(oldChild, newChild)) {\n            textUpdated = updateDom(oldChild, newChild, projectionOptions) || textUpdated;\n            oldIndex++;\n        }\n        else {\n            var findOldIndex = findIndexOfChild(oldChildren, newChild, oldIndex + 1);\n            if (findOldIndex >= 0) {\n                // Remove preceding missing children\n                for (i = oldIndex; i < findOldIndex; i++) {\n                    nodeToRemove(oldChildren[i], transitions);\n                    checkDistinguishable(oldChildren, i, vnode, 'removed');\n                }\n                textUpdated = updateDom(oldChildren[findOldIndex], newChild, projectionOptions) || textUpdated;\n                oldIndex = findOldIndex + 1;\n            }\n            else {\n                // New child\n                createDom(newChild, domNode, (oldIndex < oldChildrenLength) ? oldChildren[oldIndex].domNode : undefined, projectionOptions);\n                nodeAdded(newChild, transitions);\n                checkDistinguishable(newChildren, newIndex, vnode, 'added');\n            }\n        }\n        newIndex++;\n    }\n    if (oldChildrenLength > oldIndex) {\n        // Remove child fragments\n        for (i = oldIndex; i < oldChildrenLength; i++) {\n            nodeToRemove(oldChildren[i], transitions);\n            checkDistinguishable(oldChildren, i, vnode, 'removed');\n        }\n    }\n    return textUpdated;\n};\nvar addChildren = function (domNode, children, projectionOptions) {\n    if (!children) {\n        return;\n    }\n    for (var i = 0; i < children.length; i++) {\n        createDom(children[i], domNode, undefined, projectionOptions);\n    }\n};\nvar initPropertiesAndChildren = function (domNode, vnode, projectionOptions) {\n    addChildren(domNode, vnode.children, projectionOptions); // children before properties, needed for value property of <select>.\n    if (vnode.text) {\n        domNode.textContent = vnode.text;\n    }\n    setProperties(domNode, vnode.properties, projectionOptions);\n    if (vnode.properties && vnode.properties.afterCreate) {\n        vnode.properties.afterCreate(domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children);\n    }\n};\ncreateDom = function (vnode, parentNode, insertBefore, projectionOptions) {\n    var domNode, i, c, start = 0, type, found;\n    var vnodeSelector = vnode.vnodeSelector;\n    if (vnodeSelector === '') {\n        domNode = vnode.domNode = document.createTextNode(vnode.text);\n        if (insertBefore !== undefined) {\n            parentNode.insertBefore(domNode, insertBefore);\n        }\n        else {\n            parentNode.appendChild(domNode);\n        }\n    }\n    else {\n        for (i = 0; i <= vnodeSelector.length; ++i) {\n            c = vnodeSelector.charAt(i);\n            if (i === vnodeSelector.length || c === '.' || c === '#') {\n                type = vnodeSelector.charAt(start - 1);\n                found = vnodeSelector.slice(start, i);\n                if (type === '.') {\n                    domNode.classList.add(found);\n                }\n                else if (type === '#') {\n                    domNode.id = found;\n                }\n                else {\n                    if (found === 'svg') {\n                        projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\n                    }\n                    if (projectionOptions.namespace !== undefined) {\n                        domNode = vnode.domNode = document.createElementNS(projectionOptions.namespace, found);\n                    }\n                    else {\n                        domNode = vnode.domNode = document.createElement(found);\n                    }\n                    if (insertBefore !== undefined) {\n                        parentNode.insertBefore(domNode, insertBefore);\n                    }\n                    else {\n                        parentNode.appendChild(domNode);\n                    }\n                }\n                start = i + 1;\n            }\n        }\n        initPropertiesAndChildren(domNode, vnode, projectionOptions);\n    }\n};\nupdateDom = function (previous, vnode, projectionOptions) {\n    var domNode = previous.domNode;\n    var textUpdated = false;\n    if (previous === vnode) {\n        return textUpdated; // By contract, VNode objects may not be modified after passing them to maquette\n    }\n    var updated = false;\n    if (vnode.vnodeSelector === '') {\n        if (vnode.text !== previous.text) {\n            var newVNode = document.createTextNode(vnode.text);\n            domNode.parentNode.replaceChild(newVNode, domNode);\n            vnode.domNode = newVNode;\n            textUpdated = true;\n            return textUpdated;\n        }\n    }\n    else {\n        if (vnode.vnodeSelector.lastIndexOf('svg', 0) === 0) {\n            projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\n        }\n        if (previous.text !== vnode.text) {\n            updated = true;\n            if (vnode.text === undefined) {\n                domNode.removeChild(domNode.firstChild); // the only textnode presumably\n            }\n            else {\n                domNode.textContent = vnode.text;\n            }\n        }\n        updated = updateChildren(vnode, domNode, previous.children, vnode.children, projectionOptions) || updated;\n        updated = updateProperties(domNode, previous.properties, vnode.properties, projectionOptions) || updated;\n        if (vnode.properties && vnode.properties.afterUpdate) {\n            vnode.properties.afterUpdate(domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children);\n        }\n    }\n    if (updated && vnode.properties && vnode.properties.updateAnimation) {\n        vnode.properties.updateAnimation(domNode, vnode.properties, previous.properties);\n    }\n    vnode.domNode = previous.domNode;\n    return textUpdated;\n};\nvar createProjection = function (vnode, projectionOptions) {\n    return {\n        update: function (updatedVnode) {\n            if (vnode.vnodeSelector !== updatedVnode.vnodeSelector) {\n                throw new Error('The selector for the root VNode may not be changed. (consider using dom.merge and add one extra level to the virtual DOM)');\n            }\n            updateDom(vnode, updatedVnode, projectionOptions);\n            vnode = updatedVnode;\n        },\n        domNode: vnode.domNode\n    };\n};\n;\n// The other two parameters are not added here, because the Typescript compiler creates surrogate code for desctructuring 'children'.\nexports.h = function (selector) {\n    var properties = arguments[1];\n    if (typeof selector !== 'string') {\n        throw new Error();\n    }\n    var childIndex = 1;\n    if (properties && !properties.hasOwnProperty('vnodeSelector') && !Array.isArray(properties) && typeof properties === 'object') {\n        childIndex = 2;\n    }\n    else {\n        // Optional properties argument was omitted\n        properties = undefined;\n    }\n    var text = undefined;\n    var children = undefined;\n    var argsLength = arguments.length;\n    // Recognize a common special case where there is only a single text node\n    if (argsLength === childIndex + 1) {\n        var onlyChild = arguments[childIndex];\n        if (typeof onlyChild === 'string') {\n            text = onlyChild;\n        }\n        else if (onlyChild !== undefined && onlyChild.length === 1 && typeof onlyChild[0] === 'string') {\n            text = onlyChild[0];\n        }\n    }\n    if (text === undefined) {\n        children = [];\n        for (; childIndex < arguments.length; childIndex++) {\n            var child = arguments[childIndex];\n            if (child === null || child === undefined) {\n                continue;\n            }\n            else if (Array.isArray(child)) {\n                appendChildren(selector, child, children);\n            }\n            else if (child.hasOwnProperty('vnodeSelector')) {\n                children.push(child);\n            }\n            else {\n                children.push(toTextVNode(child));\n            }\n        }\n    }\n    return {\n        vnodeSelector: selector,\n        properties: properties,\n        children: children,\n        text: text,\n        domNode: null\n    };\n};\n/**\n * Contains simple low-level utility functions to manipulate the real DOM.\n */\nexports.dom = {\n    /**\n     * Creates a real DOM tree from `vnode`. The [[Projection]] object returned will contain the resulting DOM Node in\n     * its [[Projection.domNode|domNode]] property.\n     * This is a low-level method. Users wil typically use a [[Projector]] instead.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\n     * objects may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the projection.\n     * @returns The [[Projection]] which also contains the DOM Node that was created.\n     */\n    create: function (vnode, projectionOptions) {\n        projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n        createDom(vnode, document.createElement('div'), undefined, projectionOptions);\n        return createProjection(vnode, projectionOptions);\n    },\n    /**\n     * Appends a new childnode to the DOM which is generated from a [[VNode]].\n     * This is a low-level method. Users wil typically use a [[Projector]] instead.\n     * @param parentNode - The parent node for the new childNode.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\n     * objects may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the [[Projection]].\n     * @returns The [[Projection]] that was created.\n     */\n    append: function (parentNode, vnode, projectionOptions) {\n        projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n        createDom(vnode, parentNode, undefined, projectionOptions);\n        return createProjection(vnode, projectionOptions);\n    },\n    /**\n     * Inserts a new DOM node which is generated from a [[VNode]].\n     * This is a low-level method. Users wil typically use a [[Projector]] instead.\n     * @param beforeNode - The node that the DOM Node is inserted before.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function.\n     * NOTE: [[VNode]] objects may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\n     * @returns The [[Projection]] that was created.\n     */\n    insertBefore: function (beforeNode, vnode, projectionOptions) {\n        projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n        createDom(vnode, beforeNode.parentNode, beforeNode, projectionOptions);\n        return createProjection(vnode, projectionOptions);\n    },\n    /**\n     * Merges a new DOM node which is generated from a [[VNode]] with an existing DOM Node.\n     * This means that the virtual DOM and the real DOM will have one overlapping element.\n     * Therefore the selector for the root [[VNode]] will be ignored, but its properties and children will be applied to the Element provided.\n     * This is a low-level method. Users wil typically use a [[Projector]] instead.\n     * @param domNode - The existing element to adopt as the root of the new virtual DOM. Existing attributes and childnodes are preserved.\n     * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]] objects\n     * may only be rendered once.\n     * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\n     * @returns The [[Projection]] that was created.\n     */\n    merge: function (element, vnode, projectionOptions) {\n        projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n        vnode.domNode = element;\n        initPropertiesAndChildren(element, vnode, projectionOptions);\n        return createProjection(vnode, projectionOptions);\n    }\n};\n/**\n * Creates a [[CalculationCache]] object, useful for caching [[VNode]] trees.\n * In practice, caching of [[VNode]] trees is not needed, because achieving 60 frames per second is almost never a problem.\n * For more information, see [[CalculationCache]].\n *\n * @param <Result> The type of the value that is cached.\n */\nexports.createCache = function () {\n    var cachedInputs = undefined;\n    var cachedOutcome = undefined;\n    var result = {\n        invalidate: function () {\n            cachedOutcome = undefined;\n            cachedInputs = undefined;\n        },\n        result: function (inputs, calculation) {\n            if (cachedInputs) {\n                for (var i = 0; i < inputs.length; i++) {\n                    if (cachedInputs[i] !== inputs[i]) {\n                        cachedOutcome = undefined;\n                    }\n                }\n            }\n            if (!cachedOutcome) {\n                cachedOutcome = calculation();\n                cachedInputs = inputs;\n            }\n            return cachedOutcome;\n        }\n    };\n    return result;\n};\n/**\n * Creates a {@link Mapping} instance that keeps an array of result objects synchronized with an array of source objects.\n * See {@link http://maquettejs.org/docs/arrays.html|Working with arrays}.\n *\n * @param <Source>       The type of source items. A database-record for instance.\n * @param <Target>       The type of target items. A [[Component]] for instance.\n * @param getSourceKey   `function(source)` that must return a key to identify each source object. The result must either be a string or a number.\n * @param createResult   `function(source, index)` that must create a new result object from a given source. This function is identical\n *                       to the `callback` argument in `Array.map(callback)`.\n * @param updateResult   `function(source, target, index)` that updates a result to an updated source.\n */\nexports.createMapping = function (getSourceKey, createResult, updateResult) {\n    var keys = [];\n    var results = [];\n    return {\n        results: results,\n        map: function (newSources) {\n            var newKeys = newSources.map(getSourceKey);\n            var oldTargets = results.slice();\n            var oldIndex = 0;\n            for (var i = 0; i < newSources.length; i++) {\n                var source = newSources[i];\n                var sourceKey = newKeys[i];\n                if (sourceKey === keys[oldIndex]) {\n                    results[i] = oldTargets[oldIndex];\n                    updateResult(source, oldTargets[oldIndex], i);\n                    oldIndex++;\n                }\n                else {\n                    var found = false;\n                    for (var j = 1; j < keys.length; j++) {\n                        var searchIndex = (oldIndex + j) % keys.length;\n                        if (keys[searchIndex] === sourceKey) {\n                            results[i] = oldTargets[searchIndex];\n                            updateResult(newSources[i], oldTargets[searchIndex], i);\n                            oldIndex = searchIndex + 1;\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        results[i] = createResult(source, i);\n                    }\n                }\n            }\n            results.length = newSources.length;\n            keys = newKeys;\n        }\n    };\n};\n/**\n * Creates a [[Projector]] instance using the provided projectionOptions.\n *\n * For more information, see [[Projector]].\n *\n * @param projectionOptions   Options that influence how the DOM is rendered and updated.\n */\nexports.createProjector = function (projectorOptions) {\n    var projector;\n    var projectionOptions = applyDefaultProjectionOptions(projectorOptions);\n    projectionOptions.eventHandlerInterceptor = function (propertyName, eventHandler, domNode, properties) {\n        return function () {\n            // intercept function calls (event handlers) to do a render afterwards.\n            projector.scheduleRender();\n            return eventHandler.apply(properties.bind || this, arguments);\n        };\n    };\n    var renderCompleted = true;\n    var scheduled;\n    var stopped = false;\n    var projections = [];\n    var renderFunctions = []; // matches the projections array\n    var doRender = function () {\n        scheduled = undefined;\n        if (!renderCompleted) {\n            return; // The last render threw an error, it should be logged in the browser console.\n        }\n        renderCompleted = false;\n        for (var i = 0; i < projections.length; i++) {\n            var updatedVnode = renderFunctions[i]();\n            projections[i].update(updatedVnode);\n        }\n        renderCompleted = true;\n    };\n    projector = {\n        scheduleRender: function () {\n            if (!scheduled && !stopped) {\n                scheduled = requestAnimationFrame(doRender);\n            }\n        },\n        stop: function () {\n            if (scheduled) {\n                cancelAnimationFrame(scheduled);\n                scheduled = undefined;\n            }\n            stopped = true;\n        },\n        resume: function () {\n            stopped = false;\n            renderCompleted = true;\n            projector.scheduleRender();\n        },\n        append: function (parentNode, renderMaquetteFunction) {\n            projections.push(exports.dom.append(parentNode, renderMaquetteFunction(), projectionOptions));\n            renderFunctions.push(renderMaquetteFunction);\n        },\n        insertBefore: function (beforeNode, renderMaquetteFunction) {\n            projections.push(exports.dom.insertBefore(beforeNode, renderMaquetteFunction(), projectionOptions));\n            renderFunctions.push(renderMaquetteFunction);\n        },\n        merge: function (domNode, renderMaquetteFunction) {\n            projections.push(exports.dom.merge(domNode, renderMaquetteFunction(), projectionOptions));\n            renderFunctions.push(renderMaquetteFunction);\n        },\n        replace: function (domNode, renderMaquetteFunction) {\n            var vnode = renderMaquetteFunction();\n            createDom(vnode, domNode.parentNode, domNode, projectionOptions);\n            domNode.parentNode.removeChild(domNode);\n            projections.push(createProjection(vnode, projectionOptions));\n            renderFunctions.push(renderMaquetteFunction);\n        }\n    };\n    return projector;\n};\n\n//# sourceMappingURL=maquette.js.map\n","// Comment that is displayed in the API documentation for the maquette module:\n/**\n * Welcome to the API documentation of the **maquette** library.\n *\n * [[http://maquettejs.org/|To the maquette homepage]]\n */\n\n/**\n * A virtual representation of a DOM Node. Maquette assumes that [[VNode]] objects are never modified externally.\n * Instances of [[VNode]] can be created using [[h]].\n */\nexport interface VNode {\n  /**\n   * The CSS selector containing tagname, css classnames and id. An empty string is used to denote a text node.\n   */\n  vnodeSelector: string;\n  /**\n   * Object containing attributes, properties, event handlers and more, see [[h]].\n   */\n  properties: VNodeProperties;\n  /**\n   * Array of [[VNode]]s to be used as children. This array is already flattened.\n   */\n  children: Array<VNode>;\n  /**\n   * Used in a special case when a [[VNode]] only has one childnode which is a textnode. Only used in combination with children === undefined.\n   */\n  text: string;\n  /**\n   * Used by maquette to store the domNode that was produced from this [[VNode]].\n   */\n  domNode: Node;\n}\n\n/**\n * A projector is used to create the real DOM from the the virtual DOM and to keep it up-to-date afterwards.\n *\n * You can call [[append]], [[merge]], [[insertBefore]] and [[replace]] to add the virtual DOM to the real DOM.\n * The `renderMaquetteFunction` callbacks will be called to create the real DOM immediately.\n * Afterwards, the `renderMaquetteFunction` callbacks will be called again to update the DOM on the next animation-frame after:\n *\n *  - The Projector's [[scheduleRender]] function  was called\n *  - An event handler (like `onclick`) on a rendered [[VNode]] was called.\n *\n * The projector stops when [[stop]] is called or when an error is thrown during rendering.\n * It is possible to use `window.onerror` to handle these errors.\n * Instances of [[Projector]] can be created using [[createProjector]].\n */\nexport interface Projector {\n  /**\n   * Appends a new childnode to the DOM using the result from the provided `renderMaquetteFunction`.\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\n   * @param parentNode - The parent node for the new childNode.\n   * @param renderMaquetteFunction - Function with zero arguments that returns a [[VNode]] tree.\n   */\n  append(parentNode: Element, renderMaquetteFunction: () => VNode): void;\n  /**\n   * Inserts a new DOM node using the result from the provided `renderMaquetteFunction`.\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\n   * @param beforeNode - The node that the DOM Node is inserted before.\n   * @param renderMaquetteFunction - Function with zero arguments that returns a [[VNode]] tree.\n   */\n  insertBefore(beforeNode: Element, renderMaquetteFunction: () => VNode): void;\n  /**\n   * Merges a new DOM node using the result from the provided `renderMaquetteFunction` with an existing DOM Node.\n   * This means that the virtual DOM and real DOM have one overlapping element.\n   * Therefore the selector for the root [[VNode]] will be ignored, but its properties and children will be applied to the Element provided\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\n   * @param domNode - The existing element to adopt as the root of the new virtual DOM. Existing attributes and childnodes are preserved.\n   * @param renderMaquetteFunction - Function with zero arguments that returns a [[VNode]] tree.\n   */\n  merge(domNode: Element, renderMaquetteFunction: () => VNode): void;\n  /**\n   * Replaces an existing DOM node with the result from the provided `renderMaquetteFunction`.\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\n   * @param domNode - The DOM node to replace.\n   * @param renderMaquetteFunction - Function with zero arguments that returns a [[VNode]] tree.\n   */\n  replace(domNode: Element, renderMaquetteFunction: () => VNode): void;\n  /**\n   * Resumes the projector. Use this method to resume rendering after [[stop]] was called or an error occurred during rendering.\n   */\n  resume(): void;\n  /**\n   * Instructs the projector to re-render to the DOM at the next animation-frame using the registered `renderMaquette` functions.\n   * This method is automatically called for you when event-handlers that are registered in the [[VNode]]s are invoked.\n   *\n   * You need to call this method when timeouts expire, when AJAX responses arrive or other asynchronous actions happen.\n   */\n  scheduleRender(): void;\n  /**\n   * Stops the projector. This means that the registered `renderMaquette` functions will not be called anymore.\n   *\n   * Note that calling [[stop]] is not mandatory. A projector is a passive object that will get garbage collected\n   * as usual if it is no longer in scope.\n   */\n  stop(): void;\n}\n\n/**\n * These functions are called when [[VNodeProperties.enterAnimation]] and [[VNodeProperties.exitAnimation]] are provided as strings.\n * See [[ProjectionOptions.transitions]].\n */\nexport interface TransitionStrategy {\n  /**\n   * Function that is called when a [[VNode]] with an `enterAnimation` string is added to an already existing parent [[VNode]].\n   *\n   * @param element         Element that was just added to the DOM.\n   * @param properties      The properties object that was supplied to the [[h]] method\n   * @param enterAnimation  The string that was passed to [[VNodeProperties.enterAnimation]].\n   */\n  enter(element: Element, properties: VNodeProperties, enterAnimation: string): void;\n  /**\n   * Function that is called when a [[VNode]] with an `exitAnimation` string is removed from a existing parent [[VNode]] that remains.\n   *\n   * @param element         Element that ought to be removed from to the DOM.\n   * @param properties      The properties object that was supplied to the [[h]] method that rendered this [[VNode]] the previous time.\n   * @param exitAnimation   The string that was passed to [[VNodeProperties.exitAnimation]].\n   * @param removeElement   Function that removes the element from the DOM.\n   *                        This argument is provided purely for convenience.\n   *                        You may use this function to remove the element when the animation is done.\n   */\n  exit(element: Element, properties: VNodeProperties, exitAnimation: string, removeElement: () => void): void;\n};\n\n/**\n * Options that may be passed when creating the [[Projector]]\n */\nexport interface ProjectorOptions {\n  /**\n   * A transition strategy to invoke when enterAnimation and exitAnimation properties are provided as strings.\n   * The module `cssTransitions` in the provided `css-transitions.js` file provides such a strategy.\n   * A transition strategy is not needed when enterAnimation and exitAnimation properties are provided as functions.\n   */\n  transitions?: TransitionStrategy;\n  /**\n   * May be used to add vendor prefixes when applying inline styles when needed.\n   * This function is called when [[styles]] is used.\n   * This function should execute `domNode.style[styleName] = value` or do something smarter.\n   *\n   * @param domNode   The DOM Node that needs to receive the style\n   * @param styleName The name of the style that should be applied, for example `transform`.\n   * @param value     The value of this style, for example `rotate(45deg)`.\n   */\n  styleApplyer?(domNode: HTMLElement, styleName: string, value: string): void;\n};\n\n/**\n * Options that influence how the DOM is rendered and updated.\n */\nexport interface ProjectionOptions extends ProjectorOptions {\n  /**\n   * Only for internal use. Used for rendering SVG Nodes.\n   */\n  namespace?: string;\n  /**\n   * May be used to intercept registration of event-handlers.\n   *\n   * Used by the [[Projector]] to wrap eventHandler-calls to call [[scheduleRender]] as well.\n   *\n   * @param propertyName             The name of the property to be assigned, for example onclick\n   * @param eventHandler             The function that was registered on the [[VNode]]\n   * @param domNode                  The real DOM element\n   * @param properties               The whole set of properties that was put on the VNode\n   * @returns                        The function that is to be placed on the DOM node as the event handler, instead of `eventHandler`.\n   */\n  eventHandlerInterceptor?: (propertyName: string, eventHandler: Function, domNode: Node, properties: VNodeProperties) => Function;\n};\n\n/**\n * Object containing attributes, properties, event handlers and more that can be put on DOM nodes.\n *\n * For your convenience, all common attributes, properties and event handlers are listed here and are\n * type-checked when using Typescript.\n */\nexport interface VNodeProperties {\n  /**\n   * The animation to perform when this node is added to an already existing parent.\n   * When this value is a string, you must pass a `projectionOptions.transitions` object when creating the\n   * projector using [[createProjector]].\n   * {@link http://maquettejs.org/docs/animations.html|More about animations}.\n   * @param element - Element that was just added to the DOM.\n   * @param properties - The properties object that was supplied to the [[h]] method\n   */\n  enterAnimation?: ((element: Element, properties?: VNodeProperties) => void) | string;\n  /**\n   * The animation to perform when this node is removed while its parent remains.\n   * When this value is a string, you must pass a `projectionOptions.transitions` object when creating the projector using [[createProjector]].\n   * {@link http://maquettejs.org/docs/animations.html|More about animations}.\n   * @param element - Element that ought to be removed from to the DOM.\n   * @param removeElement - Function that removes the element from the DOM.\n   * This argument is provided purely for convenience.\n   * You may use this function to remove the element when the animation is done.\n   * @param properties - The properties object that was supplied to the [[h]] method that rendered this [[VNode]] the previous time.\n   */\n  exitAnimation?: ((element: Element, removeElement: () => void, properties?: VNodeProperties) => void) | string;\n  /**\n   * The animation to perform when the properties of this node change.\n   * This also includes attributes, styles, css classes. This callback is also invoked when node contains only text and that text changes.\n   * {@link http://maquettejs.org/docs/animations.html|More about animations}.\n   * @param element - Element that was modified in the DOM.\n   * @param properties - The last properties object that was supplied to the [[h]] method\n   * @param previousProperties - The previous properties object that was supplied to the [[h]] method\n   */\n  updateAnimation?: (element: Element, properties?: VNodeProperties, previousProperties?: VNodeProperties) => void;\n  /**\n   * Callback that is executed after this node is added to the DOM. Childnodes and properties have\n   * already been applied.\n   * @param element - The element that was added to the DOM.\n   * @param projectionOptions - The projection options that were used see [[createProjector]].\n   * @param vnodeSelector - The selector passed to the [[h]] function.\n   * @param properties - The properties passed to the [[h]] function.\n   * @param children - The children that were created.\n   * @param properties - The last properties object that was supplied to the [[h]] method\n   * @param previousProperties - The previous properties object that was supplied to the [[h]] method\n   */\n  afterCreate?(element: Element, projectionOptions: ProjectionOptions, vnodeSelector: string, properties: VNodeProperties,\n    children: VNode[]): void;\n  /**\n   * Callback that is executed every time this node may have been updated. Childnodes and properties\n   * have already been updated.\n   * @param element - The element that may have been updated in the DOM.\n   * @param projectionOptions - The projection options that were used see [[createProjector]].\n   * @param vnodeSelector - The selector passed to the [[h]] function.\n   * @param properties - The properties passed to the [[h]] function.\n   * @param children - The children for this node.\n   */\n  afterUpdate?(element: Element, projectionOptions: ProjectionOptions, vnodeSelector: string, properties: VNodeProperties,\n    children: VNode[]): void;\n  /**\n   * When specified, the event handlers will be invoked with 'this' pointing to the value.\n   * This is useful when using the prototype/class based implementation of Components.\n   *\n   * When no [[key]] is present, this object is also used to uniquely identify a DOM node.\n   */\n  bind?: Object;\n  /**\n   * Used to uniquely identify a DOM node among siblings.\n   * A key is required when there are more children with the same selector and these children are added or removed dynamically.\n   * NOTE: this does not have to be a string or number, a [[Component]] Object for instance is also possible.\n   */\n  key?: Object;\n  /**\n   * An object literal like `{important:true}` which allows css classes, like `important` to be added and removed\n   * dynamically.\n   */\n  classes?: { [index: string]: boolean };\n  /**\n   * An object literal like `{height:'100px'}` which allows styles to be changed dynamically. All values must be strings.\n   */\n  styles?: { [index: string]: string };\n\n  // From Element\n  ontouchcancel?(ev?: TouchEvent): boolean | void;\n  ontouchend?(ev?: TouchEvent): boolean | void;\n  ontouchmove?(ev?: TouchEvent): boolean | void;\n  ontouchstart?(ev?: TouchEvent): boolean | void;\n  // From HTMLFormElement\n  action?: string;\n  encoding?: string;\n  enctype?: string;\n  method?: string;\n  name?: string;\n  target?: string;\n  // From HTMLElement\n  onblur?(ev?: FocusEvent): boolean | void;\n  onchange?(ev?: Event): boolean | void;\n  onclick?(ev?: MouseEvent): boolean | void;\n  ondblclick?(ev?: MouseEvent): boolean | void;\n  onfocus?(ev?: FocusEvent): boolean | void;\n  oninput?(ev?: Event): boolean | void;\n  onkeydown?(ev?: KeyboardEvent): boolean | void;\n  onkeypress?(ev?: KeyboardEvent): boolean | void;\n  onkeyup?(ev?: KeyboardEvent): boolean | void;\n  onload?(ev?: Event): boolean | void;\n  onmousedown?(ev?: MouseEvent): boolean | void;\n  onmouseenter?(ev?: MouseEvent): boolean | void;\n  onmouseleave?(ev?: MouseEvent): boolean | void;\n  onmousemove?(ev?: MouseEvent): boolean | void;\n  onmouseout?(ev?: MouseEvent): boolean | void;\n  onmouseover?(ev?: MouseEvent): boolean | void;\n  onmouseup?(ev?: MouseEvent): boolean | void;\n  onmousewheel?(ev?: MouseWheelEvent): boolean | void;\n  onscroll?(ev?: UIEvent): boolean | void;\n  onsubmit?(ev?: Event): boolean | void;\n  spellcheck?: boolean;\n  tabIndex?: number;\n  title?: string;\n  accessKey?: string;\n  id?: string;\n  // From HTMLInputElement\n  autocomplete?: string;\n  checked?: boolean;\n  placeholder?: string;\n  readOnly?: boolean;\n  src?: string;\n  value?: string;\n  // From HTMLImageElement\n  alt?: string;\n  srcset?: string;\n  /**\n   * Puts a non-interactive piece of html inside the DOM node.\n   *\n   * Note: if you use innerHTML, maquette cannot protect you from XSS vulnerabilities and you must make sure that the innerHTML value is safe.\n   */\n  innerHTML?: string;\n\n  /**\n   * Everything that is not explicitly listed (properties and attributes that are either uncommon or custom).\n   */\n  [index: string]: any;\n};\n\n/**\n * Represents a [[VNode]] tree that has been rendered to a real DOM tree.\n */\nexport interface Projection {\n  /**\n   * The DOM node that is used as the root of this [[Projection]].\n   */\n  domNode: Element;\n  /**\n   * Updates the real DOM to match the new virtual DOM tree.\n   * @param updatedVnode The updated virtual DOM tree. Note: The selector for the root of the [[VNode]] tree may not change.\n   */\n  update(updatedVnode: VNode): void;\n}\n\nconst NAMESPACE_W3 = 'http://www.w3.org/';\nconst NAMESPACE_SVG = NAMESPACE_W3 + '2000/svg';\nconst NAMESPACE_XLINK = NAMESPACE_W3 + '1999/xlink';\n\n// Utilities\n\nlet emptyArray = <VNode[]>[];\n\nlet extend = <T>(base: T, overrides: any): T => {\n  let result = {} as any;\n  Object.keys(base).forEach(function(key) {\n    result[key] = (base as any)[key];\n  });\n  if (overrides) {\n    Object.keys(overrides).forEach((key) => {\n      result[key] = overrides[key];\n    });\n  }\n  return result;\n};\n\n// Hyperscript helper functions\n\nlet same = (vnode1: VNode, vnode2: VNode) => {\n  if (vnode1.vnodeSelector !== vnode2.vnodeSelector) {\n    return false;\n  }\n  if (vnode1.properties && vnode2.properties) {\n    if (vnode1.properties.key !== vnode2.properties.key) {\n      return false;\n    }\n    return vnode1.properties.bind === vnode2.properties.bind;\n  }\n  return !vnode1.properties && !vnode2.properties;\n};\n\nlet toTextVNode = (data: any): VNode => {\n  return {\n    vnodeSelector: '',\n    properties: undefined,\n    children: undefined,\n    text: data.toString(),\n    domNode: null\n  };\n};\n\nlet appendChildren = function(parentSelector: string, insertions: any[], main: VNode[]) {\n  for (let i = 0; i < insertions.length; i++) {\n    let item = insertions[i];\n    if (Array.isArray(item)) {\n      appendChildren(parentSelector, item, main);\n    } else {\n      if (item !== null && item !== undefined) {\n        if (!item.hasOwnProperty('vnodeSelector')) {\n          item = toTextVNode(item);\n        }\n        main.push(item);\n      }\n    }\n  }\n};\n\n// Render helper functions\n\nlet missingTransition = function() {\n  throw new Error('Provide a transitions object to the projectionOptions to do animations');\n};\n\nconst DEFAULT_PROJECTION_OPTIONS: ProjectionOptions = {\n  namespace: undefined,\n  eventHandlerInterceptor: undefined,\n  styleApplyer: function(domNode: HTMLElement, styleName: string, value: string) {\n    // Provides a hook to add vendor prefixes for browsers that still need it.\n    (domNode.style as any)[styleName] = value;\n  },\n  transitions: {\n    enter: missingTransition,\n    exit: missingTransition\n  }\n};\n\nlet applyDefaultProjectionOptions = (projectorOptions: ProjectionOptions) => {\n  return extend(DEFAULT_PROJECTION_OPTIONS, projectorOptions);\n};\n\nlet checkStyleValue = (styleValue: Object) => {\n  if (typeof styleValue !== 'string') {\n    throw new Error('Style values must be strings');\n  }\n};\n\nlet setProperties = function(domNode: Node, properties: VNodeProperties, projectionOptions: ProjectionOptions) {\n  if (!properties) {\n    return;\n  }\n  let eventHandlerInterceptor = projectionOptions.eventHandlerInterceptor;\n  let propNames = Object.keys(properties);\n  let propCount = propNames.length;\n  for (let i = 0; i < propCount; i++) {\n    let propName = propNames[i];\n    /* tslint:disable:no-var-keyword: edge case */\n    var propValue = properties[propName];\n    /* tslint:enable:no-var-keyword */\n    if (propName === 'className') {\n      throw new Error('Property \"className\" is not supported, use \"class\".');\n    } else if (propName === 'class') {\n      if ((domNode as Element).className) {\n        // May happen if classes is specified before class\n        (domNode as Element).className += ' ' + propValue;\n      } else {\n        (domNode as Element).className = propValue;\n      }\n    } else if (propName === 'classes') {\n      // object with string keys and boolean values\n      let classNames = Object.keys(propValue);\n      let classNameCount = classNames.length;\n      for (let j = 0; j < classNameCount; j++) {\n        let className = classNames[j];\n        if (propValue[className]) {\n          (domNode as Element).classList.add(className);\n        }\n      }\n    } else if (propName === 'styles') {\n      // object with string keys and string (!) values\n      let styleNames = Object.keys(propValue);\n      let styleCount = styleNames.length;\n      for (let j = 0; j < styleCount; j++) {\n        let styleName = styleNames[j];\n        let styleValue = propValue[styleName];\n        if (styleValue) {\n          checkStyleValue(styleValue);\n          projectionOptions.styleApplyer(<HTMLElement>domNode, styleName, styleValue);\n        }\n      }\n    } else if (propName === 'key') {\n      continue;\n    } else if (propValue === null || propValue === undefined) {\n      continue;\n    } else {\n      let type = typeof propValue;\n      if (type === 'function') {\n        if (eventHandlerInterceptor && (propName.lastIndexOf('on', 0) === 0)) { // lastIndexOf(,0)===0 -> startsWith\n          propValue = eventHandlerInterceptor(propName, propValue, domNode, properties); // intercept eventhandlers\n          if (propName === 'oninput') {\n            (function() {\n              // record the evt.target.value, because IE sometimes does a requestAnimationFrame between changing value and running oninput\n              let oldPropValue = propValue;\n              propValue = function(evt: Event) {\n                (evt.target as any)['oninput-value'] = (evt.target as HTMLInputElement).value; // may be HTMLTextAreaElement as well\n                oldPropValue.apply(this, [evt]);\n              };\n            } ());\n          }\n          (domNode as any)[propName] = propValue;\n        }\n      } else if (type === 'string' && propName !== 'value' && propName !== 'innerHTML') {\n        if (projectionOptions.namespace === NAMESPACE_SVG && propName === 'href') {\n          (domNode as Element).setAttributeNS(NAMESPACE_XLINK, propName, propValue);\n        } else {\n          (domNode as Element).setAttribute(propName, propValue);\n        }\n      } else {\n        (domNode as any)[propName] = propValue;\n      }\n    }\n  }\n};\n\nlet updateProperties = function(domNode: Node, previousProperties: VNodeProperties, properties: VNodeProperties, projectionOptions: ProjectionOptions) {\n  if (!properties) {\n    return;\n  }\n  let propertiesUpdated = false;\n  let propNames = Object.keys(properties);\n  let propCount = propNames.length;\n  for (let i = 0; i < propCount; i++) {\n    let propName = propNames[i];\n    // assuming that properties will be nullified instead of missing is by design\n    let propValue = properties[propName];\n    let previousValue = previousProperties[propName];\n    if (propName === 'class') {\n      if (previousValue !== propValue) {\n        throw new Error('\"class\" property may not be updated. Use the \"classes\" property for conditional css classes.');\n      }\n    } else if (propName === 'classes') {\n      let classList = (domNode as Element).classList;\n      let classNames = Object.keys(propValue);\n      let classNameCount = classNames.length;\n      for (let j = 0; j < classNameCount; j++) {\n        let className = classNames[j];\n        let on = !!propValue[className];\n        let previousOn = !!previousValue[className];\n        if (on === previousOn) {\n          continue;\n        }\n        propertiesUpdated = true;\n        if (on) {\n          classList.add(className);\n        } else {\n          classList.remove(className);\n        }\n      }\n    } else if (propName === 'styles') {\n      let styleNames = Object.keys(propValue);\n      let styleCount = styleNames.length;\n      for (let j = 0; j < styleCount; j++) {\n        let styleName = styleNames[j];\n        let newStyleValue = propValue[styleName];\n        let oldStyleValue = previousValue[styleName];\n        if (newStyleValue === oldStyleValue) {\n          continue;\n        }\n        propertiesUpdated = true;\n        if (newStyleValue) {\n          checkStyleValue(newStyleValue);\n          projectionOptions.styleApplyer(domNode as HTMLElement, styleName, newStyleValue);\n        } else {\n          projectionOptions.styleApplyer(domNode as HTMLElement, styleName, '');\n        }\n      }\n    } else {\n      if (!propValue && typeof previousValue === 'string') {\n        propValue = '';\n      }\n      if (propName === 'value') { // value can be manipulated by the user directly and using event.preventDefault() is not an option\n        if ((domNode as any)[propName] !== propValue && (domNode as any)['oninput-value'] !== propValue) {\n          (domNode as any)[propName] = propValue; // Reset the value, even if the virtual DOM did not change\n          (domNode as any)['oninput-value'] = undefined;\n        } // else do not update the domNode, otherwise the cursor position would be changed\n        if (propValue !== previousValue) {\n          propertiesUpdated = true;\n        }\n      } else if (propValue !== previousValue) {\n        let type = typeof propValue;\n        if (type === 'function') {\n          throw new Error('Functions may not be updated on subsequent renders (property: ' + propName +\n            '). Hint: declare event handler functions outside the render() function.');\n        }\n        if (type === 'string' && propName !== 'innerHTML') {\n          if (projectionOptions.namespace === NAMESPACE_SVG && propName === 'href') {\n            (domNode as Element).setAttributeNS(NAMESPACE_XLINK, propName, propValue);\n          } else {\n            (domNode as Element).setAttribute(propName, propValue);\n          }\n        } else {\n          if ((domNode as any)[propName] !== propValue) { // Comparison is here for side-effects in Edge with scrollLeft and scrollTop\n            (domNode as any)[propName] = propValue;\n          }\n        }\n        propertiesUpdated = true;\n      }\n    }\n  }\n  return propertiesUpdated;\n};\n\nlet findIndexOfChild = function(children: VNode[], sameAs: VNode, start: number) {\n  if (sameAs.vnodeSelector !== '') {\n    // Never scan for text-nodes\n    for (let i = start; i < children.length; i++) {\n      if (same(children[i], sameAs)) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\nlet nodeAdded = function(vNode: VNode, transitions: TransitionStrategy) {\n  if (vNode.properties) {\n    let enterAnimation = vNode.properties.enterAnimation;\n    if (enterAnimation) {\n      if (typeof enterAnimation === 'function') {\n        enterAnimation(vNode.domNode as Element, vNode.properties);\n      } else {\n        transitions.enter(vNode.domNode as Element, vNode.properties, enterAnimation as string);\n      }\n    }\n  }\n};\n\nlet nodeToRemove = function(vNode: VNode, transitions: TransitionStrategy) {\n  let domNode = vNode.domNode;\n  if (vNode.properties) {\n    let exitAnimation = vNode.properties.exitAnimation;\n    if (exitAnimation) {\n      (domNode as HTMLElement).style.pointerEvents = 'none';\n      let removeDomNode = function() {\n        if (domNode.parentNode) {\n          domNode.parentNode.removeChild(domNode);\n        }\n      };\n      if (typeof exitAnimation === 'function') {\n        exitAnimation(domNode as Element, removeDomNode, vNode.properties);\n        return;\n      } else {\n        transitions.exit(vNode.domNode as Element, vNode.properties, exitAnimation as string, removeDomNode);\n        return;\n      }\n    }\n  }\n  if (domNode.parentNode) {\n    domNode.parentNode.removeChild(domNode);\n  }\n};\n\nlet checkDistinguishable = function(childNodes: VNode[], indexToCheck: number, parentVNode: VNode, operation: string) {\n  let childNode = childNodes[indexToCheck];\n  if (childNode.vnodeSelector === '') {\n    return; // Text nodes need not be distinguishable\n  }\n  let properties = childNode.properties;\n  let key = properties ? (properties.key === undefined ? properties.bind : properties.key) : undefined;\n  if (!key) { // A key is just assumed to be unique\n    for (let i = 0; i < childNodes.length; i++) {\n      if (i !== indexToCheck) {\n        let node = childNodes[i];\n        if (same(node, childNode)) {\n          if (operation === 'added') {\n            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' +\n              'added, but there is now more than one. You must add unique key properties to make them distinguishable.');\n          } else {\n            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' +\n              'removed, but there were more than one. You must add unique key properties to make them distinguishable.');\n          }\n        }\n      }\n    }\n  }\n};\n\nlet createDom: (vnode: VNode, parentNode: Node, insertBefore: Node, projectionOptions: ProjectionOptions) => void;\nlet updateDom: (previous: VNode, vnode: VNode, projectionOptions: ProjectionOptions) => boolean;\n\nlet updateChildren = function(vnode: VNode, domNode: Node, oldChildren: VNode[], newChildren: VNode[], projectionOptions: ProjectionOptions) {\n  if (oldChildren === newChildren) {\n    return false;\n  }\n  oldChildren = oldChildren || emptyArray;\n  newChildren = newChildren || emptyArray;\n  let oldChildrenLength = oldChildren.length;\n  let newChildrenLength = newChildren.length;\n  let transitions = projectionOptions.transitions;\n\n  let oldIndex = 0;\n  let newIndex = 0;\n  let i: number;\n  let textUpdated = false;\n  while (newIndex < newChildrenLength) {\n    let oldChild = (oldIndex < oldChildrenLength) ? oldChildren[oldIndex] : undefined;\n    let newChild = newChildren[newIndex];\n    if (oldChild !== undefined && same(oldChild, newChild)) {\n      textUpdated = updateDom(oldChild, newChild, projectionOptions) || textUpdated;\n      oldIndex++;\n    } else {\n      let findOldIndex = findIndexOfChild(oldChildren, newChild, oldIndex + 1);\n      if (findOldIndex >= 0) {\n        // Remove preceding missing children\n        for (i = oldIndex; i < findOldIndex; i++) {\n          nodeToRemove(oldChildren[i], transitions);\n          checkDistinguishable(oldChildren, i, vnode, 'removed');\n        }\n        textUpdated = updateDom(oldChildren[findOldIndex], newChild, projectionOptions) || textUpdated;\n        oldIndex = findOldIndex + 1;\n      } else {\n        // New child\n        createDom(newChild, domNode, (oldIndex < oldChildrenLength) ? oldChildren[oldIndex].domNode : undefined, projectionOptions);\n        nodeAdded(newChild, transitions);\n        checkDistinguishable(newChildren, newIndex, vnode, 'added');\n      }\n    }\n    newIndex++;\n  }\n  if (oldChildrenLength > oldIndex) {\n    // Remove child fragments\n    for (i = oldIndex; i < oldChildrenLength; i++) {\n      nodeToRemove(oldChildren[i], transitions);\n      checkDistinguishable(oldChildren, i, vnode, 'removed');\n    }\n  }\n  return textUpdated;\n};\n\nlet addChildren = function(domNode: Node, children: VNode[], projectionOptions: ProjectionOptions) {\n  if (!children) {\n    return;\n  }\n  for (let i = 0; i < children.length; i++) {\n    createDom(children[i], domNode, undefined, projectionOptions);\n  }\n};\n\nlet initPropertiesAndChildren = function(domNode: Node, vnode: VNode, projectionOptions: ProjectionOptions) {\n  addChildren(domNode, vnode.children, projectionOptions); // children before properties, needed for value property of <select>.\n  if (vnode.text) {\n    domNode.textContent = vnode.text;\n  }\n  setProperties(domNode, vnode.properties, projectionOptions);\n  if (vnode.properties && vnode.properties.afterCreate) {\n    vnode.properties.afterCreate(domNode as Element, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children);\n  }\n};\n\ncreateDom = function(vnode, parentNode, insertBefore, projectionOptions) {\n  let domNode: Node, i: number, c: string, start = 0, type: string, found: string;\n  let vnodeSelector = vnode.vnodeSelector;\n  if (vnodeSelector === '') {\n    domNode = vnode.domNode = document.createTextNode(vnode.text);\n    if (insertBefore !== undefined) {\n      parentNode.insertBefore(domNode, insertBefore);\n    } else {\n      parentNode.appendChild(domNode);\n    }\n  } else {\n    for (i = 0; i <= vnodeSelector.length; ++i) {\n      c = vnodeSelector.charAt(i);\n      if (i === vnodeSelector.length || c === '.' || c === '#') {\n        type = vnodeSelector.charAt(start - 1);\n        found = vnodeSelector.slice(start, i);\n        if (type === '.') {\n          (domNode as HTMLElement).classList.add(found);\n        } else if (type === '#') {\n          (domNode as Element).id = found;\n        } else {\n          if (found === 'svg') {\n            projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\n          }\n          if (projectionOptions.namespace !== undefined) {\n            domNode = vnode.domNode = document.createElementNS(projectionOptions.namespace, found);\n          } else {\n            domNode = vnode.domNode = document.createElement(found);\n          }\n          if (insertBefore !== undefined) {\n            parentNode.insertBefore(domNode, insertBefore);\n          } else {\n            parentNode.appendChild(domNode);\n          }\n        }\n        start = i + 1;\n      }\n    }\n    initPropertiesAndChildren(domNode, vnode, projectionOptions);\n  }\n};\n\nupdateDom = function(previous, vnode, projectionOptions) {\n  let domNode = previous.domNode;\n  let textUpdated = false;\n  if (previous === vnode) {\n    return textUpdated; // By contract, VNode objects may not be modified after passing them to maquette\n  }\n  let updated = false;\n  if (vnode.vnodeSelector === '') {\n    if (vnode.text !== previous.text) {\n      let newVNode = document.createTextNode(vnode.text);\n      domNode.parentNode.replaceChild(newVNode, domNode);\n      vnode.domNode = newVNode;\n      textUpdated = true;\n      return textUpdated;\n    }\n  } else {\n    if (vnode.vnodeSelector.lastIndexOf('svg', 0) === 0) { // lastIndexOf(needle,0)===0 means StartsWith\n      projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\n    }\n    if (previous.text !== vnode.text) {\n      updated = true;\n      if (vnode.text === undefined) {\n        domNode.removeChild(domNode.firstChild); // the only textnode presumably\n      } else {\n        domNode.textContent = vnode.text;\n      }\n    }\n    updated = updateChildren(vnode, domNode, previous.children, vnode.children, projectionOptions) || updated;\n    updated = updateProperties(domNode, previous.properties, vnode.properties, projectionOptions) || updated;\n    if (vnode.properties && vnode.properties.afterUpdate) {\n      vnode.properties.afterUpdate(<Element>domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children);\n    }\n  }\n  if (updated && vnode.properties && vnode.properties.updateAnimation) {\n    vnode.properties.updateAnimation(<Element>domNode, vnode.properties, previous.properties);\n  }\n  vnode.domNode = previous.domNode;\n  return textUpdated;\n};\n\nlet createProjection = function(vnode: VNode, projectionOptions: ProjectionOptions): Projection {\n  return {\n    update: function(updatedVnode: VNode) {\n      if (vnode.vnodeSelector !== updatedVnode.vnodeSelector) {\n        throw new Error('The selector for the root VNode may not be changed. (consider using dom.merge and add one extra level to the virtual DOM)');\n      }\n      updateDom(vnode, updatedVnode, projectionOptions);\n      vnode = updatedVnode;\n    },\n    domNode: <Element>vnode.domNode\n  };\n};\n\n// The following line is not possible in Typescript, hence the workaround in the two lines below\n// export type VNodeChild = string|VNode|Array<VNodeChild>\n/**\n * Only needed for the defintion of [[VNodeChild]].\n */\nexport interface VNodeChildren extends Array<VNodeChild> { };\n/**\n * These are valid values for the children parameter of the [[h]] function.\n */\nexport type VNodeChild = string | VNode | VNodeChildren;\n\n/**\n * Contains all valid method signatures for the [[h]] function.\n */\nexport interface H {\n  /**\n   * @param selector    Contains the tagName, id and fixed css classnames in CSS selector format.\n   *                    It is formatted as follows: `tagname.cssclass1.cssclass2#id`.\n   * @param properties  An object literal containing properties that will be placed on the DOM node.\n   * @param children    Virtual DOM nodes and strings to add as child nodes.\n   *                    `children` may contain [[VNode]]s, `string`s, nested arrays, `null` and `undefined`.\n   *                    Nested arrays are flattened, `null` and `undefined` are removed.\n   *\n   * @returns           A VNode object, used to render a real DOM later.\n   */\n  (selector: string, properties?: VNodeProperties, ...children: VNodeChild[]): VNode;\n  (selector: string, ...children: VNodeChild[]): VNode;\n}\n\n/**\n * The `h` function is used to create a virtual DOM node.\n * This function is largely inspired by the mercuryjs and mithril frameworks.\n * The `h` stands for (virtual) hyperscript.\n *\n * All possible method signatures of this function can be found in the [[H]] 'interface'.\n *\n * NOTE: There are {@link http://maquettejs.org/docs/rules.html|three basic rules} you should be aware of when updating the virtual DOM.\n */\nexport let h: H;\n\n// The other two parameters are not added here, because the Typescript compiler creates surrogate code for desctructuring 'children'.\nh = function(selector: string): VNode {\n  let properties = arguments[1];\n  if (typeof selector !== 'string') {\n    throw new Error();\n  }\n  let childIndex = 1;\n  if (properties && !properties.hasOwnProperty('vnodeSelector') && !Array.isArray(properties) && typeof properties === 'object') {\n    childIndex = 2;\n  } else {\n    // Optional properties argument was omitted\n    properties = undefined;\n  }\n  let text = undefined as string;\n  let children = undefined as VNode[];\n  let argsLength = arguments.length;\n  // Recognize a common special case where there is only a single text node\n  if (argsLength === childIndex + 1) {\n    let onlyChild = arguments[childIndex];\n    if (typeof onlyChild === 'string') {\n      text = onlyChild;\n    } else if (onlyChild !== undefined && onlyChild.length === 1 && typeof onlyChild[0] === 'string') {\n      text = onlyChild[0];\n    }\n  }\n  if (text === undefined) {\n    children = [];\n    for (; childIndex < arguments.length; childIndex++) {\n      let child = arguments[childIndex];\n      if (child === null || child === undefined) {\n        continue;\n      } else if (Array.isArray(child)) {\n        appendChildren(selector, child, children);\n      } else if (child.hasOwnProperty('vnodeSelector')) {\n        children.push(child);\n      } else {\n        children.push(toTextVNode(child));\n      }\n    }\n  }\n  return {\n    vnodeSelector: selector,\n    properties: properties,\n    children: children,\n    text: text,\n    domNode: null\n  };\n};\n\n/**\n * Contains simple low-level utility functions to manipulate the real DOM.\n */\nexport let dom = {\n\n  /**\n   * Creates a real DOM tree from `vnode`. The [[Projection]] object returned will contain the resulting DOM Node in\n   * its [[Projection.domNode|domNode]] property.\n   * This is a low-level method. Users wil typically use a [[Projector]] instead.\n   * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\n   * objects may only be rendered once.\n   * @param projectionOptions - Options to be used to create and update the projection.\n   * @returns The [[Projection]] which also contains the DOM Node that was created.\n   */\n  create: function(vnode: VNode, projectionOptions?: ProjectionOptions): Projection {\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n    createDom(vnode, document.createElement('div'), undefined, projectionOptions);\n    return createProjection(vnode, projectionOptions);\n  },\n\n  /**\n   * Appends a new childnode to the DOM which is generated from a [[VNode]].\n   * This is a low-level method. Users wil typically use a [[Projector]] instead.\n   * @param parentNode - The parent node for the new childNode.\n   * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]]\n   * objects may only be rendered once.\n   * @param projectionOptions - Options to be used to create and update the [[Projection]].\n   * @returns The [[Projection]] that was created.\n   */\n  append: function(parentNode: Element, vnode: VNode, projectionOptions?: ProjectionOptions): Projection {\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n    createDom(vnode, parentNode, undefined, projectionOptions);\n    return createProjection(vnode, projectionOptions);\n  },\n\n  /**\n   * Inserts a new DOM node which is generated from a [[VNode]].\n   * This is a low-level method. Users wil typically use a [[Projector]] instead.\n   * @param beforeNode - The node that the DOM Node is inserted before.\n   * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function.\n   * NOTE: [[VNode]] objects may only be rendered once.\n   * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\n   * @returns The [[Projection]] that was created.\n   */\n  insertBefore: function(beforeNode: Element, vnode: VNode, projectionOptions?: ProjectionOptions): Projection {\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n    createDom(vnode, beforeNode.parentNode, beforeNode, projectionOptions);\n    return createProjection(vnode, projectionOptions);\n  },\n\n  /**\n   * Merges a new DOM node which is generated from a [[VNode]] with an existing DOM Node.\n   * This means that the virtual DOM and the real DOM will have one overlapping element.\n   * Therefore the selector for the root [[VNode]] will be ignored, but its properties and children will be applied to the Element provided.\n   * This is a low-level method. Users wil typically use a [[Projector]] instead.\n   * @param domNode - The existing element to adopt as the root of the new virtual DOM. Existing attributes and childnodes are preserved.\n   * @param vnode - The root of the virtual DOM tree that was created using the [[h]] function. NOTE: [[VNode]] objects\n   * may only be rendered once.\n   * @param projectionOptions - Options to be used to create and update the projection, see [[createProjector]].\n   * @returns The [[Projection]] that was created.\n   */\n  merge: function(element: Element, vnode: VNode, projectionOptions?: ProjectionOptions): Projection {\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n    vnode.domNode = element;\n    initPropertiesAndChildren(element, vnode, projectionOptions);\n    return createProjection(vnode, projectionOptions);\n  }\n\n};\n\n/**\n * A CalculationCache object remembers the previous outcome of a calculation along with the inputs.\n * On subsequent calls the previous outcome is returned if the inputs are identical.\n * This object can be used to bypass both rendering and diffing of a virtual DOM subtree.\n * Instances of CalculationCache can be created using [[createCache]].\n *\n * @param <Result> The type of the value that is cached.\n */\nexport interface CalculationCache<Result> {\n  /**\n   * Manually invalidates the cached outcome.\n   */\n  invalidate(): void;\n  /**\n   * If the inputs array matches the inputs array from the previous invocation, this method returns the result of the previous invocation.\n   * Otherwise, the calculation function is invoked and its result is cached and returned.\n   * Objects in the inputs array are compared using ===.\n   * @param inputs - Array of objects that are to be compared using === with the inputs from the previous invocation.\n   * These objects are assumed to be immutable primitive values.\n   * @param calculation - Function that takes zero arguments and returns an object (A [[VNode]] assumably) that can be cached.\n   */\n  result(inputs: Object[], calculation: () => Result): Result;\n}\n\n/**\n * Creates a [[CalculationCache]] object, useful for caching [[VNode]] trees.\n * In practice, caching of [[VNode]] trees is not needed, because achieving 60 frames per second is almost never a problem.\n * For more information, see [[CalculationCache]].\n *\n * @param <Result> The type of the value that is cached.\n */\nexport let createCache = <Result>(): CalculationCache<Result> => {\n  let cachedInputs = undefined as Object[];\n  let cachedOutcome = undefined as Result;\n  let result = {\n\n    invalidate: function() {\n      cachedOutcome = undefined;\n      cachedInputs = undefined;\n    },\n\n    result: function(inputs: Object[], calculation: () => Result) {\n      if (cachedInputs) {\n        for (let i = 0; i < inputs.length; i++) {\n          if (cachedInputs[i] !== inputs[i]) {\n            cachedOutcome = undefined;\n          }\n        }\n      }\n      if (!cachedOutcome) {\n        cachedOutcome = calculation();\n        cachedInputs = inputs;\n      }\n      return cachedOutcome;\n    }\n  };\n  return result;\n};\n\n/**\n * Keeps an array of result objects synchronized with an array of source objects.\n * See {@link http://maquettejs.org/docs/arrays.html|Working with arrays}.\n *\n * Mapping provides a [[map]] function that updates its [[results]].\n * The [[map]] function can be called multiple times and the results will get created, removed and updated accordingly.\n * A Mapping can be used to keep an array of components (objects with a `renderMaquette` method) synchronized with an array of data.\n * Instances of Mapping can be created using [[createMapping]].\n *\n * @param <Source>   The type of source elements. Usually the data type.\n * @param <Target>   The type of target elements. Usually the component type.\n */\nexport interface Mapping<Source, Target> {\n  /**\n   * The array of results. These results will be synchronized with the latest array of sources that were provided using [[map]].\n   */\n  results: Array<Target>;\n  /**\n   * Maps a new array of sources and updates [[results]].\n   *\n   * @param newSources   The new array of sources.\n   */\n  map(newSources: Array<Source>): void;\n}\n\n/**\n * Creates a {@link Mapping} instance that keeps an array of result objects synchronized with an array of source objects.\n * See {@link http://maquettejs.org/docs/arrays.html|Working with arrays}.\n *\n * @param <Source>       The type of source items. A database-record for instance.\n * @param <Target>       The type of target items. A [[Component]] for instance.\n * @param getSourceKey   `function(source)` that must return a key to identify each source object. The result must either be a string or a number.\n * @param createResult   `function(source, index)` that must create a new result object from a given source. This function is identical\n *                       to the `callback` argument in `Array.map(callback)`.\n * @param updateResult   `function(source, target, index)` that updates a result to an updated source.\n */\nexport let createMapping = <Source, Target>(\n  getSourceKey: (source: Source) => (string | number),\n  createResult: (source: Source, index: number) => Target,\n  updateResult: (source: Source, target: Target, index: number) => void): Mapping<Source, Target> => {\n  let keys = [] as Object[];\n  let results = [] as Target[];\n\n  return {\n    results: results,\n    map: function(newSources: Source[]) {\n      let newKeys = newSources.map(getSourceKey);\n      let oldTargets = results.slice();\n      let oldIndex = 0;\n      for (let i = 0; i < newSources.length; i++) {\n        let source = newSources[i];\n        let sourceKey = newKeys[i];\n        if (sourceKey === keys[oldIndex]) {\n          results[i] = oldTargets[oldIndex];\n          updateResult(source, oldTargets[oldIndex], i);\n          oldIndex++;\n        } else {\n          let found = false;\n          for (let j = 1; j < keys.length; j++) {\n            let searchIndex = (oldIndex + j) % keys.length;\n            if (keys[searchIndex] === sourceKey) {\n              results[i] = oldTargets[searchIndex];\n              updateResult(newSources[i], oldTargets[searchIndex], i);\n              oldIndex = searchIndex + 1;\n              found = true;\n              break;\n            }\n          }\n          if (!found) {\n            results[i] = createResult(source, i);\n          }\n        }\n      }\n      results.length = newSources.length;\n      keys = newKeys;\n    }\n  };\n};\n\n/**\n * Creates a [[Projector]] instance using the provided projectionOptions.\n *\n * For more information, see [[Projector]].\n *\n * @param projectionOptions   Options that influence how the DOM is rendered and updated.\n */\nexport let createProjector = function(projectorOptions: ProjectorOptions): Projector {\n  let projector: Projector;\n  let projectionOptions = applyDefaultProjectionOptions(projectorOptions);\n  projectionOptions.eventHandlerInterceptor = function(propertyName: string, eventHandler: Function, domNode: Node, properties: VNodeProperties) {\n    return function() {\n      // intercept function calls (event handlers) to do a render afterwards.\n      projector.scheduleRender();\n      return eventHandler.apply(properties.bind || this, arguments);\n    };\n  };\n  let renderCompleted = true;\n  let scheduled: number;\n  let stopped = false;\n  let projections = [] as Projection[];\n  let renderFunctions = [] as (() => VNode)[]; // matches the projections array\n\n  let doRender = function() {\n    scheduled = undefined;\n    if (!renderCompleted) {\n      return; // The last render threw an error, it should be logged in the browser console.\n    }\n    renderCompleted = false;\n    for (let i = 0; i < projections.length; i++) {\n      let updatedVnode = renderFunctions[i]();\n      projections[i].update(updatedVnode);\n    }\n    renderCompleted = true;\n  };\n\n  projector = {\n    scheduleRender: function() {\n      if (!scheduled && !stopped) {\n        scheduled = requestAnimationFrame(doRender);\n      }\n    },\n    stop: function() {\n      if (scheduled) {\n        cancelAnimationFrame(scheduled);\n        scheduled = undefined;\n      }\n      stopped = true;\n    },\n\n    resume: function() {\n      stopped = false;\n      renderCompleted = true;\n      projector.scheduleRender();\n    },\n\n    append: function(parentNode, renderMaquetteFunction) {\n      projections.push(dom.append(parentNode, renderMaquetteFunction(), projectionOptions));\n      renderFunctions.push(renderMaquetteFunction);\n    },\n\n    insertBefore: function(beforeNode, renderMaquetteFunction) {\n      projections.push(dom.insertBefore(beforeNode, renderMaquetteFunction(), projectionOptions));\n      renderFunctions.push(renderMaquetteFunction);\n    },\n\n    merge: function(domNode, renderMaquetteFunction) {\n      projections.push(dom.merge(domNode, renderMaquetteFunction(), projectionOptions));\n      renderFunctions.push(renderMaquetteFunction);\n    },\n\n    replace: function(domNode, renderMaquetteFunction) {\n      let vnode = renderMaquetteFunction();\n      createDom(vnode, domNode.parentNode, domNode, projectionOptions);\n      domNode.parentNode.removeChild(domNode);\n      projections.push(createProjection(vnode, projectionOptions));\n      renderFunctions.push(renderMaquetteFunction);\n    }\n  };\n  return projector;\n};\n\n/**\n * A component is a pattern with which you can split up your web application into self-contained parts.\n *\n * A component may contain other components.\n * This can be achieved by calling the subcomponents `renderMaquette` functions during the [[renderMaquette]] function and by using the\n * resulting [[VNode]]s in the return value.\n *\n * This interface is not used anywhere in the maquette sourcecode, but this is a widely used pattern.\n */\nexport interface Component {\n  /**\n   * A function that returns the DOM representation of the component.\n   */\n  renderMaquette(): VNode;\n}\n"],"sourceRoot":"/source/"}