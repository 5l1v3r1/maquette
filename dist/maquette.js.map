{"version":3,"sources":["/source/maquette.ts"],"names":["NAMESPACE_SVG","emptyArray","extend","base","overrides","result","Object","keys","forEach","key","same","vnode1","vnode2","vnodeSelector","properties","toTextVNode","data","undefined","children","text","toString","domNode","appendChildren","parentSelector","insertions","main","i","length","item","Array","isArray","hasOwnProperty","push","missingTransition","Error","DEFAULT_PROJECTION_OPTIONS","namespace","eventHandlerInterceptor","styleApplyer","styleName","value","style","transitions","enter","exit","applyDefaultProjectionOptions","projectionOptions","checkStyleValue","styleValue","setProperties","propNames","propCount","propName","propValue","classNames","classNameCount","j","className","classList","add","styleNames","styleCount","type","lastIndexOf","oldPropValue","evt","target","apply","setAttribute","updateProperties","previousProperties","propertiesUpdated","previousValue","on","previousOn","remove","newStyleValue","oldStyleValue","findIndexOfChild","sameAs","start","nodeAdded","vNode","enterAnimation","nodeToRemove","exitAnimation","pointerEvents","removeDomNode","parentNode","removeChild","checkDistinguishable","childNodes","indexToCheck","parentVNode","operation","childNode","node","createDom","updateDom","updateChildren","vnode","oldChildren","newChildren","oldChildrenLength","newChildrenLength","oldIndex","newIndex","textUpdated","oldChild","newChild","findOldIndex","addChildren","initPropertiesAndChildren","textContent","afterCreate","insertBefore","c","found","document","createTextNode","appendChild","charAt","slice","id","createElementNS","createElement","previous","updated","nodeValue","firstChild","afterUpdate","updateAnimation","createProjection","update","updatedVnode","exports","h","selector","arguments","childIndex","argsLength","onlyChild","child","dom","create","append","beforeNode","merge","element","createCache","cachedInputs","cachedOutcome","invalidate","inputs","calculation","createMapping","getSourceKey","createResult","updateResult","results","map","newSources","newKeys","oldTargets","source","sourceKey","searchIndex","createProjector","projector","propertyName","functionPropertyArgument","scheduleRender","renderCompleted","scheduled","stopped","projections","renderFunctions","doRender","requestAnimationFrame","stop","cancelAnimationFrame","resume","renderMaquetteFunction","replace"],"mappings":"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","file":"maquette.js","sourcesContent":["/**\n * A virtual representation of a DOM Node. Maquette assumes that {@link VNode} objects are never modified externally.\n * Instances of {@link VNode} can be created using {@link module:maquette.h}.\n */\nexport interface VNode {\n  /**\n   * The CSS selector containing tagname, css classnames and id. An empty string is used to denote a text node.\n   */\n  vnodeSelector: string;\n  /**\n   * Object containing attributes, properties, event handlers and more @see module:maquette.h\n   */\n  properties: VNodeProperties;\n  /**\n   * Array of VNodes to be used as children. This array is already flattened.\n   */\n  children: Array<VNode>;\n  /**\n   * Used in a special case when a VNode only has one childnode which is a textnode. Only used in combination with children === undefined.\n   */\n  text: string;\n  /**\n   * Used by maquette to store the domNode that was produced from this {@link VNode}.\n   */\n  domNode: Node;\n}\n\n/**\n * Used to create and update the DOM.\n * Use {@link Projector#append}, {@link Projector#merge}, {@link Projector#insertBefore} and {@link Projector#replace}\n * to create the DOM.\n * The `renderMaquetteFunction` callbacks will be called immediately to create the DOM. Afterwards, these functions\n * will be called again to update the DOM on the next animation-frame after:\n *\n *  - The {@link Projector#scheduleRender} function  was called\n *  - An event handler (like `onclick`) on a rendered {@link VNode} was called.\n *\n * The projector stops when {@link Projector#stop} is called or when an error is thrown during rendering.\n * It is possible to use `window.onerror` to handle these errors.\n * Instances of {@link Projector} can be created using {@link module:maquette.createProjector}.\n */\nexport interface Projector {\n  /**\n   * Appends a new childnode to the DOM using the result from the provided `renderMaquetteFunction`.\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\n   * @param {Element} parentNode - The parent node for the new childNode.\n   * @param {function} renderMaquetteFunction - Function with zero arguments that returns a {@link VNode} tree.\n   */\n  append(parentNode: Element, renderMaquetteFunction: () => VNode): void;\n  /**\n   * Inserts a new DOM node using the result from the provided `renderMaquetteFunction`.\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\n   * @param {Element} beforeNode - The node that the DOM Node is inserted before.\n   * @param {function} renderMaquetteFunction - Function with zero arguments that returns a {@link VNode} tree.\n   */\n  insertBefore(beforeNode: Element, renderMaquetteFunction: () => VNode): void;\n  /**\n   * Merges a new DOM node using the result from the provided `renderMaquetteFunction` with an existing DOM Node.\n   * This means that the virtual DOM and real DOM have one overlapping element.\n   * Therefore the selector for the root {VNode} will be ignored, but its properties and children will be applied to the Element provided\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\n   * @param {Element} domNode - The existing element to adopt as the root of the new virtual DOM. Existing attributes and childnodes are preserved.\n   * @param {function} renderMaquetteFunction - Function with zero arguments that returns a {@link VNode} tree.\n   */\n  merge(domNode: Element, renderMaquetteFunction: () => VNode): void;\n  /**\n   * Replaces an existing DOM node with the result from the provided `renderMaquetteFunction`.\n   * The `renderMaquetteFunction` will be invoked again to update the DOM when needed.\n   * @param {Element} domNode - The DOM node to replace.\n   * @param {function} renderMaquetteFunction - Function with zero arguments that returns a {@link VNode} tree.\n   */\n  replace(domNode: Element, renderMaquetteFunction: () => VNode): void;\n  /**\n   * Resumes the projector. Use this method to resume rendering after stop was called or an error occurred during rendering.\n   */\n  resume(): void;\n  /**\n   * Instructs the projector to re-render to the DOM at the next animation-frame using the registered `renderMaquette` functions.\n   * This method is automatically called for you when event-handlers that are registered in the {@link VNode}s are invoked.\n   * You need to call this method for instance when timeouts expire or AJAX responses arrive.\n   */\n  scheduleRender(): void;\n  /**\n   * Stops the projector. This means that the registered `renderMaquette` functions will not be called anymore.\n   * Note that calling {@link Projector#stop} is not mandatory. A projector is a passive object that will get garbage collected\n   * as usual if it is no longer in scope.\n   */\n  stop(): void;\n}\n\nexport interface Transitions {\n  enter: (element: Element, properties: VNodeProperties, enterAnimation: string) => void;\n  exit: (element: Element, properties: VNodeProperties, exitAnimation: string, removeElement: () => void) => void;\n};\n\nexport interface ProjectionOptions {\n  transitions?: Transitions;\n  /**\n   * Only for internal use.\n   */\n  namespace: string;\n  eventHandlerInterceptor: Function;\n  styleApplyer: (domNode: HTMLElement, styleName: string, value: string) => void;\n};\n\nexport interface VNodeProperties {\n  /**\n   * The animation to perform when this node is added to an already existing parent.\n   * When this value is a string, you must pass a `projectionOptions.transitions` object when creating the\n   * projector {@link module:maquette.createProjector}.\n   * {@link http://maquettejs.org/docs/animations.html|More about animations}.\n   * @param {Element} element - Element that was just added to the DOM.\n   * @param {Object} properties - The properties object that was supplied to the {@link module:maquette.h} method\n   */\n  enterAnimation?: ((element: Element, properties?: VNodeProperties) => void) | string;\n  /**\n   * The animation to perform when this node is removed while its parent remains.\n   * When this value is a string, you must pass a `projectionOptions.transitions` object when creating the projector {@link module:maquette.createProjector}.\n   * {@link http://maquettejs.org/docs/animations.html|More about animations}.\n   * @param {Element} element - Element that ought to be removed from to the DOM.\n   * @param {function(Element)} removeElement - Function that removes the element from the DOM.\n   * This argument is supplied purely for convenience.\n   * You may use this function to remove the element when the animation is done.\n   * @param {Object} properties - The properties object that was supplied to the {@link module:maquette.h} method that rendered this {@link VNode}\n   * the previous time.\n   */\n  exitAnimation?: ((element: Element, removeElement: () => void, properties?: VNodeProperties) => void) | string;\n  /**\n   * The animation to perform when the properties of this node change.\n   * This also includes attributes, styles, css classes. This callback is also invoked when node contains only text and that text changes.\n   * {@link http://maquettejs.org/docs/animations.html|More about animations}.\n   * @param {Element} element - Element that was modified in the DOM.\n   * @param {Object} properties - The last properties object that was supplied to the {@link module:maquette.h} method\n   * @param {Object} previousProperties - The previous properties object that was supplied to the {@link module:maquette.h} method\n   */\n  updateAnimation?: (element: Element, properties?: VNodeProperties, previousProperties?: VNodeProperties) => void;\n  /**\n   * Callback that is executed after this node is added to the DOM. Childnodes and properties have\n   * already been applied.\n   * @param {Element} element - The element that was added to the DOM.\n   * @param {Object} projectionOptions - The projection options that were used see {@link module:maquette.createProjector}.\n   * @param {string} vnodeSelector - The selector passed to the {@link module:maquette.h} function.\n   * @param {Object} properties - The properties passed to the {@link module:maquette.h} function.\n   * @param {VNode[]} children - The children that were created.\n   * @param {Object} properties - The last properties object that was supplied to the {@link module:maquette.h} method\n   * @param {Object} previousProperties - The previous properties object that was supplied to the {@link module:maquette.h} method\n   */\n  afterCreate?: (element: Element, projectionOptions: ProjectionOptions, vnodeSelector: string, properties: VNodeProperties,\n    children: VNode[]) => void;\n  /**\n   * Callback that is executed every time this node may have been updated. Childnodes and properties\n   * have already been updated.\n   * @param {Element} element - The element that may have been updated in the DOM.\n   * @param {Object} projectionOptions - The projection options that were used see {@link module:maquette.createProjector}.\n   * @param {string} vnodeSelector - The selector passed to the {@link module:maquette.h} function.\n   * @param {Object} properties - The properties passed to the {@link module:maquette.h} function.\n   * @param {VNode[]} children - The children for this node.\n   */\n  afterUpdate?: (element: Element, projectionOptions: ProjectionOptions, vnodeSelector: string, properties: VNodeProperties,\n    children: VNode[]) => void;\n  /**\n   * Used to uniquely identify a DOM node among siblings.\n   * A key is required when there are more children with the same selector and these children are added or removed dynamically.\n   * NOTE: this does not have to be a string or number, a {@link Component} Object is also possible.\n   */\n  key?: Object;\n  /**\n   * An object literal like `{important:true}` which allows css classes, like `important` to be added and removed\n   * dynamically.\n   */\n  classes?: {[index: string]: boolean};\n  /**\n   * An object literal like `{height:'100px'}` which allows styles to be changed dynamically. All values must be strings.\n   */\n  styles?: {[index: string]: string};\n\n  // From Element\n  ontouchcancel?: (ev?: TouchEvent) => boolean|void;\n  ontouchend?: (ev?: TouchEvent) => boolean|void;\n  ontouchmove?: (ev?: TouchEvent) => boolean|void;\n  ontouchstart?: (ev?: TouchEvent) => boolean|void;\n  // From HTMLFormElement\n  action?: string;\n  encoding?: string;\n  enctype?: string;\n  method?: string;\n  name?: string;\n  target?: string;\n  // From HTMLElement\n  onblur?: (ev?: FocusEvent) => boolean|void;\n  onchange?: (ev?: Event) => boolean|void;\n  onclick?: (ev?: MouseEvent) => boolean|void;\n  ondblclick?: (ev?: MouseEvent) => boolean|void;\n  onfocus?: (ev?: FocusEvent) => boolean|void;\n  oninput?: (ev?: Event) => boolean|void;\n  onkeydown?: (ev?: KeyboardEvent) => boolean|void;\n  onkeypress?: (ev?: KeyboardEvent) => boolean|void;\n  onkeyup?: (ev?: KeyboardEvent) => boolean|void;\n  onload?: (ev?: Event) => boolean|void;\n  onmousedown?: (ev?: MouseEvent) => boolean|void;\n  onmouseenter?: (ev?: MouseEvent) => boolean|void;\n  onmouseleave?: (ev?: MouseEvent) => boolean|void;\n  onmousemove?: (ev?: MouseEvent) => boolean|void;\n  onmouseout?: (ev?: MouseEvent) => boolean|void;\n  onmouseover?: (ev?: MouseEvent) => boolean|void;\n  onmouseup?: (ev?: MouseEvent) => boolean|void;\n  onmousewheel?: (ev?: MouseWheelEvent) => boolean|void;\n  onscroll?: (ev?: UIEvent) => boolean|void;\n  onsubmit?: (ev?: Event) => boolean|void;\n  spellcheck?: boolean;\n  tabIndex?: number;\n  title?: string;\n  accessKey?: string;\n  id?: string;\n  // From HTMLInputElement\n  autocomplete?: string;\n  checked?: boolean;\n  placeholder?: string;\n  readOnly?: boolean;\n  src?: string;\n  value?: string;\n  // From HTMLImageElement\n  alt?: string;\n  srcset?: string;\n\n  /**\n   * Everything else (properties and attributes that are either uncommon or custom)\n   */\n  [index: string]: any;\n};\n\n/**\n * Represents a {@link VNode} tree that has been rendered to a real DOM tree.\n */\nexport interface Projection {\n  /**\n   * The DOM node that is used as the root of this {@link Projection}.\n   * @type {Element}\n   */\n  domNode: Element;\n  /**\n   * Updates the projection with the new virtual DOM tree.\n   * @param {VNode} updatedVnode - The updated virtual DOM tree. Note: The selector for the root of the tree must remain constant.\n   */\n  update(updatedVnode: VNode): void;\n}\n\n\nconst NAMESPACE_SVG = 'http://www.w3.org/2000/svg';\n\n// Utilities\n\nlet emptyArray = <VNode[]>[];\n\nlet extend = <T>(base: T, overrides: any): T => {\n  let result = {} as any;\n  Object.keys(base).forEach(function(key) {\n    result[key] = (base as any)[key];\n  });\n  if (overrides) {\n    Object.keys(overrides).forEach(function(key) {\n      result[key] = overrides[key];\n    });\n  }\n  return result;\n};\n\n// Hyperscript helper functions\n\nlet same = function(vnode1: VNode, vnode2: VNode) {\n  if (vnode1.vnodeSelector !== vnode2.vnodeSelector) {\n    return false;\n  }\n  if (vnode1.properties && vnode2.properties) {\n    return vnode1.properties.key === vnode2.properties.key;\n  }\n  return !vnode1.properties && !vnode2.properties;\n};\n\nlet toTextVNode = (data: any): VNode => {\n  return {\n    vnodeSelector: '',\n    properties: undefined,\n    children: undefined,\n    text: (data === null || data === undefined) ? '' : data.toString(),\n    domNode: null\n  };\n};\n\nlet appendChildren = function(parentSelector: string, insertions: any[], main: VNode[]) {\n  for (let i = 0; i < insertions.length; i++) {\n    let item = insertions[i];\n    if (Array.isArray(item)) {\n      appendChildren(parentSelector, item, main);\n    } else {\n      if (item !== null && item !== undefined) {\n        if (!item.hasOwnProperty('vnodeSelector')) {\n          item = toTextVNode(item);\n        }\n        main.push(item);\n      }\n    }\n  }\n};\n\n// Render helper functions\n\nlet missingTransition = function() {\n  throw new Error('Provide a transitions object to the projectionOptions to do animations');\n};\n\nconst DEFAULT_PROJECTION_OPTIONS: ProjectionOptions = {\n  namespace: undefined,\n  eventHandlerInterceptor: undefined,\n  styleApplyer: function(domNode: HTMLElement, styleName: string, value: string) {\n    // Provides a hook to add vendor prefixes for browsers that still need it.\n    (domNode.style as any)[styleName] = value;\n  },\n  transitions: {\n    enter: missingTransition,\n    exit: missingTransition\n  }\n};\n\nlet applyDefaultProjectionOptions = function(projectionOptions: ProjectionOptions) {\n  return extend(DEFAULT_PROJECTION_OPTIONS, projectionOptions);\n};\n\nlet checkStyleValue = function(styleValue: Object) {\n  if (typeof styleValue !== 'string') {\n    throw new Error('Style values must be strings');\n  }\n};\n\nlet setProperties = function(domNode: Node, properties: VNodeProperties, projectionOptions: ProjectionOptions) {\n  if (!properties) {\n    return;\n  }\n  let eventHandlerInterceptor = projectionOptions.eventHandlerInterceptor;\n  let propNames = Object.keys(properties);\n  let propCount = propNames.length;\n  for (let i = 0; i < propCount; i++) {\n    let propName = propNames[i];\n    /* tslint:disable:no-var-keyword: edge case */\n    var propValue = properties[propName];\n    /* tslint:enable:no-var-keyword */\n    if (propName === 'class' || propName === 'className' || propName === 'classList') {\n      throw new Error('Property ' + propName + ' is not supported, use classes.');\n    } else if (propName === 'classes') {\n      // object with string keys and boolean values\n      let classNames = Object.keys(propValue);\n      let classNameCount = classNames.length;\n      for (let j = 0; j < classNameCount; j++) {\n        let className = classNames[j];\n        if (propValue[className]) {\n          (domNode as Element).classList.add(className);\n        }\n      }\n    } else if (propName === 'styles') {\n      // object with string keys and string (!) values\n      let styleNames = Object.keys(propValue);\n      let styleCount = styleNames.length;\n      for (let j = 0; j < styleCount; j++) {\n        let styleName = styleNames[j];\n        let styleValue = propValue[styleName];\n        if (styleValue) {\n          checkStyleValue(styleValue);\n          projectionOptions.styleApplyer(<HTMLElement>domNode, styleName, styleValue);\n        }\n      }\n    } else if (propName === 'key') {\n      continue;\n    } else if (propValue === null || propValue === undefined) {\n      continue;\n    } else {\n      let type = typeof propValue;\n      if (type === 'function') {\n        if (eventHandlerInterceptor && (propName.lastIndexOf('on', 0) === 0)) { // lastIndexOf(,0)===0 -> startsWith\n          propValue = eventHandlerInterceptor(propName, propValue, domNode, properties); // intercept eventhandlers\n          if (propName === 'oninput') {\n            (function() {\n              // record the evt.target.value, because IE sometimes does a requestAnimationFrame between changing value and running oninput\n              let oldPropValue = propValue;\n              propValue = function(evt: Event) {\n                (evt.target as any)['oninput-value'] = (evt.target as HTMLInputElement).value; // may be HTMLTextAreaElement as well\n                oldPropValue.apply(this, [evt]);\n              };\n            } ());\n          }\n        }\n        (domNode as any)[propName] = propValue;\n      } else if (type === 'string' && propName !== 'value') {\n        (domNode as Element).setAttribute(propName, propValue);\n      } else {\n        (domNode as any)[propName] = propValue;\n      }\n    }\n  }\n};\n\nlet updateProperties = function(domNode: Node, previousProperties: VNodeProperties, properties: VNodeProperties, projectionOptions: ProjectionOptions) {\n  if (!properties) {\n    return;\n  }\n  let propertiesUpdated = false;\n  let propNames = Object.keys(properties);\n  let propCount = propNames.length;\n  for (let i = 0; i < propCount; i++) {\n    let propName = propNames[i];\n    // assuming that properties will be nullified instead of missing is by design\n    let propValue = properties[propName];\n    let previousValue = previousProperties[propName];\n    if (propName === 'classes') {\n      let classList = (domNode as Element).classList;\n      let classNames = Object.keys(propValue);\n      let classNameCount = classNames.length;\n      for (let j = 0; j < classNameCount; j++) {\n        let className = classNames[j];\n        let on = !!propValue[className];\n        let previousOn = !!previousValue[className];\n        if (on === previousOn) {\n          continue;\n        }\n        propertiesUpdated = true;\n        if (on) {\n          classList.add(className);\n        } else {\n          classList.remove(className);\n        }\n      }\n    } else if (propName === 'styles') {\n      let styleNames = Object.keys(propValue);\n      let styleCount = styleNames.length;\n      for (let j = 0; j < styleCount; j++) {\n        let styleName = styleNames[j];\n        let newStyleValue = propValue[styleName];\n        let oldStyleValue = previousValue[styleName];\n        if (newStyleValue === oldStyleValue) {\n          continue;\n        }\n        propertiesUpdated = true;\n        if (newStyleValue) {\n          checkStyleValue(newStyleValue);\n          projectionOptions.styleApplyer(domNode as HTMLElement, styleName, newStyleValue);\n        } else {\n          projectionOptions.styleApplyer(domNode as HTMLElement, styleName, '');\n        }\n      }\n    } else {\n      if (!propValue && typeof previousValue === 'string') {\n        propValue = '';\n      }\n      if (propName === 'value') { // value can be manipulated by the user directly and using event.preventDefault() is not an option\n        if ((domNode as any)[propName] !== propValue && (domNode as any)['oninput-value'] !== propValue) {\n          (domNode as any)[propName] = propValue; // Reset the value, even if the virtual DOM did not change\n          (domNode as any)['oninput-value'] = undefined;\n        } // else do not update the domNode, otherwise the cursor position would be changed\n        if (propValue !== previousValue) {\n          propertiesUpdated = true;\n        }\n      } else if (propValue !== previousValue) {\n        let type = typeof propValue;\n        if (type === 'function') {\n          throw new Error('Functions may not be updated on subsequent renders (property: ' + propName +\n            '). Hint: declare event handler functions outside the render() function.');\n        }\n        if (type === 'string') {\n          (domNode as Element).setAttribute(propName, propValue);\n        } else {\n          if ((domNode as any)[propName] !== propValue) { // Comparison is here for side-effects in Edge with scrollLeft and scrollTop\n            (domNode as any)[propName] = propValue;\n          }\n        }\n        propertiesUpdated = true;\n      }\n    }\n  }\n  return propertiesUpdated;\n};\n\nlet findIndexOfChild = function(children: VNode[], sameAs: VNode, start: number) {\n  if (sameAs.vnodeSelector !== '') {\n    // Never scan for text-nodes\n    for (let i = start; i < children.length; i++) {\n      if (same(children[i], sameAs)) {\n        return i;\n      }\n    }\n  }\n  return -1;\n};\n\nlet nodeAdded = function(vNode: VNode, transitions: Transitions) {\n  if (vNode.properties) {\n    let enterAnimation = vNode.properties.enterAnimation;\n    if (enterAnimation) {\n      if (typeof enterAnimation === 'function') {\n        enterAnimation(vNode.domNode as Element, vNode.properties);\n      } else {\n        transitions.enter(vNode.domNode as Element, vNode.properties, enterAnimation as string);\n      }\n    }\n  }\n};\n\nlet nodeToRemove = function(vNode: VNode, transitions: Transitions) {\n  let domNode = vNode.domNode;\n  if (vNode.properties) {\n    let exitAnimation = vNode.properties.exitAnimation;\n    if (exitAnimation) {\n      (domNode as HTMLElement).style.pointerEvents = 'none';\n      let removeDomNode = function() {\n        if (domNode.parentNode) {\n          domNode.parentNode.removeChild(domNode);\n        }\n      };\n      if (typeof exitAnimation === 'function') {\n        exitAnimation(domNode as Element, removeDomNode, vNode.properties);\n        return;\n      } else {\n        transitions.exit(vNode.domNode as Element, vNode.properties, exitAnimation as string, removeDomNode);\n        return;\n      }\n    }\n  }\n  if (domNode.parentNode) {\n    domNode.parentNode.removeChild(domNode);\n  }\n};\n\nlet checkDistinguishable = function(childNodes: VNode[], indexToCheck: number, parentVNode: VNode, operation: string) {\n  let childNode = childNodes[indexToCheck];\n  if (childNode.vnodeSelector === '') {\n    return; // Text nodes need not be distinguishable\n  }\n  let key = childNode.properties ? childNode.properties.key : undefined;\n  if (!key) { // A key is just assumed to be unique\n    for (let i = 0; i < childNodes.length; i++) {\n      if (i !== indexToCheck) {\n        let node = childNodes[i];\n        if (same(node, childNode)) {\n          if (operation === 'added') {\n            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' +\n              'added, but there is now more than one. You must add unique key properties to make them distinguishable.');\n          } else {\n            throw new Error(parentVNode.vnodeSelector + ' had a ' + childNode.vnodeSelector + ' child ' +\n              'removed, but there were more than one. You must add unique key properties to make them distinguishable.');\n          }\n        }\n      }\n    }\n  }\n};\n\nlet createDom: (vnode: VNode, parentNode: Node, insertBefore: Node, projectionOptions: ProjectionOptions) => void;\nlet updateDom: (previous: VNode, vnode: VNode, projectionOptions: ProjectionOptions) => boolean;\n\nlet updateChildren = function(vnode: VNode, domNode: Node, oldChildren: VNode[], newChildren: VNode[], projectionOptions: ProjectionOptions) {\n  if (oldChildren === newChildren) {\n    return false;\n  }\n  oldChildren = oldChildren || emptyArray;\n  newChildren = newChildren || emptyArray;\n  let oldChildrenLength = oldChildren.length;\n  let newChildrenLength = newChildren.length;\n  let transitions = projectionOptions.transitions;\n\n  let oldIndex = 0;\n  let newIndex = 0;\n  let i: number;\n  let textUpdated = false;\n  while (newIndex < newChildrenLength) {\n    let oldChild = (oldIndex < oldChildrenLength) ? oldChildren[oldIndex] : undefined;\n    let newChild = newChildren[newIndex];\n    if (oldChild !== undefined && same(oldChild, newChild)) {\n      textUpdated = updateDom(oldChild, newChild, projectionOptions) || textUpdated;\n      oldIndex++;\n    } else {\n      let findOldIndex = findIndexOfChild(oldChildren, newChild, oldIndex + 1);\n      if (findOldIndex >= 0) {\n        // Remove preceding missing children\n        for (i = oldIndex; i < findOldIndex; i++) {\n          nodeToRemove(oldChildren[i], transitions);\n          checkDistinguishable(oldChildren, i, vnode, 'removed');\n        }\n        textUpdated = updateDom(oldChildren[findOldIndex], newChild, projectionOptions) || textUpdated;\n        oldIndex = findOldIndex + 1;\n      } else {\n        // New child\n        createDom(newChild, domNode, (oldIndex < oldChildrenLength) ? oldChildren[oldIndex].domNode : undefined, projectionOptions);\n        nodeAdded(newChild, transitions);\n        checkDistinguishable(newChildren, newIndex, vnode, 'added');\n      }\n    }\n    newIndex++;\n  }\n  if (oldChildrenLength > oldIndex) {\n    // Remove child fragments\n    for (i = oldIndex; i < oldChildrenLength; i++) {\n      nodeToRemove(oldChildren[i], transitions);\n      checkDistinguishable(oldChildren, i, vnode, 'removed');\n    }\n  }\n  return textUpdated;\n};\n\nlet addChildren = function(domNode: Node, children: VNode[], projectionOptions: ProjectionOptions) {\n  if (!children) {\n    return;\n  }\n  for (let i = 0; i < children.length; i++) {\n    createDom(children[i], domNode, undefined, projectionOptions);\n  }\n};\n\nlet initPropertiesAndChildren = function(domNode: Node, vnode: VNode, projectionOptions: ProjectionOptions) {\n  addChildren(domNode, vnode.children, projectionOptions); // children before properties, needed for value property of <select>.\n  if (vnode.text) {\n    domNode.textContent = vnode.text;\n  }\n  setProperties(domNode, vnode.properties, projectionOptions);\n  if (vnode.properties && vnode.properties.afterCreate) {\n    vnode.properties.afterCreate(domNode as Element, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children);\n  }\n};\n\ncreateDom = function(vnode, parentNode, insertBefore, projectionOptions) {\n  let domNode: Node, i: number, c: string, start = 0, type: string, found: string;\n  let vnodeSelector = vnode.vnodeSelector;\n  if (vnodeSelector === '') {\n    domNode = vnode.domNode = document.createTextNode(vnode.text);\n    if (insertBefore !== undefined) {\n      parentNode.insertBefore(domNode, insertBefore);\n    } else {\n      parentNode.appendChild(domNode);\n    }\n  } else {\n    for (i = 0; i <= vnodeSelector.length; ++i) {\n      c = vnodeSelector.charAt(i);\n      if (i === vnodeSelector.length || c === '.' || c === '#') {\n        type = vnodeSelector.charAt(start - 1);\n        found = vnodeSelector.slice(start, i);\n        if (type === '.') {\n          (domNode as HTMLElement).classList.add(found);\n        } else if (type === '#') {\n          (domNode as Element).id = found;\n        } else {\n          if (found === 'svg') {\n            projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\n          }\n          if (projectionOptions.namespace !== undefined) {\n            domNode = vnode.domNode = document.createElementNS(projectionOptions.namespace, found);\n          } else {\n            domNode = vnode.domNode = document.createElement(found);\n          }\n          if (insertBefore !== undefined) {\n            parentNode.insertBefore(domNode, insertBefore);\n          } else {\n            parentNode.appendChild(domNode);\n          }\n        }\n        start = i + 1;\n      }\n    }\n    initPropertiesAndChildren(domNode, vnode, projectionOptions);\n  }\n};\n\nupdateDom = function(previous, vnode, projectionOptions) {\n  let domNode = previous.domNode;\n  if (!domNode) {\n    throw new Error('previous node was not rendered');\n  }\n  let textUpdated = false;\n  if (previous === vnode) {\n    return textUpdated; // we assume that nothing has changed\n  }\n  let updated = false;\n  if (vnode.vnodeSelector === '') {\n    if (vnode.text !== previous.text) {\n      domNode.nodeValue = vnode.text;\n      textUpdated = true;\n    }\n  } else {\n    if (vnode.vnodeSelector.lastIndexOf('svg', 0) === 0) { // lastIndexOf(needle,0)===0 means StartsWith\n      projectionOptions = extend(projectionOptions, { namespace: NAMESPACE_SVG });\n    }\n    if (previous.text !== vnode.text) {\n      updated = true;\n      if (vnode.text === undefined) {\n        domNode.removeChild(domNode.firstChild); // the only textnode presumably\n      } else {\n        domNode.textContent = vnode.text;\n      }\n    }\n    updated = updateChildren(vnode, domNode, previous.children, vnode.children, projectionOptions) || updated;\n    updated = updateProperties(domNode, previous.properties, vnode.properties, projectionOptions) || updated;\n    if (vnode.properties && vnode.properties.afterUpdate) {\n      vnode.properties.afterUpdate(<Element>domNode, projectionOptions, vnode.vnodeSelector, vnode.properties, vnode.children);\n    }\n  }\n  if (updated && vnode.properties && vnode.properties.updateAnimation) {\n    vnode.properties.updateAnimation(<Element>domNode, vnode.properties, previous.properties);\n  }\n  vnode.domNode = previous.domNode;\n  return textUpdated;\n};\n\nlet createProjection = function(vnode: VNode, projectionOptions: ProjectionOptions): Projection {\n  if (!vnode.vnodeSelector) {\n    throw new Error('Invalid vnode argument');\n  }\n  return {\n    update: function(updatedVnode: VNode) {\n      if (vnode.vnodeSelector !== updatedVnode.vnodeSelector) {\n        throw new Error('The selector for the root VNode may not be changed. (consider using dom.merge and add one extra level to the virtual DOM)');\n      }\n      updateDom(vnode, updatedVnode, projectionOptions);\n      vnode = updatedVnode;\n    },\n    domNode: <Element>vnode.domNode\n  };\n};\n\n/**\n * The following line is not possible in Typescript, hence the workaround in the two lines below\n * export type VNodeChild = string|VNode|Array<VNodeChild>\n */\nexport interface VNodeChildren extends Array<VNodeChild> {} // A bit of a hack to create a recursive type\n/**\n * These are valid values for the children parameter of the h() function.\n */\nexport type VNodeChild = string|VNode|VNodeChildren;\n\n/**\n * The `h` method is used to create a virtual DOM node.\n * This function is largely inspired by the mercuryjs and mithril frameworks.\n * The `h` stands for (virtual) hyperscript.\n *\n * @param {string} selector - Contains the tagName, id and fixed css classnames in CSS selector format.\n * It is formatted as follows: `tagname.cssclass1.cssclass2#id`.\n * @param {Object} [properties] - An object literal containing properties that will be placed on the DOM node.\n * @param {Object[]} [children] - An array of virtual DOM nodes to add as child nodes.\n * This array may contain nested arrays, `null` or `undefined` values.\n * Nested arrays are flattened, `null` and `undefined` will be skipped.\n *\n * @returns {VNode} A VNode object, used to render a real DOM later.\n * NOTE: There are {@link http://maquettejs.org/docs/rules.html|three basic rules} you should be aware of when updating the virtual DOM.\n */\nexport let h: (selector: string, properties?: VNodeProperties, ...children: VNodeChild[]) => VNode;\n\nh = function(selector: string): VNode {\n  let properties = arguments[1];\n  if (typeof selector !== 'string') {\n    throw new Error();\n  }\n  let childIndex = 1;\n  if (properties && !properties.hasOwnProperty('vnodeSelector') && !Array.isArray(properties) && typeof properties === 'object') {\n    childIndex = 2;\n  } else {\n    // Optional properties argument was omitted\n    properties = undefined;\n  }\n  let text = undefined as string;\n  let children = undefined as VNode[];\n  let argsLength = arguments.length;\n  // Recognize a common special case where there is only a single text node\n  if (argsLength === childIndex + 1) {\n    let onlyChild = arguments[childIndex];\n    if (typeof onlyChild === 'string') {\n      text = onlyChild;\n    } else if (onlyChild !== undefined && onlyChild.length === 1 && typeof onlyChild[0] === 'string') {\n      text = onlyChild[0];\n    }\n  }\n  if (text === undefined) {\n    children = [];\n    for (; childIndex < arguments.length; childIndex++) {\n      let child = arguments[childIndex];\n      if (child === null || child === undefined) {\n        continue;\n      } else if (Array.isArray(child)) {\n        appendChildren(selector, child, children);\n      } else if (child.hasOwnProperty('vnodeSelector')) {\n        children.push(child);\n      } else {\n        children.push(toTextVNode(child));\n      }\n    }\n  }\n  return {\n    vnodeSelector: selector,\n    properties: properties,\n    children: children,\n    text: text,\n    domNode: null\n  };\n};\n\n/**\n * The interface of the maquette.dom singleton\n */\nexport interface MaquetteDom {\n  /**\n   * Creates a real DOM tree from a {@link VNode}. The {@link Projection} object returned will contain the resulting DOM Node under\n   * the {@link Projection#domNode} property.\n   * This is a low-level method. Users wil typically use a {@link Projector} instead.\n   * @param {VNode} vnode - The root of the virtual DOM tree that was created using the {@link module:maquette.h} function. NOTE: {@link VNode}\n   * objects may only be rendered once.\n   * @param {Object} projectionOptions - Options to be used to create and update the projection, see {@link module:maquette.createProjector}.\n   * @returns {Projection} The {@link Projection} which contains the DOM Node that was created.\n   */\n  create: (vnode: VNode, projectionOptions: ProjectionOptions) => Projection;\n  /**\n   * Appends a new childnode to the DOM which is generated from a {@link VNode}.\n   * This is a low-level method. Users wil typically use a {@link Projector} instead.\n   * @param {Element} parentNode - The parent node for the new childNode.\n   * @param {VNode} vnode - The root of the virtual DOM tree that was created using the {@link module:maquette.h} function. NOTE: {@link VNode}\n   * objects may only be rendered once.\n   * @param {Object} projectionOptions - Options to be used to create and update the projection, see {@link module:maquette.createProjector}.\n   * @returns {Projection} The {@link Projection} that was created.\n   */\n  append: (parentNode: Element, vnode: VNode, projectionOptions: ProjectionOptions) => Projection;\n  /**\n   * Inserts a new DOM node which is generated from a {@link VNode}.\n   * This is a low-level method. Users wil typically use a {@link Projector} instead.\n   * @param {Element} beforeNode - The node that the DOM Node is inserted before.\n   * @param {VNode} vnode - The root of the virtual DOM tree that was created using the {@link module:maquette.h} function.\n   * NOTE: {@link VNode} objects may only be rendered once.\n   * @param {Object} projectionOptions - Options to be used to create and update the projection, see {@link module:maquette.createProjector}.\n   * @returns {Projection} The {@link Projection} that was created.\n   */\n  insertBefore: (beforeNode: Element, vnode: VNode, projectionOptions: ProjectionOptions) => Projection;\n\n  /**\n   * Merges a new DOM node which is generated from a {@link VNode} with an existing DOM Node.\n   * This means that the virtual DOM and real DOM have one overlapping element.\n   * Therefore the selector for the root {@link VNode} will be ignored, but its properties and children will be applied to the Element provided\n   * This is a low-level method. Users wil typically use a {@link Projector} instead.\n   * @param {Element} domNode - The existing element to adopt as the root of the new virtual DOM. Existing attributes and childnodes are preserved.\n   * @param {VNode} vnode - The root of the virtual DOM tree that was created using the {@link module:maquette.h} function. NOTE: {@link VNode} objects\n   * may only be rendered once.\n   * @param {Object} projectionOptions - Options to be used to create and update the projection, see {@link module:maquette.createProjector}.\n   * @returns {Projection} The {@link Projection} that was created.\n   */\n  merge: (element: Element, vnode: VNode, projectionOptions: ProjectionOptions) => Projection;\n};\n\n/**\n * Contains simple low-level utility functions to manipulate the real DOM. The singleton instance is available under {@link module:maquette.dom}.\n */\nexport let dom: MaquetteDom = {\n\n  create: function(vnode: VNode, projectionOptions: ProjectionOptions): Projection {\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n    createDom(vnode, document.createElement('div'), undefined, projectionOptions);\n    return createProjection(vnode, projectionOptions);\n  },\n\n  append: function(parentNode: Element, vnode: VNode, projectionOptions: ProjectionOptions): Projection {\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n    createDom(vnode, parentNode, undefined, projectionOptions);\n    return createProjection(vnode, projectionOptions);\n  },\n\n  insertBefore: function(beforeNode: Element, vnode: VNode, projectionOptions: ProjectionOptions): Projection {\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n    createDom(vnode, beforeNode.parentNode, beforeNode, projectionOptions);\n    return createProjection(vnode, projectionOptions);\n  },\n\n  merge: function(element: Element, vnode: VNode, projectionOptions: ProjectionOptions): Projection {\n    projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n    vnode.domNode = element;\n    initPropertiesAndChildren(element, vnode, projectionOptions);\n    return createProjection(vnode, projectionOptions);\n  }\n\n};\n\n/**\n * A CalculationCache object remembers the previous outcome of a calculation along with the inputs.\n * On subsequent calls the previous outcome is returned if the inputs are identical.\n * This object can be used to bypass both rendering and diffing of a virtual DOM subtree.\n * Instances of CalculationCache can be created using {@link module:maquette.createCache}.\n */\nexport interface CalculationCache<Result> {\n  /**\n   * Manually invalidates the cached outcome.\n   */\n  invalidate: () => void;\n  /**\n   * If the inputs array matches the inputs array from the previous invocation, this method returns the result of the previous invocation.\n   * Otherwise, the calculation function is invoked and its result is cached and returned.\n   * Objects in the inputs array are compared using ===.\n   * @param {Object[]} inputs - Array of objects that are to be compared using === with the inputs from the previous invocation.\n   * These objects are assumed to be immutable primitive values.\n   * @param {function} calculation - Function that takes zero arguments and returns an object (A {@link VNode} assumably) that can be cached.\n   */\n  result: (inputs: Object[], calculation: () => Result) => Result;\n}\n\n/**\n * Creates a {@link CalculationCache} object, useful for caching {@link VNode} trees.\n * In practice, caching of {@link VNode} trees is not needed, because achieving 60 frames per second is almost never a problem.\n * @returns {CalculationCache}\n */\nexport let createCache = <Result>(): CalculationCache<Result> => {\n  let cachedInputs = undefined as Object[];\n  let cachedOutcome = undefined as Result;\n  let result = {\n\n    invalidate: function() {\n      cachedOutcome = undefined;\n      cachedInputs = undefined;\n    },\n\n    result: function(inputs: Object[], calculation: () => Result) {\n      if (cachedInputs) {\n        for (let i = 0; i < inputs.length; i++) {\n          if (cachedInputs[i] !== inputs[i]) {\n            cachedOutcome = undefined;\n          }\n        }\n      }\n      if (!cachedOutcome) {\n        cachedOutcome = calculation();\n        cachedInputs = inputs;\n      }\n      return cachedOutcome;\n    }\n  };\n  return result;\n};\n\n/**\n * Keeps an array of result objects synchronized with an array of source objects.\n * Mapping provides a {@link Mapping#map} function that updates the {@link Mapping#results}.\n * The {@link Mapping#map} function can be called multiple times and the results will get created, removed and updated accordingly.\n * A {@link Mapping} can be used to keep an array of components (objects with a `renderMaquette` method) synchronized with an array of data.\n * Instances of {@link Mapping} can be created using {@link module:maquette.createMapping}.\n */\nexport interface Mapping<Source, Target> {\n  /**\n   * The array of results. These results will be synchronized with the latest array of sources that were provided using {@link Mapping#map}.\n   * @type {Object[]}\n   */\n  results: Array<Target>;\n  /**\n   * Maps a new array of sources and updates {@link Mapping#results}.\n   * @param {Object[]} newSources - The new array of sources.\n   */\n  map: (newSources: Array<Source>) => void;\n}\n\n/**\n * Creates a {@link Mapping} instance that keeps an array of result objects synchronized with an array of source objects.\n * @param {function} getSourceKey - `function(source)` that must return a key to identify each source object. The result must eather be a string or a number.\n * @param {function} createResult - `function(source, index)` that must create a new result object from a given source. This function is identical\n * argument of `Array.map`.\n * @param {function} updateResult - `function(source, target, index)` that updates a result to an updated source.\n * @returns {Mapping}\n */\nexport let createMapping = <Source, Target>(\n  getSourceKey: (source: Source) => (string|number),\n  createResult: (source: Source, index: number) => Target,\n  updateResult: (source: Source, target: Target, index: number) => void): Mapping<Source, Target> => {\n  let keys = [] as Object[];\n  let results = [] as Target[];\n\n  return {\n    results: results,\n    map: function(newSources: Source[]) {\n      let newKeys = newSources.map(getSourceKey);\n      let oldTargets = results.slice();\n      let oldIndex = 0;\n      for (let i = 0; i < newSources.length; i++) {\n        let source = newSources[i];\n        let sourceKey = newKeys[i];\n        if (sourceKey === keys[oldIndex]) {\n          results[i] = oldTargets[oldIndex];\n          updateResult(source, oldTargets[oldIndex], i);\n          oldIndex++;\n        } else {\n          let found = false;\n          for (let j = 1; j < keys.length; j++) {\n            let searchIndex = (oldIndex + j) % keys.length;\n            if (keys[searchIndex] === sourceKey) {\n              results[i] = oldTargets[searchIndex];\n              updateResult(newSources[i], oldTargets[searchIndex], i);\n              oldIndex = searchIndex + 1;\n              found = true;\n              break;\n            }\n          }\n          if (!found) {\n            results[i] = createResult(source, i);\n          }\n        }\n      }\n      results.length = newSources.length;\n      keys = newKeys;\n    }\n  };\n};\n\n/**\n * Creates a {@link Projector} instance using the provided projectionOptions.\n * @param {Object} [projectionOptions] - Options that influence how the DOM is rendered and updated.\n * @param {Object} projectionOptions.transitions - A transition strategy to invoke when\n * enterAnimation and exitAnimation properties are provided as strings.\n * The module `cssTransitions` in the provided `css-transitions.js` file provides such a strategy.\n * A transition strategy is not needed when enterAnimation and exitAnimation properties are provided as functions.\n * @returns {Projector}\n */\nexport let createProjector = function(projectionOptions: ProjectionOptions): Projector {\n  let projector: Projector;\n  projectionOptions = applyDefaultProjectionOptions(projectionOptions);\n  projectionOptions.eventHandlerInterceptor = function(propertyName: string, functionPropertyArgument: Function) {\n    return function() {\n      // intercept function calls (event handlers) to do a render afterwards.\n      projector.scheduleRender();\n      return functionPropertyArgument.apply(this, arguments);\n    };\n  };\n  let renderCompleted = true;\n  let scheduled: number;\n  let stopped = false;\n  let projections = [] as Projection[];\n  let renderFunctions = [] as (() => VNode)[]; // matches the projections array\n\n  let doRender = function() {\n    scheduled = undefined;\n    if (!renderCompleted) {\n      return; // The last render threw an error, it should be logged in the browser console.\n    }\n    renderCompleted = false;\n    for (let i = 0; i < projections.length; i++) {\n      let updatedVnode = renderFunctions[i]();\n      projections[i].update(updatedVnode);\n    }\n    renderCompleted = true;\n  };\n\n  projector = {\n    scheduleRender: function() {\n      if (!scheduled && !stopped) {\n        scheduled = requestAnimationFrame(doRender);\n      }\n    },\n    stop: function() {\n      if (scheduled) {\n        cancelAnimationFrame(scheduled);\n        scheduled = undefined;\n      }\n      stopped = true;\n    },\n\n    resume: function() {\n      stopped = false;\n      renderCompleted = true;\n      projector.scheduleRender();\n    },\n\n    append: function(parentNode, renderMaquetteFunction) {\n      projections.push(dom.append(parentNode, renderMaquetteFunction(), projectionOptions));\n      renderFunctions.push(renderMaquetteFunction);\n    },\n\n    insertBefore: function(beforeNode, renderMaquetteFunction) {\n      projections.push(dom.insertBefore(beforeNode, renderMaquetteFunction(), projectionOptions));\n      renderFunctions.push(renderMaquetteFunction);\n    },\n\n    merge: function(domNode, renderMaquetteFunction) {\n      projections.push(dom.merge(domNode, renderMaquetteFunction(), projectionOptions));\n      renderFunctions.push(renderMaquetteFunction);\n    },\n\n    replace: function(domNode, renderMaquetteFunction) {\n      let vnode = renderMaquetteFunction();\n      createDom(vnode, domNode.parentNode, domNode, projectionOptions);\n      domNode.parentNode.removeChild(domNode);\n      projections.push(createProjection(vnode, projectionOptions));\n      renderFunctions.push(renderMaquetteFunction);\n    }\n  };\n  return projector;\n};\n\n// Not used anywhere in the maquette sourcecode, but this is a widely used pattern.\nexport interface Component {\n  renderMaquette(): VNode;\n}\n"],"sourceRoot":"/source/"}